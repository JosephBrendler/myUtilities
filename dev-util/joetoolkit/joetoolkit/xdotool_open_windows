#!/bin/bash
source /usr/sbin/script_header_joetoo

#-----[ initialize variables ]-------------------------------------------------
width="46%"
height="85%"
X1="1%"
Y1="5%"
X2="51%"
BUILD="0.003 240918"

user=joe

logFile="/home/joe/xdotool_open_windows.log"
#terminal_program=/usr/bin/konsole
terminal_program=/usr/bin/lxterminal
#terminal_program=/usr/bin/uxterm
sleepWait=0.5    # default - set in .conf
longWait=2       # default - set in .conf
VERBOSE=$TRUE
#VERBOSE=$FALSE
verbosity=4

ssh_session_list=( \
 x_blank x_blank \
 x_blank x_blank \
 x_blank x_blank \
 x_blank x_blank \
 x_blank x_blank \
 x_blank x_blank \
 )

# load custom configuration, if it exists
[[ -f ./xdotool_open_windows.conf ]] && source ./xdotool_open_windows.conf && \
  d_message "sourced local ($PWD) version of xdotool_open_windows.conf"
[[ -f /etc/xdotool_open_windows.conf ]] && source /etc/xdotool_open_windows.conf && \
  d_message "sourced /etc/ version of xdotool_open_windows.conf"

d_message "(DEBUG $(my_short_date)) Top of script. Just set global variables." 3

#-----[ function blocks ]-------------------------------------------------
print_ssh_session_list() {
  d_message "now running print_ssh_session_list" 3
#echo "ssh_session_list= [ ${ssh_session_list[@]} ]"
#echo  "cutoff=${#ssh_session_list[@]}"
  for ((j=0; j<${#ssh_session_list[@]}; j+=2 ))
  do
#    echo "j=$j"
    cmd_target=${ssh_session_list[$j]}
    d_message "$(my_short_date) debug ssh_session_list: j=$j ssh_session_list[\$j]=${ssh_session_list[$j]} cmd_target=$cmd_target" 3
    let k=$(( $j + 1 ))
    cmd_target=${ssh_session_list[$k]}
    d_message "$(my_short_date) debug ssh_session_list: k=$k ssh_session_list[\$k]=${ssh_session_list[$k]} cmd_target=$cmd_target" 3
  done
}

setup_window_for_idx() {
    local idx=$1
    cmd_target=${ssh_session_list[$idx]}
    d_message "$(my_short_date) debug ssh_session_list: i=$i idx=$idx ssh_session_list[\$idx]=${ssh_session_list[$idx]} cmd_target=$cmd_target" 3
    d_message "$(my_short_date) idx = [$idx] , cmd_target = $cmd_target" 2
    if [[ "${cmd_target:0:2}" != "x_" ]]
    then
      cmd="--command=\"su -user joe ssh $cmd_target\""
#      d_message "$(my_short_date) about to run \"${terminal_program} --title=\"$(basename ${terminal_program})_${i}.${idx} &\"" 1
      d_message "$(my_short_date) about to run \"${terminal_program} 2\>/dev/null &\"\"" 1
      ${terminal_program} 2>/dev/null &
      sleep $longWait
      # open new window
      newterm=$(xdotool getactivewindow 2>/dev/null)
      xdotool set_window --name "$(hostname) $(basename ${terminal_program})_${i}.${idx}" ${newterm}
      newtermname=$(xdotool getactivewindow getwindowname 2>/dev/null)
      newtermgeometry=$(xdotool getactivewindow getwindowgeometry 2>/dev/null)
      d_message "$(my_short_date) openned new terminal_win = [$newterm $newtermname]" 1
      d_message "$(my_short_date) new terminal_win geometry = [$newtermgeometry]" 2
      d_message "$(my_short_date) setting focus to window $newtermname on desktop ${i}" 1
      xdotool windowfocus $newterm
      sleep $sleepWait
      # set window size
      d_message "$(my_short_date) setting size of window $newtermname to ${width} ${height}" 2
      xdotool windowsize --sync --usehints $newterm ${width} ${height}
      sleep $sleepWait
      # move window - put even numbered windows on right, odd left (leave cursor on left)
      if [[ $((${idx}%2)) -eq 0 ]]
      then # even
        d_message "$(my_short_date) moving window $newtermname to ${X1} ${Y1}" 2
        xdotool windowmove --sync $newterm ${X1} ${Y1}
        sleep $sleepWait
      else # odd
        d_message "$(my_short_date) moving window $newtermname to ${X2} ${Y1}" 2
        xdotool windowmove --sync $newterm ${X2} ${Y1}
        sleep $sleepWait
      fi
      # open ssh session to idxed target
      d_message "$(my_short_date) launching ssh with commands [su ${user}] and [$cmd_target] in window $newtermname on desktop ${i}" 1
#      xdotool type --window ${newterm} --delay 30 --clearmodifiers "su ${user}"
#      sleep $sleepWait
#      xdotool key --window ${newterm} --delay 30 --clearmodifiers Return
#      sleep $sleepWait
      xdotool type --window ${newterm} --delay 30 --clearmodifiers "ssh ${cmd_target}"
      sleep $sleepWait
      xdotool key --window ${newterm} --delay 30 --clearmodifiers Return
      sleep $sleepWait

    fi
}

#-----[ main script ]-----------------------------------------------------
d_message "now in main script" 3
#checknotroot
checknotroot

d_message "$(my_short_date) first closing open windows..." 1
xdotool_close_windows  ## partner external script
d_message "$(my_short_date) done closing" 1

separator "xdotool_open_windows"

numdesktops=$((${#ssh_session_list[@]} / 2))
[[ $(($numdesktops % 2)) -eq 1 ]] && let numdesktops+=1
xdotool set_num_desktops ${numdesktops}

num_desktops=$(xdotool get_num_desktops)
control_window=$(xdotool getactivewindow)

# TODO -- showconfig ()
d_message "numdesktops: $numdesktops (calculated)" 1
d_message "num_desktops: $num_desktops (set)" 1
d_message "control_window: $control_window" 1

d_message "$(my_short_date) Openning $(basename ${terminal_program}) terminals and starting ssh sessions. Please wait..." 1
## TODO - rotate logfile
d_message "$(my_short_date) removing old log file" 1
rm -v $logFile
exec 6>&1 2>/dev/null           # Link file descriptor #6 with stdout. Saves stdout.
exec > $logFile  2>/dev/null    # stdout replaced with file.
# ----------------------------------------------------------- #
# All output from commands in this block sent to file $logFile

d_message "$(my_short_date) about to enumerate ssh session list..." 1
print_ssh_session_list

d_message "$(my_short_date) now openning new windows" 1
for ((i=0; i<${#ssh_session_list[@]}; i+=2 ))
do   # launch two terminal windows per desktop
  let index=$(( $i / 2 ))
  d_message "setting desktop ${index}" 1
  xdotool set_desktop ${index}
  sleep $sleepWait
  d_message "launching terminals on desktop ${index}" 1
  if [[ $index -eq 0 ]] # this desktop is for the control window - don't make a new one
  then
    ## TODO - rename control window; move it to desktop 0
    d_message "moving control_window $control_window to ${X1} ${Y1}" 2
    xdotool windowmove --sync $control_window ${X1} ${Y1}
    sleep $sleepWait
    d_message "setting size of control_window $control_window to ${width} ${height}" 2
    xdotool windowsize --sync --usehints $control_window ${width} ${height}
    sleep $sleepWait
  else
    setup_window_for_idx $i
    sleep $sleepWait
    setup_window_for_idx $(( $i + 1 ))
    sleep $sleepWait
  fi
done
xdotool set_desktop 0
sleep $sleepWait
xdotool windowfocus window=${control_window}
#xdotool mousemove --window ${control_window} 5% 5% click 1
#xdotool mousemove --window ${control_window} 20 20 click 1

exec 1>&6 6>&-  2>/dev/null     # Restore stdout and close file descriptor #6.

cat $logFile
