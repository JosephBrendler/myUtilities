#!/bin/bash
# bs - implements simple binary search for target ($2) in list ($1)
bs()
{
  # return the index number of the entry in the list, or -1 if not found
  let "result=-1"
  search_list=$1
  target=$2
  start=$3
  end=$4
  let "depth+=1"
  if [[ $depth -gt ${#range[@]} ]]
  then
    d_message "Something is wrong here -- depth [$depth] exceeds range [${limit}]" 2
    return 1  # can't go deeper than the length of the list
  fi

  d_message " depth=[$depth]" 3
  d_message " start=[$start]" 3
  d_message "   end=[$end]" 3

  diff=$(( $end - $start ))
  middle=$(( $start + $(( $diff / 2 )) ))
  d_message "  diff=[$diff]" 3
  ## guarantee to look at both start and end before giving up
#  [[ $diff -eq 1 ]] && $((middle+=$(( $depth % 2 )) ))
  [[ $diff -eq 1 ]] && let "middle+=$(( ${depth} % 2 ))"
  d_message "new middle=[$middle]" 3
  d_message ">> [${range[middle]}] <<" 4
  if [[ "${range[middle]}" == "${target}" ]]
  then
    result=$middle   # equal
  else
    [[ $start -eq $end ]] && return 1
    if [[ "${range[middle]}" > "${target}" ]]
    then
      d_message "candidate [${range[middle]}] is GREATER than target [${target}] -- search lower half next" 4
      bs $search_list $target $start $middle
    else
      d_message "candidate [${range[middle]}] is LESS than target [${target}] -- search upper half next" 4
      bs $search_list $target $middle $end
    fi
  fi
  d_message "about to exit at depth [$depth], result is [$result]" 4
  return 0
}

#----[ main script - alphabetize the list, then search it ]---------------
source /usr/sbin/script_header_joetoo
VERBOSE=$TRUE
[[ ! -z $3 ]] && [[ $3 =~ [0-9] ]] && verbosity=$3 || verbosity=1

let "depth=1"
let "result=-1"
range=($(cat $1 | sort -udb))
limit=${#range[@]}
message "${BYon}Looking for ${BWon}$2 ${BYon}in ${BWon}$1 ${BYon}--${Boff}"
message "  ${BYon}searching among ${BWon}${#range[@]} ${BYon}candidate entries...${Boff}"
echo
bs $range $2 0 ${#range[@]}
d_message "just got back from doing bs, result is $result" 2
[[ ${result} -gt 0 ]] && \
  message "${BGon}Found ${range[result]} at line ${BWon}${result}${BGon} of ${1}${Boff}" || \
  E_message "${BRon}Not found${Boff}"
echo
d_message "(had to go to depth $depth to figure that out)" 2
