#!/bin/bash
# raspi4_vpn.start   joe brendler
# Check services, temp, vpn; Initialize, blink, and then light my LED on GPIO pins
# requires dev-libs/pigpio::gentoo
# rev 10 July 2023 - add vpn watch and restart
#
cputempfile=/sys/class/thermal/thermal_zone0/temp
vcgencmdfile=/usr/bin/vcgencmd
pi4_temp_watch_program=/usr/local/sbin/pi4_temp_watch_for_led
pi4_svc_watch_program=/usr/local/sbin/pi4_svc_watch_for_led
pi4_vpn_watch_program=/usr/local/sbin/pi4_vpn_watch_for_led

TEMP_LED=4         # raspi gpio pin 4 (VPN LED)(red)
SVCs_LED=3         # raspi gpio pin 3 (Services LED)(yellow)
VPN_LED=2          # raspi gpio pin 2 (Services LED)(green)
twait=10           # s wait between operations
blinkwait=0.05     # s wait during fluttler blink
blinklongwait=0.5  # s wait during blink between flutters
temp_threshold=60  # deg celcius above which to consider cpu to be hot
TRUE=0
FALSE=1

#DO_VPN=$FALSE       # if using a vpn...
DO_VPN=$TRUE       # if using a vpn...

arg=""; ip_address=""; class_c=""; resolveconf_file="";  #initialize null



#-----[ functions ]-----------------------------------
get_ip() {
  while [[ ! ${ip_address} ]]
  do
    blink_light ${SVCs_LED}
    # wait for inet (ipv4) address to be available, and then assign it to ip_address
    ip_address=$(ifconfig wlan0 | grep 'inet ' | sed 's/^[[:space:]]*//' | cut -d' ' -f2)
  done
  class_c=$(echo $ip_address | cut -d'.' -f1,2,3)
}

initialize_pigs() {
  pigs m ${TEMP_LED} w         # set mode output
  pigs m ${SVCs_LED} w         # set mode output
  pigs m ${VPN_LED} w          # set mode output
}

light_off() {
  pigs w ${1} 0
}

light_on() {
  pigs w ${1} 1
}

blink_light() {
  # blink and then light my LED (on pin designated by arg 1 $1 )
  LED=$1
  for ((i=0;i<5;i++))       # blink on-off 5 times, quickly
  do
    light_on ${LED}
    sleep ${blinkwait}
    light_off ${LED}
    sleep ${blinkwait}
  done
}

c_to_f() {
  tc="$1"
  tf=$(echo "scale=2;((9/5) * $tc) + 32" |bc)
  echo $tc\°C \($tf\°F\)
}

#-----[ main ]-----------------------------------

killall pi4_temp_watch_for_led  # kill any residual temp-watch (if run interactively)
killall pi4_svc_watch_for_led   # kill any residual svc-watch (if run interactively)
killall pi4_vpn_watch_for_led   # kill any residual vpn-watch (if run interactively)

initialize_pigs
for x in ${TEMP_LED} ${SVCs_LED} ${VPN_LED}; do light_off $x; done
get_ip

case ${class_c} in
  "192.168.66"|"192.168.3") arg="l";;
  *) arg="r";;
esac

case ${arg} in
  "l") resolveconf_file="/root/bin/resolv.conf.local";;
  "r") resolveconf_file="/root/bin/resolv.conf.remote";;
  *)   resolveconf_file="/root/bin/resolv.conf.good";;
esac

echo "ip address: ${ip_address}"
echo "class c...: ${class_c}"

## preserve the right resolv.conf, check service status
echo -n "will now copy [ ${resolveconf_file} ] to /etc/resolv.conf... "
chattr -i /etc/resolv.conf && \
  cp ${resolveconf_file} /etc/resolv.conf && \
  chattr +i /etc/resolv.conf
[[ $? ]] && echo "[ set resolv.conf ok ]" || echo "[ failure setting resolv.conf !! ]"

## check service; [[ true only if all services are "started" ]], and
##  if success, then blink/light LED
echo -n "Now delay and then check services..."
sleep ${twait} && [[ ! $(rc-status | grep '\[' | grep -v started) ]]
[[ $? ]] && blink_light ${SVCs_LED} && light_on ${SVCs_LED} && echo "[ Services all ok ]" || \
         echo "[ Services not all ok !! ]"

# start the vpn, copy resolv.conf, and check services; light LED if all OK
[[ $DO_VPN ]] && echo -n "Now delay and then start vpn..." && sleep ${twait} && /usr/local/sbin/startvpn ${arg} && \
   blink_light ${VPN_LED} && light_on ${VPN_LED} && echo "[ VPN ok ]" || echo "[ VPN failed !! ]"

# check temp immediately
echo "Now check temperature and launch background temperature monitor..."
cpu_temp=$(cat ${cputempfile} 2>/dev/null)
[[ ${cpu_temp:0:2} -ge ${temp_threshold} ]] && pigs w ${TEMP_LED} 1 || pigs w ${TEMP_LED} 0

# now launch pi4_temp_watch in backbround
${pi4_temp_watch_program} ${temp_threshold} &

# now launch pi4_svc_watch in backbround
${pi4_svc_watch_program} &

# now launch pi4_vpn_watch in backbround
${pi4_vpn_watch_program} &
