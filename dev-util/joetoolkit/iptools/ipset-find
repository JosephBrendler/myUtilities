#!/bin/bash
# determine which ipset(s) match search criteria
# Joe Brendler, 2 Nov 14

source /usr/sbin/script_header_joetoo
BUILD="0.0.02"

#VERBOSE=$TRUE
VERBOSE=$FALSE
verbosity=2

ip_found_color="${BGon}"
ip_not_found_color="${BRon}"
search_term=""

## ToDo - add "parseOptions()" function, inlcuding increment verbosity per "v" in -vv, etc

parseCommandLine()
{
d_message "parsing commandline [ $@ ]" 1
while [[ $# -gt 0 ]]
do
  # if it starts with "-" then treat as option, else treat as ip address
  if [ "${1:0:1}" == "-" ]
  then
    d_message "about to process argument(s): [ $* ]" 1
    d_message "1: [ $1 ], 2: [ $2 ]" 2
    # process command line argument (must be one of the following)
    [ ! -z "$1" ] && case "$1" in
      "-b" | "--bogus"         ) BOGUS_VARIABLE="yes" ;;
      "-h" | "--help"          ) useage ; exit 0 ;;
      "-v" | "--verbose"       ) VERBOSE=$TRUE; let "verbosity+=1" ;;
      *                        ) process_compound_arg $1 ;;
    esac
  else
    [ ! -z "$1" ] && search_term="$1" || ( useage && exit 1 )
  fi
  shift
done
}

process_compound_arg()
{
# must begin with a single dash
[ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && useage && exit 1
# must not begin with two dashes (ToDo - pick up in process_argument)
[ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && useage && exit 1
# strip leading dash(es)
myargs=${1##-}
# handle remaining characters in sequence
while [ -n "${myargs}" ]
do
    #handle first char
    case ${myargs:0:1} in
        "b") BOGUS_VARIABLE="yes" ;;
        "v") VERBOSE=$TRUE; let "verbosity+=1" ;;
        *  ) E_message "${E_BAD_ARGS}" && useage && exit 1
esac
    #strip first char from myargs (i.e. "shift")
    myargs=${myargs:1}
done
}

useage()
{
  echo -e "${BGon}Useage:  ${Boff}ipset-find [-v[v[v[...]]]|-b] <search_criterion>"
  echo -e " Command line options:"
  echo -e "    "$BBon"[-h | --help]"$Boff".............print this text"
  echo -e "    "$BBon"[-v | --verbose]"$Boff"..........increase verbosity"
  echo
  echo -e "${BBon}Example: ${Boff}ipset-find '^192.'"
}

#---[ main script ]-------------------------------
checkroot

separator "ipset-find-${BUILD}"

# $* and $@ are not the same; $* is a string and $@ is an actual array
parseCommandLine "$@"

if [[ ! -z ${search_term} ]]
then
  message "Searching ipsets for: [ ${BYon}${search_term}${Boff} ]"
  # ipsets named "ipdeny" and "*_set" are of type list:set (ignore these)
  for i in $(ipset list -n | grep -v "_set" | grep -v "ipdeny" )
  do
    ipset test $i ${search_term} 2>1 && \
      message "${search_term} ${ip_found_color}IS${Boff} in set ${ip_found_color}${i}${Boff}" || \
      dE_message "${search_term} is ${ip_not_found_color}NOT${Boff} in set ${i}" 3
  done
else
  useage
fi
