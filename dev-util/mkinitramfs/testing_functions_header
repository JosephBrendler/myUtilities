#!/bin/ash

### -----[ duplicated functions ]--------------------------------------------------------------
### These scripts exist in both "validated_" and "testing_" headers but have been modified in each
### In the live init script, source the "testing_" header first and "validated_" header second
### In the testing script, source "validated_" header first and the "testing_" header second
### The later-sourced will override, and this avoid having the "testing" script mess with
###    non-testing luks devices on a testing host system
assign_volume() {
    # given string volume name (root_ usr_volume), scan lvs and make volume pathname assignment
    volume_name=$1
    prefix="${volume_name/_volume}"
    my_volume="$(eval echo \$${volume_name})"
    if [[ ${#my_volume} -eq 0 ]] ; then
#        d_message "about to evaluate ${prefix}_volume=/dev/mapper/$(lvs | grep ${prefix} | awk '{print $2"-"$1}')" 3
#        d_message_n "${prefix} volume_name not assigned, scanning ..." 1
#        my_volume="/dev/mapper/$(lvs | grep ${prefix} | awk '{print $2"-"$1}')"
# substitute for testing only -
        d_message "about to evaluate ${prefix}_volume=/dev/mapper/$(lvs | grep -v 'gmki91' | grep ${prefix} | awk '{print $2"-"$1}')" 3
        d_message_n "${prefix} volume_name not assigned, scanning ..." 1
        my_volume="/dev/mapper/$(lvs | grep -v 'gmki91' | grep ${prefix} | awk '{print $2"-"$1}')"
        eval "${prefix}_volume=${my_volume}"
        result=$?
        [[ $verbosity -ge 1 ]] && right_status $result
        d_message "result: my_volume: ${my_volume}" 3
    else
        message "No action. ${prefix} volume already assigned [ ${my_volume} ]"
    fi
}

unlock_devices() {
    # for version 4.x and beyond, this is a complete re-write of the unlocking procedure.
    # The unlock method has already been determined, and the script will now "scan" for LUKS
    # devices and automatically use the selected method (key vs prompt) to unlock all of them
    local method=$1;
    local device="";
    local line="";

    [[ "$method" = "prompt" ]] && read -s -p "Enter your LUKS passphrase: " pass && echo;

### substitute for testing only
    for device in $(blkid | grep -i luks | grep -v 'UUID="ef4195f0-6c4a-4116-86dd-fc469ddb6e21"' |cut -d':' -f1 )
###    for device in $(blkid | grep -i luks | cut -d':' -f1)
    do
        # use cryptsetup luksOpen to open each device /dev/sdxn with corresponding name edxn
        # 27 Oct 23 - generalize to scsi or nvme devices (sdXX or nvmeXnXpX)
        bn=$(basename ${device})
        case ${bn:0:2} in
          "sd" ) # scsi device
            edev=$(echo ${bn} | sed 's/^s/e/')
            ;;
          "nv" ) # nvme device
            edev=$(echo ${bn} | sed 's/^nvme/ev/' | sed 's/[np]//g')
            ;;
          "mm" ) # mmc device
            edev=$(echo ${bn} | sed 's/^mmcblk/em/' | sed 's/p//g')
            ;;
          *    ) # tbd
            echo "Error: bad luks device name [$device]"
            ;;
        esac
        line="${device} ${edev}"
        case "$method" in
            "prompt")
                mycmd="echo $pass | cryptsetup luksOpen $line"
                d_message 'about to execute [eval "${mycmd}"]' 3
                [[ $verbosity -gt 4 ]] && message "[ ${mycmd} ]" && sh_countdown $(( $init_wait * 3 ))
                eval "${mycmd}"
                if [[ $? -eq 0 ]]
                then
                    message "Unlocked $line with passphrase provided"
                else
                    E_message "${BRon}mycmd failed. Dropping to a shell. ${Boff}"
                    sh_countdown $(( $init_wait * 5 ))
                    [[ "$init_lock_down" = "no" ]] && rescue_shell
                fi;
                [[ $verbosity -gt 4 ]] && sh_countdown $(( $init_wait * 3 ))
                ;;
            "key")
                # passdevice already mounted,
                # Use cryptsetup option for key file -d <mount_point><keyfile> and -S <key slot #>
                # unmount the passdevice when we are done with it
                message "About to execute command [ cryptsetup -d ${init_passdevice_mount_point}${init_keyfile} -S 1 luksOpen $line ]"
                cryptsetup -d $(echo "${init_passdevice_mount_point%/}${init_keyfile}") -S 1 luksOpen $line
                if [[ $? -eq 0 ]]
                then  # cryptsetup luksOpen with key worked
                    message "Unlocked $line with key found at $(echo ${init_passdevice_mount_point}${init_keyfile})"
                else  # cryptsetup luksOpen with key failed
                    E_message $BRon"Error: Could not unlock ${BYon}$line ${BRon}with key found at ${BMon}$(echo ${init_passdevice_mount_point}${init_keyfile})"$Boff
                    E_message $BRon"Dropping to a shell"$Boff
                    sh_countdown $(( $init_wait * 5 ))
                    [[ "$init_lock_down" = "no" ]] && rescue_shell
                fi;
                [[ $verbosity -gt 2 ]] && sh_countdown $(( $init_wait * 3 ))
                ;;
        esac
    done
}
### ----[ end duplicated functions ]--------------------------------------------------------------------------------------------------------------

test() {
        verbosity=2
        d_echo "testing d_echo" 2
        d_echo "testing d_echo" 3
        message "should have printed only ${BGon}one${Boff} \"testing d_echo\" line"
}

teststringlength() {
    str="$1"
    echo "str: ${str}"
    echo -n "1: "; [ ! -z $str ] && echo "non-zero" || echo "zero"
    echo -n "2: "; [ ${#str} -gt 0 ] && echo "-gt zero" || echo "zero"
    echo -n "3: "; [[ ! -z $str ]] && echo "non-zero" || echo "zero"
    echo -n "4: "; [[ ${#str} -gt 0 ]] && echo "-gt zero" || echo "zero"
    echo -n "5: "; [[ ${#str} -ne 0 ]] && echo "-ne zero" || echo "zero"
    echo -n "6: "; [[ ${#str} -eq 0 ]]  && echo "-eq zero" || echo "not -eq zero"
    echo -n "7: "; [[ ! ${#str} -eq 0 ]]  && echo "not -eq zero" || echo "-eq zero"
    echo -n "8: "; [[ -n ${str} ]]  && echo "-n zero" || echo "zero"
}

