# init.conf
# configuration file for initramfs init script
# Joe Brendler

# change defaults to tailor for your environment
#   all configurations must be legitimate variable assignment statements
#   because they are assigned in the init script by simply sourcing this file
#
# The init_passdevice is an optional removeable block device on which you have saved an
#   encryption key that can be used to unlock your luks-encrypted devices.

# The init script will scan the host system for devices matching one of these known
# identifiers (label, uuid, or device name (e.g. /dev/sdg8) can be used)
init_passdevice_list=" \
KEY \
CARD \
5a01f645-afc8-43d2-8942-1ede622fb153 \
1E6B-BAAA \
E902-A074 \
407A-3072 \
13a02901-88cc-464f-8ea4-17d612155409 \
0A6C-5A72 \
ADC6-EA85 \
9BE8-C3EC \
EFC5-C4A3 \
FC75-2C54 \
E81C-D549"

# Specify where you want to mount the init_passdevice on the host system - must actually exist
init_passdevice_mount_point="/mnt/thumb"

# if an initpassdevice is used, specify the full quoted pathname of the file containing
#   nothing but a single line with the hex key
# Note: if you already have a key with a passphrase you can use hashalot to generate
#   the corresponding key file with the command:
#    hashalot -s "$salt" -x "<hash>"
#   where $salt is the initialization vector avaliable using the command:
#    cryptsetup luksDump <device>
#   Default is null, as above.
#init_keyfile=
init_keyfile="/crypt/dat"

# Starting with version 4.0, the use of mdev to create the required device
# nodes is no longer optional.  However, here you can still specify the time
# in minutes you want init to wait for mdev to identify your init_passdevice
# before giving up and prompting you for a passphrase.
# (this can be any integer greater than or equal to zero)
init_mdev_wait=3

# If you want more time to read the information provided by init during
#   bootup, change this.  This can be helpful in troubleshooting your
#   initial configuration.  This is a multiplyer for the number of seconds 
#   used for the "sleep" commands in the init script; thus specifying
#   init_wait=1 is equivalent to accepting the default wait times, and using
#   init_wait=2 will double the wait time at each programmed pause.
init_wait=1

# optionally assign root and usr volumes
#  these will be overridden by assignments on the kernel's cmdline, if present
#  in the vormat root=/dev/mapper/vg_gmki91-root or usr=/dev/mapper/vg_gmki91-usr 
#  Note: you can control these kernel cmdline arguments by editing your bootloader config files
#   e.g. /etc/default/grub (amd64) and/or  /etc/grub.d/40_custom (amd64 xen)
#        and/or  /boot/cmdline.txt (raspberry pi)  and/or   /boot/joetooEnv.txt (rockchip)
# if not specified here or found on the kernel cmdline, the init script will try to find root and usr
#   volumes among unlocked LUKS device(s);
#   the init script will then scam them woth fomdfs amd bklod.
#   amd ot will mount the filesystem by discovered type
#init_root_volume=/dev/mapper/vg_gmki91-root
#init_usr_volume=/dev/mapper/vg_gmki91-usr

#and enable verbose output - e.g. for debugging
#verbosity=2

# set this to $TRUE to prevent broken initramfs from dropping to a shell (security vulnerability)
#init_lock_down=$FALSE
