#!/bin/bash
#   script header with basic functions
# Author: joe brendler 26 Jan 2017
#         24 June 2025 - v1.0.0 moved to /usr/sbin/ and renamed/consolidated script_header_joetoo_extended
#
# NOTE: to use this header, you must first source the basic script_header_joetoo
#

# note: this header expects this to be assigned already
#script_header_installed_dir=/usr/sbin

countdown() # output text message (arg $2, optional), and count-down seconds (arg $1)
{
  # special note: use base#number notation with prefix 10# to ensure interpretation as base 10
  # store current minutes and seconds
  min=10#$(date +%M) ; sec=10#$(date +%S)
  wait_time=10#60  #default = 1 minute
  [[ ! -z $1 ]] && wait_time="10#${1}"
  # if wait time is greater than 60 seconds, convert to minutes and seconds, else calculate it
  if [[ "${wait_time}" -ge "60" ]] ; then
    wait_min=$(( ${wait_time} / 60 ))  ;  wait_sec=$(( ${wait_time} % 60 ))
  else
    wait_min=10#0  ;  wait_sec=${wait_time}
  fi
  tgt_min="$(( ${min} + ${wait_min} ))"  ;  tgt_sec="$(( ${sec} + ${wait_sec} ))"
  if [[ "${tgt_sec}" -ge "60" ]] ; then
    tgt_min="$(( ${tgt_min} + 1 ))"  ; tgt_sec="$(( ${tgt_sec} % 60 ))"
  fi
  min="$(date +%M)"  ;  sec="$(date +%S)"
  rem="$(( $(( $(( ${tgt_min} * 60 )) + ${tgt_sec} )) - $(( $(( ${min} * 60 )) + ${sec} )) ))"
  # default message is "Pausing, ", else get from arg $2
  [[ ! -z $2 ]] && wait_msg="$2" || wait_msg="Pausing,"
  while [[ "${rem}" -gt "0" ]] ; do
    echo -en "\r${wait_msg} Time: "$(date +%H:%M:%S)
    sleep 0.1
    min="10#$(date +%M)"  ;  sec="10#$(date +%S)"
    rem="$(( $(( $(( ${tgt_min} * 60 )) + ${tgt_sec} )) - $(( $(( ${min} * 60 )) + ${sec} )) ))"
    echo -n "    $rem seconds left..."
  done ; echo return 0
}

myBOX()     # draw an esc-seq single-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  local FG; local BG; local B
  # default position to centered, upper 1/3
  [[ -z $3 ]] && WT=50 || WT=$3; [[ -z $4 ]] && HT=15 || HT=$4
  [[ -z $1 ]] && ULrow=$(( $(termheight)/3 - $HT/2 )) || ULrow=$1
  [[ -z $2 ]] && ULcol=$(( $(termwidth)/2 - $WT/2 )) || ULcol=$2
  [[ -z $5 ]] && FG=${WHITE} || FG=$5; [[ -z $6 ]] && BG=${BACKoff} || BG=$6
  [[ -z $7 ]] && B=${SGRoff} || B=$7
  # begin box draw with openning escape sequence
  myBOX=${myBOX}${ESCon}
  # draw top line with spaces, UL corner, H-lines, UR corner, <CR>
  myBOX=${myBOX}${Boff}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${UL_wall}$(repeat ${H_wall} ${WT})${UR_wall}${Boff}"\n"
  # draw HT number of : space, V-line, space, V-line, <CR>
  for ((i=1;i<${HT};i++)); do
    myBOX=${myBOX}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${V_wall}$(repeat " " ${WT})${V_wall}${Boff}"\n"; done
  # draw bottom line with spaces, LL corner, H-lines, LR corner, <CR>
  myBOX=${myBOX}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${LL_wall}$(repeat ${H_wall} ${WT})${LR_wall}${Boff}"\n"
  # complete box draw with closing escape sequnce
  myBOX=${myBOX}${ESCoff}
  # position curson at left of upper row inside box
  CLR; CUP ${ULrow} 1
  printf "${myBOX}"
  CUP $(termheight) 1
  return 0
}

msgBOX()    # draw an esc-seq single-line message box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  local FG; local BG; local B; local TITLE; local MSG; local LINE
  # default position to centered, upper 1/3
  [[ -z $3 ]] && WT=50 || WT=$3; [[ -z $4 ]] && HT=15 || HT=$4
  [[ -z $1 ]] && ULrow=$(( $(termheight)/3 - $HT/2 )) || ULrow=$1
  [[ -z $2 ]] && ULcol=$(( $(termwidth)/2 - $WT/2 )) || ULcol=$2
  [[ -z $5 ]] && FG=${WHITE} || FG=$5; [[ -z $6 ]] && BG=${BACKoff} || BG=$6
  [[ -z $7 ]] && B=${SGRoff} || B=$7
  [[ -z $8 ]] && TITLE="joetoo MessageBox" || TITLE="$8"
  [[ -z $9 ]] && MSG="Message goes here..." || MSG="$9"

  myBOX "$ULrow" "$ULcol" "$WT" "$HT" "$FG" "$BG" "$B"
  LINE="${MSG:$(($WT - 4))}"
  # break message up into appropriate width chuncks, using a 2-space margin inside the box

  CUP $(termheight) 1
  return 0
}

my_u_BOX()  # draw a unicode single-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  [[ -z $1 ]] && ULrow=1 || ULrow=$1; [[ -z $2 ]] && ULcol=1 || ULcol=$2
  [[ -z $3 ]] && WT=50 || WT=$3;      [[ -z $4 ]] && HT=15 || HT=$4
  myBOX=${myBOX}$(repeat " " ${ULcol})${uUL_wall}$(repeat ${uH_wall} ${WT})${uUR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uV_wall}$(repeat " " ${WT})${uV_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uLL_wall}$(repeat ${uH_wall} ${WT})${uLR_wall}"\n"
  CLR; CUP ${ULrow} ${ULcol}
  printf "${myBOX}"
  return 0
}

my_uD_BOX() # draw a unicode double-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  [[ -z $1 ]] && ULrow=1 || ULrow=$1; [[ -z $2 ]] && ULcol=1 || ULcol=$2
  [[ -z $3 ]] && WT=50 || WT=$3;      [[ -z $4 ]] && HT=15 || HT=$4
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_UL_wall}$(repeat ${uD_H_wall} ${WT})${uD_UR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uD_V_wall}$(repeat " " ${WT})${uD_V_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_LL_wall}$(repeat ${uD_H_wall} ${WT})${uD_LR_wall}"\n"
  CLR; CUP ${ULrow} ${ULcol}
  printf "${myBOX}"
  return 0
}

#---[ RGB ]--------------------------------------------------------
#ToDo: experiment with rgb methods for color-setting
# NOTE: this might work in a Konsole or Gnome terminal, but not lxterminal!!
# see "well known" triplet values at https://en.wikipedia.org/wiki/ANSI_escape_code
#  RED=(205, 0, 0)
#  ESC[ ... 38;2;<r>;<g>;<b> ... m Select RGB foreground color
#  ESC[ ... 48;2;<r>;<g>;<b> ... m Select RGB background color
RGB_FG()    # echo esc seq color as RGB. (OK in Konsole/Gnome term, but not lxterminal)
{ local FG="38;2"; R=$1; G=$2; B=$3; echo -e "${CSI}${FG};${R};${G};${B}m" ; }
RGB_BG()    # echo esc seq color as RGB. (OK in Konsole/Gnome term, but not lxterminal)
{ local BG="48;2"; R=$1; G=$2; B=$3; echo -e "${CSI}${BG};${R};${G};${B}m" ; }

modular_msg()          # w/in margins, output externally assigned ${MSG} to array ${LINE[@]}
{
[[ $# -gt 1 ]] && E_message "Too many arguments" && E_message "exiting process [$$]" && exit 1
local WT=0  ## width of box
local WIDTH=0 ## width between box margins
local LENGTH=0 ## length of current line

[[ -z $1 ]] && WT=70 || WT=$1
WIDTH=$(($WT - 4))

d_message "Box width=[${WT}]" 3
d_message "Available width=[${WIDTH}]" 3
# Break the message up into appropriate width chunks, with a 2-space margin, by inserting newline character
#   in place of appropriate spaces, or breaking words if the word itself is longer than the available width.
#   Don't split or count length of escape sequences
local i=1              ## line counter
local ESFLAG=$FALSE    ## flag to indicate whether the current character is part of an esc sequence
local c=0              ## character counter
local char=""          ## current character
local w=1              ## word counter
local WORD=("")        ## current word
local EOW=$FALSE       ## End of Word flag
local breakpoint=0     ## pointer to where we might break up a word
local LEFTOVER         ## part of a word that's left over if we have to break it up
local EOL=$FALSE       ## End of Line flag

d_message "MSG=[${MSG}]" 2
echo

MSG=$(echo "$MSG" | sed 's/^[ \t]*//')  # strip leading whitespace
d_message "stripped MSG=[${MSG}]" 2
echo

# fill one line, one character at at time, escape sequences don't have "length" to count
LINE[i]=""; let "LENGTH=0"  ## (re)initialize
d_message "Now working on line $i" 3
WORD[w]=""; let "WLEN=0"
d_message "Now working on word $w" 3
for ((c=0; c<${#MSG}; c++))
do
  ## fill a word until you get to a space or termination of escape sequence, then if it will fit, add the word
  #    to the current line, if not then if it's not just longer than a whole line, add it to the next, else split
  #    it to finish this and add the rest to the next
  char=${MSG:$c:1}
  d_message "  examining char $c, [${char}]" 3
  case "${char}" in
    '\' ) # escaped char(s) coming (this has no "length" so just keep adding to current word at no "length cost")
      ESFLAG=$TRUE
      d_message "Started escape sequence with special character [${char}]" 3
      ;;
    [tnrm] ) # these char's can terminate an escape sequence if ESFLAG is TRUE, if so they also terminate a word
      # or they can count as length if not part of an esc seq
      if [[ $ESFLAG ]]
      then
        EOW=$TRUE
        ESFLAG=$FALSE
        d_message "Terminated escape sequence and word with special character [${char}]" 3
      else
        let "WLEN+=1"
        d_message "Added (tnrm) character [${char}] to WORD[$w]" 3
      fi
      ;;
    " " )  # a space terminates a word
      EOW=$TRUE
      let  "WLEN+=1"
      d_message "Added space character [${char}] to WORD[$w]" 3
      ;;
    * ) # all other characters, handle depending on status of ESFLAG
      # count the char only if not part of an esc sequence
      if [[ ! $ESFLAG ]]; then let "WLEN+=1"; d_message "Added (non-special) char [${char}] to WORD[$w]" 3 ;
      else d_message "Added (non-special) char [${char}] to escape sequence WORD[$w]" 3 ; fi
      ;;
  esac
  WORD[w]+="${char}"  # add char to the current word
  d_message_n "${BYon}>>>${Boff}  " 3 ; [[ $verbosity -ge 3 ]] && d_echo "WORD[$w]=[${WORD[w]}]" 3
  d_message "ESFLAG=[$(status_color $ESFLAG)$(TrueFalse $ESFLAG)${Boff}]" 3
  d_message "EOW=[$(status_color $EOW)$(TrueFalse $EOW)${Boff}]" 3
  d_message "EOL=[$(status_color $EOL)$(TrueFalse $EOL)${Boff}]" 3

  # if we got to the end of the word, dispose of it and start a new one
  if
 [[ $EOW ]]
  then
    if [[ $((${LENGTH} + ${WLEN})) -lt ${WIDTH} ]]
    then   # its added length will fit, so just add the word to the current line, and count the new length
      LINE[i]+="${WORD[w]}"
      let "LENGTH+=${WLEN}"
      d_message "Disposed of word by adding to current line" 3
    elif [[ ${WLEN} -gt ${WIDTH} ]]
    then   # it is bigger than a whole line, so break it to put what will fit on the current line and put the rest on the next line
      breakpoint=$((${WIDTH} - ${LENGTH}))
      LINE[i]+="${WORD[w]:0:${breakpoint}}"
      LEFTOVER="${WORD[w]:${breakpoint}}"
      let "LENGTH+=${breakpoint}"
      EOL=$TRUE
      d_message "Disposed of word by breaking it at [${breakpoint}] to finish LINE[$i]; LEFTOVER=[${LEFTOVER}]" 3
    else   # close out this line, and add this word to the *next* line
      EOL=$TRUE
      LEFTOVER="${WORD[w]}"
      d_message "Disposed of word WORD[$w], which was too big to fit on LINE[$i] but fits the next, by deferring it; LEFTOVER=[${LEFTOVER}]" 3
    fi
    d_message_n "${BYon}Final word: ${Boff}" 3 ; d_echo "WORD[$w]=[${WORD[w]}], WLEN=[${WLEN}]" 3
    d_message_n "${BYon}Current line: ${Boff}" 2 ; d_echo "LINE[$i]=[${LINE[i]}], LENGTH=[${LENGTH}]" 2
    let "w+=1"; d_echo 3 ; d_message "Now working on word $w" 3
    WORD[w]=""; let "WLEN=0"; EOW=$FALSE  ## (re)initialize
  fi
  # if we filled the line, start a new one
  if [[ $EOL ]]
  then
    d_message_n "${BMon}Final line: ${Boff}" 2 ; d_echo "LINE[$i]=[${LINE[i]}], LENGTH=[${LENGTH}]" 2
    let "i+=1"; d_echo 2; d_message "Now working on line $i" 2
    LINE[i]="${LEFTOVER}"; let "LENGTH=${#LEFTOVER}"; LEFTOVER=""; EOL=$FALSE  ## (re)initialize
    d_message_n "Starting with LINE[$i]=" 2 ; d_echo "[${LINE[i]}], LENGTH=[${LENGTH}]" 2
  fi
done

# now dump the array --> do something like this in calling function (see summarize_my_extension, below)
#d_echo "dumping array ..." 1
#for ((i=1; i<${#LINE[@]}; i++))
#do
#  SCP; echo -en ${LINE[i]}; RCP; CUD 1
#done

}

validate_status_file() # validate or create command sequence status file $1
{
    [ $# -ne 1 ] && E_message "Error: must specify status_file" && return 1
    cmdseq_statusfile=$1
    d_message "cmdseq_statusfile: [ ${cmdseq_statusfile} ]" 3
    status_dir=$(dirname ${cmdseq_statusfile})
    d_message "status_dir: [ ${status_dir} ]" 3
    message_n "validating status_dir [${status_dir}] ..."
    if [ ! -d ${status_dir} ] ; then
        echo -en " (creating) ..."
        mkdir -p ${status_dir} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    message_n "validating cmdseq_statusfile [${cmdseq_statusfile}] ..."
    if [ ! -f ${cmdseq_statusfile} ] ; then
        echo -en " (creating) ..."
#        touch ${cmdseq_statusfile} && right_status $? || ( right_status $? && return 1 )
        echo "0" > ${cmdseq_statusfile} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    # final validation
    message_n "re-verifying cmdseq_statusfile [${cmdseq_statusfile}] ..."
    [ -f ${cmdseq_statusfile} ] && result=$TRUE || result=1
    right_status $result
    return $result
}

linear_search()        # find $2 in array $1, return index
{
    # pass arguments like this usage: # linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}"
    needle="$1" ; shift ; haystack=("$@") ;
#    echo "needle: ${needle}" ; echo "haystack length: ${#haystack[@]}"
    for ((i=0; i<${#haystack[@]}; i++ )) ; do
        [[ "${haystack[$i]}" == "${needle}" ]] && echo $i && return $i
    done
}

bs()                   # recursive binary search for $1 target(s) from $2 start(d) to $3 end(d) in search_list $@ (after 3 shifts)
{
  # return the index number of the entry in the list, or -1 if not found
  # expects VERBOSE, verbosity, and initial depth=0 to be set externally before first call to bs
  target="$1"; shift;  start="$1"; shift;  end="$1"; shift; remainder="$@"
  search_list=($(alpha_words ${remainder}))   # alphabetize the list so the binary search can work
  if [ $verbosity -ge 4 ] ; then
    message_n "search_list: ["
    echo -n "${search_list[@]}"
    echo "]"
    message "search_list length is [${#search_list[@]}]"
  fi
  let "result=-1"
  if [[ $depth -gt ${#search_list[@]} ]]
  then
    E_message "Something is wrong here -- depth [$depth] exceeds search_list [${#search_list[@]}]"
    return 1  # can't go deeper than the length of the list
  fi
  diff=$(( $end - $start ))
  middle=$(( $start + $(( $diff / 2 )) ))
  ## guarantee to look at both start and end before giving up
  if [[ ${diff} -eq 1 ]]; then let "middle+=$(( ${depth} % 2 ))"; else DIFF1UPPER=$FALSE; DIFF1LOWER=$FALSE; fi
  d_message " depth=[$depth]" 4;  d_message " start=[$start]" 4;  d_message "   end=[$end]" 4;  d_message "middle=[$middle]" 4
  d_message ">> [${search_list[${middle}]}] <<" 4
  if [[ "${search_list[${middle}]}" == "${target}" ]]
  then
    result=$middle   # equal
  else  # not yet equal, so search either the upper or lower half of the remaining range
    [[ $start -eq $end ]] && return 1
    let "depth+=1"   # increment recursive depth and then recurse
    if [[ "${search_list[${middle}]}" > "${target}" ]]
    then   # found element is greater than target (search lower half next)
      [[ $diff -eq 1 ]] && DIFF1UPPER=$TRUE
      # if we've examined both the even and odd cases of diff=1, and not found it, then return not found
      if [[ $DIFF1UPPER && $DIFF1LOWER ]]; then d_message "both diff=1 cases examined. not found" 3; return 1; else d_message "DIFF1 flags not yet both true" 3; fi
      d_message "candidate [${search_list[${middle}]}] at position [${middle}] is GREATER than target [${target}], DIFF1UPPER is now [$(TrueFalse $DIFF1UPPER)] -- search lower half next" 4
      bs $target $start $middle ${search_list[@]}
    else   # found element is less than target (search upper half next)
      [[ $diff -eq 1 ]] && DIFF1LOWER=$TRUE
      # if we've examined both the even and odd cases of diff=1, and not found it, then return not found
      if [[ $DIFF1UPPER && $DIFF1LOWER ]]; then d_message "both diff=1 cases examined. not found" 3; return 1; else d_message "DIFF1 flags not yet both true" 3; fi
      d_message "candidate [${search_list[${middle}]}] at position [${middle}] is LESS than target [${target}], DIFF1LOWER is now [$(TrueFalse $DIFF1LOWER)] -- search upper half next" 4
      bs $target $middle $end ${search_list[@]}
    fi
  fi
  d_message "about to return from depth [$depth]" 5
  [ $depth -eq 0 ] && d_message "result: [$result]" 5
  let "depth-=1";  return 0
}

usage()                # explain default usage; mod with local "usage module"
{
  N=$(( ${#command_sequence[@]} -1 ))
  separator "${PN}-${BUILD}" "(usage)"
  E_message "${BRon}Usage: ${BGon}${PN} [-[options]] ${Boff}"
  message "${BYon}valid commandline options --${Boff}"
  message "  -i | --interactive......: run supervised; confirm execution of each step"
  message "  -n | --noninteractive...: run un-supervised; automatically do each step"
  message "  -s | --status....: return status (next step, step_number)"
  message "  -r | --resume....: resume at next step in statusfile"
  message "  -v | --verbose...: increase verbosity"
  message "  -q | --quiet.....: decrease verbosity"
  message "  -[0-${N}]..........: save N to status file and resume at step N"
  message "  ${BYon}*${Boff} Single-character options may be combined."
  message "    e.g. ${BGon}${PN} --verbose -nqr8${Boff} would resume non-interactively"
  message "    (automatic, unsupervised) at step 8 with normal verbosity"
  message "${BMon}Caveat:${Boff}"
  message "   -i (interactive/supervised) is on by default"
  message "   -r (resume) sets starting_step to # in [ $cmdseq_statusfile ]"
  message "   -[0-${N}] sets starting_step (default 0 otherwise)"
  # source user-script specific usage-module which should be built in the same format
  message "${BMon}additional ${BPN} - commandline options:${Boff}"
  [ -f /etc/${BPN}/local.usage ] && source /etc/${BPN}/local.usage
  echo
  message "${BYon}${PN} workflow sequence (steps):${Boff}"
  for ((s=0; s<${#msg1_sequence[@]}; s++))
  do
    echo -e "    ${LBon}${s}: ${msg1_sequence[$s]}${Boff}"
  done
  E_message "exiting process [$$]" && exit 1
}

display_configuration() # use get_longest and display_vars to display ${varlist}
{
    # will pick up PN, BUILD, varlist from the environment of whatever script
    # sources script_header_joetoo_extended
    separator "${PN}-${BUILD}" "(configuration)"
    longest=$(get_longest ${varlist})
    display_vars ${longest} ${varlist}
    return 0
}

run_sequence()         # run start to stop steps in ${command_sequeyce[@]} and output status to $1
{
    # run the sequence of commands stored in the command_sequence array
    # for each step, store updated status in a status file provided as arg $1
    [ $# -ne 1 ] && E_message "run_sequence requires exactly one argument (cmdseq_statusfile) " && E_message "exiting process [$$]" && exit 1
    cmdseq_statusfile=$1 ; echo ; separator "${PN}-${BUILD}" "(running command sequence)" ; echo
    d_message "starting_step: [ ${starting_step} ]" 3
    d_message "stopping_step: [ ${stopping_step} ]" 3
    for ((step=${starting_step}; step<=${stopping_step}; step++))
    do
        separator "${PN}-${BUILD}" "(${step}: ${command_sequence[${step}]})"
        d_message "Writing step [ $step ] to cmdseq_statusfile ( $cmdseq_statusfile )" 2
        echo $step > ${cmdseq_statusfile}
        if [[ ${INTERACTIVE} ]] ; then
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will prompt to ${step}: (${msg1_sequence[${step}]})"
            d_message "${msg}" 2
            response=""
            # confirm user is ready/wants to run the next command
            new_prompt "${BMon}Are you ready to ${BGon}${msg1_sequence[${step}]}${BMon}?${Boff}"
        else  # automatically execute other steps for non-interactive
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will automatically ${step}: (${msg1_sequence[${step}]})"
            d_message "${msg}" 2
            message "${BMon}Beginning ${BGon}${command_sequence[${step}]}${BMon} as instructed ...${Boff}"
            response="y"
       fi  ## interactive
       case $response in
           [Yy] )  # execute this command and continue
               d_message "${LBon}About to run ${BYon}${command_sequence[${step}]}${LBon} ...${Boff}" 1 ; \
               eval ${command_sequence[${step}]} ; result=$?
               if [ $result -eq 0 ] ; then
                   d_message "${BYon}Note:${Boff} ${command_sequence[${step}]} ${BGon}completed successfully${Boff}" 1
               else
                   die "Failed to ${msg1_sequence[${step}]} [${command_sequence[${step}]}]"
               fi
               ;;
           [Ss] )
               d_message "${BYon}As requested, skipping ${Boff} ${msg1_sequence[${step}]} ${BGon}${command_sequence[${step}]}${Boff}" 1
               ;;
           *    )  # abort due to negative response
               d_message "${BRon}As instructed, not running ${BGon}${command_sequence[${step}]}${BRon}. Quitting...${Boff}" 1 ; \
               E_message "exiting process [$$]" && exit ;;
        esac
    done
    echo
}

process_cmdline()      # process command line arguments
{
  arglist="$@"

  last=""
  d_message "processing command line with [ ${arglist} ]" 2
  d_message "my PID: $$" 5
  # shift each argument into position $1 and examine it
  #   process the argument or processit with its own arguments
  while [ ! -z "$1" ]
  do
    d_message "arg1 = [ $1 ]" 3
    # if arg begins with a single dash, process it alone
    if [ "${1:0:1}" == "-" ] && [ "${1:1:1}" != "-" ] ; then
      d_message "processing [ $1 ] alone as single-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is -t or -b
      [[ "${1}" =~ ^(-t|-b|-o)$ ]] && shift  # extra shift to clear target, board, or outputdevice
      shift
    # if arg begins with a double dash, process it alone
    elif [ "${1:0:2}" == "--" ] ; then
      d_message "processing [ $1 ] alone as double-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is --target
      [[ "$1" == "--target" ]] && shift  # extra shift to clear target
      shift
    else
      d_message "does not start with - or --" 3
      usage; E_message "exiting process [$$]" && exit
    fi
  done
  d_message "done with process_command_line" 2
  return 0
}

process_argument()     # process one argument (considering the next a potential operand)
{
  d_message "about to process [ $* ]" 2
  d_message "1: [ $1 ], 2: [ $2 ]" 2
  d_message "my PID: $$" 5
  # process command line argument (must be one of the following)
  [ ! -z "$1" ] && case "$1" in
    "-"[sS] | "--status"         )
      # display status
      d_message "${BYon}reading status file: [ ${BWon}${cmdseq_statusfile}${BYon}  ]${Boff}" 2
      read starting_step < ${cmdseq_statusfile};
      if [ $starting_step -eq 0 ] ; then
          msg="${BWon}Status: $starting_step ;"
      else
          msg="${BWon}Status: Step $(($starting_step - 1)) complete ;"
      fi
      msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]${Boff}"
      message "${msg}"
      E_message "exiting process [$$]" && exit;
      ;;
    "-"[rR] | "--resume"         )
      # resume at stored step unless that is overridden by a new start # (below)
      d_message "${BYon}reading status file: [ ${BWon}${cmdseq_statusfile}${BYon}  ]${Boff}" 2
      export RESUME=${TRUE}
      read starting_step < ${cmdseq_statusfile};
      msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
      d_message "${msg}" 2
      ;;
    -*[0-9]*  )
        # currently there are double-digit steps; if the next char is also numeric, append it
        myarg=${1:1} # drop the leading "-"
        export RESUME=${TRUE}
        if $(isnumber ${myarg}) && [ ${myarg} -ge 0 ] && \
          [ ${myarg} -lt ${#command_sequence[@]} ] ; then
            export starting_step=${myarg};
            msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
            msg+=" to status file [${Boff}${cmdseq_statusfile}${BYon}]${Boff}"
            d_message "${msg}" 2
            echo ${starting_step} > ${cmdseq_statusfile};
            msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
            msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
            d_message "${msg}" 2
        else
            # it may be a combination of numbers and letters - hand off to process_compound_arg
            process_compound_arg $1
        fi
        ;;
    "-"[iI] | "--interactive"    )
      # interactive
      export INTERACTIVE=${TRUE};
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[nN] | "--noninteractive" )
      # non-interactive
      export INTERACTIVE=${FALSE}
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[qQ] | "--quiet"          )
      # decrease verbosity
      [[ ${verbosity} -gt 0 ]] && let verbosity--
      [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
      d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
      ;;
    "-"[vV] | "--verbose"        )
      # increase verbosity
      [[ ${verbosity} -lt 6 ]] && let verbosity++
      export VERBOSE=${TRUE}
      d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
      ;;       # note: "numeric" args like -4 should fall through to this default
    *                            )
      # run local arg module if it exists (must end with "* ) process_compound_arg $1 ;;")
      if [ -f /etc/${BPN}/local.cmdline_arguments ] ; then
          source /etc/${BPN}/local.cmdline_arguments
      else
          process_compound_arg $1
      fi
      ;;
  esac
  d_message "done with process_argument" 3
  return 0
}

process_compound_arg()    # process a compount argument
{
    d_message "about to process compound [ $* ]" 2
    d_message "my PID: $$" 5
    # must begin with a single dash
    [ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && usage && E_message "exiting process [$$]" && exit 1
    # must not begin with two dashes (would have been picked in process_argument)
    [ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && usage && E_message "exiting process [$$]" && exit 1
    # strip leading dash(es)
    myargs=${1##-}
    # handle remaining characters in sequence
    while [ -n "${myargs}" ]
    do
        #handle one character at at time, from the left
        case ${myargs:0:1} in
            [sS] )
                # display status
                d_message "${BYon}reading status file: [ ${BWon}${cmdseq_statusfile}${BYon}  ]${Boff}" 2
                read starting_step < ${cmdseq_statusfile};
                if [ $starting_step -eq 0 ] ; then
                    msg="${BWon}Status: $starting_step ;"
                else
                    msg="${BWon}Status: Step $(($starting_step - 1)) complete ;"
                fi
                msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
                msg+=" [ ${BGon}${command_sequence[${starting_step}]} ${BWon}]${Boff}"
                d_message "${msg}" 2
                E_message "exiting process [$$]" && exit;
                ;;
            [rR] )
                # resume at stored step unless that is overridden by a new start # (below)
                d_message "${BYon}reading status file: [ ${BWon}${cmdseq_statusfile}${BYon}  ]${Boff}" 2
                export RESUME=${TRUE}
                read starting_step < ${cmdseq_statusfile};
                msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
                msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                d_message "${msg}" 2
                ;;
            [0-9] )
                # since there may be double-digit steps, then if the next char is also numeric, append it and "shift"
                export RESUME=${TRUE}
                starting_step="${myargs:0:1}";
                if [[ "${myargs:1:1}" == [0-9] ]] ; then
                    export starting_step="${myargs:0:2}";
                    myargs=${myargs:1}
                fi
                if [ $starting_step -gt ${#command_sequence[@]} ] ; then
                    E_message "invalid starting_step [${starting_step}]"
                    usage
                else
                    msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
                    msg+=" to status file [${Boff}${cmdseq_statusfile}${BYon}]${Boff}"
                    d_message "${msg}" 2
                    echo ${starting_step} > ${cmdseq_statusfile};
                    msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
                    msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                    d_message "${msg}" 2
                fi
                ;;
            [iI] )
                # interactive
                export INTERACTIVE=${TRUE};
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [nN] )
                # non-interactive
                export INTERACTIVE=${FALSE}
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [qQ] )
                # decrease verbosity
                [[ ${verbosity} -gt 0 ]] && let verbosity--
                [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
                d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
                ;;
            [vV] )
                # increase verbosity
                [[ ${verbosity} -lt 6 ]] && let verbosity++
                export VERBOSE=${TRUE}
                d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
                ;;       # note: "numeric" args like -4 should fall through to this default
            *   )
                # run local arg module if it exists (must end with "* ) E_message "${E_BAD_ARGS}" && usage ;;")
                if [ -f /etc/${BPN}/local.cmdline_compound_arguments ] ;then
                    source /etc/${BPN}/local.cmdline_compound_arguments
                else
                    E_message "${E_BAD_ARGS}"
                    usage
                fi
                ;;
        esac
        #strip first char from myargs (i.e. "shift" one character)
        myargs=${myargs:1}
    done
    d_message "done with process_compount_arg" 3
    return 0
}

confirm_continue_or_exit() # present prompt/warning and confirm user wants to continue
{
    answer=""
    msg="${BYon}Do you want to continue?"
    prompt "${msg}"
    case ${answer:0:1} in
        [yY] ) message "Affirmative response from user; continuing" ;;
        [nN] ) E_message "Negative response from user; quitting"; E_message "exiting process [$$]" && exit 1 ;;
        * ) E_message "invalid response to confirm_continue_or_exit"; E_message "exiting process [$$]" && exit 1 ;;
    esac
    return 0
}

#-----[ script ]------------------------
#LINE=("")  ## array of lines the message will be converted to
#modular_message $@
#separator "Here's my output"
#for ((i=0; i<${#LINE[@]}; i++))
#do
#  echo -e ${LINE[i]}
#done

summarize_my_extension()  # generate this helpful display
{
  # generate text to display in an example message box
  LINE=("")
  title="$(color ${WHITE} ${BBACK} ${BOLD})script_header_joetoo_extended$(color ${WHITE} ${BBACK} 0)"
  MSG="$(color ${YELLOW} ${BBACK} ${BOLD})After sourcing $(color ${LBLUE} ${BBACK} ${BOLD})script_header_joetoo, "
  MSG+="$(color ${GREEN} ${BBACK} ${BOLD})this script $(color ${WHITE} ${BBACK} ${BOLD})may be sourced, in order to "
  MSG+="extend the former's definition of $(color ${MAG} ${BBACK} ${BOLD})useful functions$(color ${WHITE} ${BBACK} ${BOLD}) "
  MSG+="to be subsequently available for use in various scripts, as described below.${Boff}"

  # set width (W); height of box (H); rows in box (R); center-offset for box or left wall position (C)
  #  W=70; H=8; R=$(( $(termheight)/3 - $H/2  ));  C=$(( $(termwidth)/2 - $W/2 ))
  W=$(( $(termwidth) - 12 )); H=6; R=4;  C=$(( $(termwidth)/2 - $W/2 ))

  # turn off verbosity unless testing modular_msg function
  old_verbosity=$verbosity;  verbosity=0
  d_message "MSG = [${MSG}]" 2
  d_message "calling modular_msg with W=[${W}] ..." 2
  # call modular_message to populate an array ${LINE[@]} of with MSG, using margins for width W
  modular_msg $W
  verbosity=$old_verbosity

  # now clear screen (will then start at row, col 1, 1); then draw a box to contain the message
  CLR; myBOX $R $C $W $H ${YELLOW} ${BBACK} ${BOLD}

  # print a title inside the left wall, on the first line in the box
  CUP $(termheight) 1                 # go to bottom left
  CUP $(($R+1)) $(($C+4))             # go to 4th col inside the left wall on the first row of the box (*)
  SCP; echo -en ${title}; RCP; CUD 3  # save cursor pos (*); print title; return to cursor pos (*); then down 3

  # now output the array of lines assigned by modular_msg
  for ((i=1; i<${#LINE[@]}; i++))
  do
    # save cursor at start (* - inside L wall, this row); print line; return (*); move down 1
    SCP; echo -en ${LINE[i]}; RCP; CUD 1
  done
  # silently get current row and column
  COORDS= ; CPR s; ROW=${COORDS[0]}
  # Print general instructions
  echo; echo; echo; echo; echo; echo
  CUP $((${ROW}+6)) 24; echo -e "${BWon}script_header_joetoo_extended${Boff}"
  CUP $((${ROW}+8)) 9; echo -e "${BYon}After sourcing ${BGon}script_header_joetoo${Boff}, ${BWon}this script ${Boff} may be "
  CUP $((${ROW}+9)) 9; echo -e "sourced, in order to extend the former's definition of ${BMon}useful${Boff}"
  CUP $((${ROW}+10)) 9; echo -e "${BMon}functions${Boff} to be subsequently available for use in various"
  CUP $((${ROW}+11)) 9; echo -e "scripts, as described below.${Boff}\n"
  CUP $((${ROW}+12)) 9; echo -e "${BYon}Note: whereas ${BGon}script_header_joetoo${BYon} can run in a minimal (ash) shell"
  CUP $((${ROW}+13)) 9; echo -e "context, ${BGon}script_header_joetoo_extended${BYon} expects a bash shell context${Boff}\n"
  echo
  # print summary of included functions (indent left)
  grep "()" ${script_header_installed_dir%/}/script_header_joetoo_extended | grep -v "grep" | sed 's|^|  |'
  echo
}
