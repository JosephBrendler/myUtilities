#!/bin/bash
# xdotool_sizemove_this_window   joe brendler  8 Sep 2018
#
source /usr/sbin/script_header_joetoo

#------[ set defaults ]---------------------------------------------
width="46%"
height="85%"
X1="1%"
Y1="5%"
X2="51%"
LR="L"

user=joe

current_window=""
VERBOSE=$TRUE
#VERBOSE=$FALSE
verbosity=1

#------[ over-ride defaults ]----------------------------------------
# load custom configuration, if it exists
[[ -f ./xdotool_open_windows.conf ]] && source ./xdotool_open_windows.conf
[[ -f /etc/xdotool_open_windows.conf ]] && source /etc/xdotool_open_windows.conf

#------[ function blocks ]-------------------------------------------
usage() {
E_message "Usage: mw L|l|R|r [<width>] [<height>]"
exit
}

find_current_window() {
  message_n "finding current active window ... "
  current_window=$(xdotool getactivewindow)
  echo ${current_window}
}

old_find_current_window() {
  window_list=($(xdotool search --any lxterminal 2>/dev/null))
  window_list+=($(xdotool search --any UXTerm 2>/dev/null))
  message_n "Finding current terminal window among: " && echo ${window_list[@]}
  for win in ${window_list[@]}
  do
    desktop=$(xdotool get_desktop_for_window $win 2>/dev/null)
    message_n "Examining window [ $win ] on desktop [ $desktop ] ... "
    if [[ $desktop -eq -1 ]]
    then
      message "Found current terminal window [ $win ] on desktop [ $desktop ]"
      current_window=$win
      return 0
    fi
    message "If you are reading this, I didn't find the current terminal window :-( "
  done
}

process_cmdline() {
  # cmdline args, if present are, in order
  # $1 [which terminal on desktop [L|r]
  # $2 [width]
  # $3 [height]
  d_message "processing command line [$@]"
  idx=0
  while [ $# -gt 0 ]
  do
    let "idx+=1"
    d_message "processing arg $idx [$1]" 1
    case $idx in
      1) LR="$1";;
      2) width="$1";;
      3) height="$1";;
      *) E_message "Error in command line argument $idx [$1]"; usage;;
    esac
    shift
  done
}

show_config() {
  message "${BWon}width..........: ${LBon}$width${Boff}"
  message "${BWon}height.........: ${LBon}$height${Boff}"
  message "${BWon}X1.............: ${LBon}$X1${Boff}"
  message "${BWon}Y1.............: ${LBon}$Y1${Boff}"
  message "${BWon}X2.............: ${LBon}$X2${Boff}"
  message "${BWon}LR.............: ${LBon}$LR${Boff}"
  message "${BWon}current_window.: ${LBon}${current_window}${Boff}"
  message "${BWon}VERBOSE........: $(status_color ${VERBOSE})$(TrueFalse ${VERBOSE})${Boff}"
  message "${BWon}verbosity......: ${LBon}${verbosity}${Boff}"

}

#------[ main script ]-----------------------------------------------
separator "xdotool_sizemove_this_window"
#checkroot
checknotroot
d_message "cmdline: $@" 1
d_message "\$#: [$#]"
find_current_window
[ $# -gt 0 ] && process_cmdline $@
[ $VERBOSE ] && show_config

case $LR in
  [Ll]) X="${X1}";;
  [Rr]) X="${X2}";;
  *   ) E_message "Error in variable LR [$LR]"; exit;;
esac
message "moving window [${current_window}] to position [$X $Y1] ..."
xdotool windowmove ${current_window} $X $Y1
message "resizing window [${current_window}] to size [$width $height] ..."
xdotool windowsize ${current_window} $width $height
