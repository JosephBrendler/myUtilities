#!/bin/bash
# xdotool_sizemove_this_window   joe brendler  8 Sep 2018
#

### to-do:
### (1) enable higher number up to four (quaarter-tiled) windows per desktop
###     (keep the convention of same number on the line of assignment)
### (2) use tigervnc/remina to open vnc/ssh if line has v_<name> (ssh if s_<name>)
###   + example open cmd: vncviewer -Fullcolor -QualityLevel 9 -via joe@${ssh_target} localhost:2

source /usr/sbin/script_header_joetoo

PN=$(basename $0)

#=====[ user variable defaults (override in config_file) ]==============================

#-----[ User ]--------------------------------------------------------------------------
user=joe

#-----[ Geometry ]----------------------------------------------------------------------
# window size and locationfor two terminal windows "L" and "R"
# positioned horizontally at X1, X2 respectively, both vertically at Y1
# (this default leaves 12% visible on the right, for widgets or whatever)
width="43%"      # terminal window width as a percent of screen width
height="85%"     # terminal window height as a percent of screen height
X1="1%"          # left horizontal edge position of left window as a percent of screen width
Y1="5%"          # vertical position of both terminals as a percent of screen height
X2="45%"         # left horizontal edge position of right window as a percent of screen width

LR="L"           # which window L|R to resize/move

#-----[ Filesystem ]--------------------------------------------------------------------
config_dir="/etc/xdotool_open_windows"
config_file="${config_dir%/}/xdotool_open_windows.conf"
build_file=$"${config_dir%/}/BUILD"
#log_dir="/home/${user}"
#old_log_dir="/home/${user}"
log_dir="/var/log"
old_log_dir="/var/log/old_logs"
logFile="${log_dir%/}/xdotool_open_windows.log"

#-----[ Terminal Program ]--------------------------------------------------------------
terminal_program="/usr/bin/konsole"       # default
#terminal_program="/usr/bin/lxterminal"
#terminal_program="/usr/bin/xterm"

#-----[ Timing ]------------------------------------------------------------------------
# customized timing and detailed output (override in config_file)(increase for debugging)
sleepWait=0.5    # help avoid race conditions
longWait=2       # help avoid race conditions
timeout=10       # seconds to wait while trying to close a window or identify a new one

#-----[ Debug Verbosity ]---------------------------------------------------------------
#VERBOSE=$FALSE
VERBOSE=$TRUE
# set verbosity only if not already set (allow calling program to do so)
[ -z $verbosity ] && verbosity=1

current_window=""

varlist="width height X1 Y1 X2 LR X current_window BREAK bool.VERBOSE verbosity"

#------[ over-ride defaults ]----------------------------------------
# load custom configuration, if it exists
message_n "sourcing config_file: ${config_file} ..."
[[ -f ${config_file} ]] || die "${config_file} does not exist"
source ${config_file} || die "failed to source ${config_file}"
right_status $?

message_n "sourcing build_file: ${build_file} ..."
[[ -f ${build_file} ]] || die "${build_file} does not exist"
source ${build_file} || die "failed to source ${build_file}"
right_status $?

#------[ function blocks ]-------------------------------------------
usage() {
separator "${PN}-${BUILD}" "(usage)"
E_message "${BWon}Usage: mw l|L|r|R [<width>%] [<height>%]${Boff}"
E_message "(assuming alias mw='xdotool_sizemove_this_window' has been assigned)"
E_message "${BYon}you ${BMon}must${BYon} specify l|r${Boff} (left or right) --"
E_message "  this terminal will be moved to that side of the screen."
E_message "  (i.e. to X, Y coordinates configured in config_file:"
E_message "   ${config_file})"
E_message "${BYon}you ${BMon}may${BYon} also specify the width and height${Boff} for the moved terminal screen"
E_message "  (width and/or height may be specified as pixels or as percent relative"
E_message "   to pixel size of the current screen)"
primary_monitor=$(xrandr | grep 'primary' | awk '{print $1}')
resolution=$(xrandr | grep '\*+' | awk '{print $1}')
E_message "${BWon}current resolution of primary monitory (${Bon}${primary_monitor}${BWon}): ${BGon}${resolution}${Boff}"
echo
exit 1
}

find_current_window() {
  message_n "finding current active window ... "
  current_window=$(xdotool getactivewindow)
  echo ${current_window}
}

process_cmdline() {
  # cmdline args, if present are, in order
  # $1 [which terminal on desktop [L|r]
  # $2 [width]
  # $3 [height]
  cmdline="$@"
  d_message "processing command line: ${cmdline}" 3
  idx=0
  while [ $# -gt 0 ]
  do
    let "idx+=1"
    d_message "processing arg $idx [$1]" 1
    case $idx in
      1) LR="$1";;
      2) width="$1";;
      3) height="$1";;
      *) E_message "Error in command line argument $idx [$1]"; usage;;
    esac
    shift
  done
  d_message "done processing command line" 3
}

show_config() {
    longest=$(get_longest ${varlist})
    display_vars ${longest} ${varlist}
}

#------[ main script ]-----------------------------------------------
separator "${PN}-${BUILD}" "$(hostname)"
#checkroot
checknotroot && message "checknotroot: ${BGon}OK${Boff}" || die "failed checknotroot"
cmdline="$@"
d_message "cmdline: ${cmdline}" 3
d_message "\$#: [$#]" 3
find_current_window
[ $# -gt 0 ] && process_cmdline ${cmdline}

case $LR in
  [lL]) X="${X1}";;
  [rR]) X="${X2}";;
  *   ) E_message "Error in variable LR [$LR]"; usage;;
esac

[ $VERBOSE ] && show_config

message "moving window [${current_window}] to position [$X $Y1] ..."
xdotool windowmove ${current_window} $X $Y1
message "resizing window [${current_window}] to size [$width $height] ..."
xdotool windowsize ${current_window} $width $height
