# DO NOT EDIT THIS FILE
#
# Please edit /boot/joetooEnv.txt to set supported parameters

setenv load_addr "0x9000000"
setenv overlay_error "false"
# default values
setenv rootdev "/dev/mmcblk0p1"
setenv verbosity "1"
setenv console "both"
setenv bootlogo "false"
setenv rootfstype "ext4"
#setenv docker_optimizations "on"     ### armbian uses this, but I don't want it
setenv earlycon "off"

test -n "${distro_bootpart}" || distro_bootpart=1

echo "Loaded and running boot.scr!"
echo "Boot script loaded from ${devtype} ${devnum}:${distro_bootpart}"

# defaults
if test -z "$bootargs"; then
    setenv bootargs root=${rootdev} rootdelay=5
fi

# print some debugging info
echo "-----[ Initial State ]-----------------------------------"
#echo "userEnv..........: "${userEnv}
echo "load_addr........: "${load_addr}
echo "filesize.........: "${filesize}
echo "rootdev..........: "${rootdev}
echo "devtype..........: "${devtype}
echo "devnum...........: "${devnum}
echo "prefix...........: "${prefix}
echo "distro_bootpart..: "${distro_bootpart}
echo "verbosity........: "${verbosity}
echo "console..........: "${console}
echo "consoleargs......: "${consoleargs}
echo "consolebaud......: "${consolebaud}
echo "logo.............: "${logo}
echo "bootlogo.........: "${bootlogo}
echo "rootfstype.......: "${rootfstype}
echo "arch.............: "${arch}
echo "earlycon.........: "${earlycon}
echo "overlays.........: "${overlays}
echo "overlay_dir......: "${overlay_dir}
echo "overlay_prefix...: "${overlay_prefix}
echo "dtb_prefix.......: "${dtb_prefix}
echo "user_overlays....: "${user_overlays}
echo "fdtfile..........: "${fdtfile}
echo "fdt_addr_r.......: "${fdt_addr_r}
echo "imagefile........: "${imagefile}
echo "kernel_addr_r....: "${kernel_addr_r}
echo "initrdfile.......: "${initrdfile}
echo "ramdisk_addr_r...: "${ramdisk_addr_r}
echo "partuuid.........: "${partuuid}
echo "usbstoragequirks.: "${usbstoragequirks}
echo "extraargs........: "${extraargs}
echo "extraboardargs...: "${extraboardargs}
echo "bootargs.........: "${bootargs}
echo "--------------------------------------------------------"

# Override/overwrite defaults per user's environment selections
echo "Ok - I am about to try reading joetooEnv.txt..."
if test -e ${devtype} ${devnum} ${prefix}joetooEnv.txt; then
        load ${devtype} ${devnum} ${load_addr} ${prefix}joetooEnv.txt
        env import -t ${load_addr} ${filesize}
else
        echo "Did not find or load joetooEnv.txt"
fi

# Manage console settings
setenv consoleargs ""
if test "${logo}" = "disabled"; then setenv logo "logo.nologo"; fi
if test "${console}" = "display" || test "${console}" = "both"; then setenv consoleargs "console=tty1"; fi
#if test "${console}" = "serial" || test "${console}" = "both"; then setenv consoleargs "console=ttyS2,${consolebaud}n8 ${consoleargs}"; fi
if test "${console}" = "serial" || test "${console}" = "both"; then setenv consoleargs "${consoleargs} console=ttyS2,${consolebaud}n8"; fi
if test "${earlycon}" = "on"; then setenv consoleargs "earlycon ${consoleargs}"; fi
if test "${bootlogo}" = "true"; then
        setenv consoleargs "splash plymouth.ignore-serial-consoles ${consoleargs}"
else
        setenv consoleargs "splash=verbose ${consoleargs}"
fi

# get PARTUUID of first partition on SD/eMMC the boot script was loaded from
if test "${devtype}" = "mmc"; then part uuid mmc ${devnum}:1 partuuid; fi

# update bootargs
#setenv bootargs "root=${rootdev} rootwait rootfstype=${rootfstype} ${consoleargs} consoleblank=0 loglevel=${verbosity} ubootpart=${partuuid} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"
#setenv bootargs "root=${rootdev} rootwait rootfstype=${rootfstype} ${consoleargs} consoleblank=0 loglevel=${verbosity} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"
#setenv bootargs "root=${rootdev} rootdelay=5 rootwait rootfstype=${rootfstype} ${consoleargs} consoleblank=0 loglevel=${verbosity} ubootpart=${partuuid} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"
setenv bootargs "root=${rootdev} rootdelay=5 rootwait rootfstype=${rootfstype} ${consoleargs} consoleblank=0 loglevel=${verbosity} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"

echo "-----[ Potentially Updated State ]-----------------------"
#echo "userEnv..........: "${userEnv}
echo "load_addr........: "${load_addr}
echo "filesize.........: "${filesize}
echo "rootdev..........: "${rootdev}
echo "devtype..........: "${devtype}
echo "devnum...........: "${devnum}
echo "prefix...........: "${prefix}
echo "distro_bootpart..: "${distro_bootpart}
echo "verbosity........: "${verbosity}
echo "console..........: "${console}
echo "consoleargs......: "${consoleargs}
echo "consolebaud......: "${consolebaud}
echo "logo.............: "${logo}
echo "bootlogo.........: "${bootlogo}
echo "rootfstype.......: "${rootfstype}
echo "arch.............: "${arch}
echo "earlycon.........: "${earlycon}
echo "overlays.........: "${overlays}
echo "overlay_dir......: "${overlay_dir}
echo "overlay_prefix...: "${overlay_prefix}
echo "dtb_prefix.......: "${dtb_prefix}
echo "user_overlays....: "${user_overlays}
echo "fdtfile..........: "${fdtfile}
echo "fdt_addr_r.......: "${fdt_addr_r}
echo "imagefile........: "${imagefile}
echo "kernel_addr_r....: "${kernel_addr_r}
echo "initrdfile.......: "${initrdfile}
echo "ramdisk_addr_r...: "${ramdisk_addr_r}
echo "partuuid.........: "${partuuid}
echo "usbstoragequirks.: "${usbstoragequirks}
echo "extraargs........: "${extraargs}
echo "extraboardargs...: "${extraboardargs}
echo "bootargs.........: "${bootargs}
echo "-----[ now env print -a ]---------------------------------"
env print -a

# Load device tree file and kernel (to do: initramfs option)

# device tree - note that it finds the file in the "dtb" directory
echo "Loading device tree from ${devtype} ${devnum}:${distro_bootpart}..."
load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}dtb/${dtb_prefix}/${fdtfile}

if test ${initrdfile} = ""; then
        echo "Null initrd [${initrdfile}]; not loading one..."
        setenv ramdisk_addr_r "-"
        echo "ramdisk_addr_r...: "${ramdisk_addr_r}
else
        echo "Loading initrd from ${devtype} ${devnum}:${distro_bootpart}..."
        load ${devtype} ${devnum}:${distro_bootpart} ${ramdisk_addr_r} ${prefix}${initrdfile}
fi

echo "Loading kernel from ${devtype} ${devnum}:${distro_bootpart}..."
load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} ${prefix}${imagefile}

# Load overlays
fdt addr ${fdt_addr_r}
fdt resize 65536
for overlay_file in ${overlays}; do
        if load ${devtype} ${devnum} ${load_addr} ${prefix}dtb/${overlay_dir}/${overlay_prefix}-${overlay_file}.dtbo; then
                echo "Applying kernel provided DT overlay ${overlay_prefix}-${overlay_file}.dtbo"
                fdt apply ${load_addr} || setenv overlay_error "true"
        fi
done
for overlay_file in ${user_overlays}; do
        if load ${devtype} ${devnum} ${load_addr} ${prefix}overlay-user/${overlay_file}.dtbo; then
                echo "Applying user provided DT overlay ${overlay_file}.dtbo"
                fdt apply ${load_addr} || setenv overlay_error "true"
        fi
done
if test "${overlay_error}" = "true"; then
        echo "Error applying DT overlays, restoring original DT"
        load ${devtype} ${devnum} ${fdt_addr_r} ${prefix}dtb/${fdtfile}
else
        echo "No overlay_error. Now trying to load fixup scripts..."
        if test -e ${devtype} ${devnum} ${prefix}dtb/${overlay_dir}/${overlay_prefix}-fixup.scr; then
                load ${devtype} ${devnum} ${load_addr} ${prefix}dtb/${overlay_dir}/${overlay_prefix}-fixup.scr
                echo "Applying kernel provided DT fixup script (${overlay_prefix}-fixup.scr)"
                source ${load_addr}
        else
                echo "could not find to load fixup script ${prefix}dtb/${overlay_dir}/${overlay_prefix}-fixup.scr. Skipping..."
        fi
        if test -e ${devtype} ${devnum} ${prefix}fixup.scr; then
                load ${devtype} ${devnum} ${load_addr} ${prefix}fixup.scr
                echo "Applying user provided fixup script (fixup.scr)"
                source ${load_addr}
        else
                echo "could not find to load fixup script ${prefix}fixup.scr. Skipping..."
        fi
fi

# Boot!
echo "Booting with arguments: ${bootargs}"
echo
echo "imagefile: ${imagefile}"
echo


if test ${imagefile} = "Image"; then
        echo "booting uncompressed kernel image [${imagefile}] ..."
        booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r}
else
        if test ${imagefile} = "zImage"; then
                echo "booting compressed kernel image [${imagefile}] ..."
                bootz ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r}
        else
                echo "invalid kernel imagefile name specified [${imagefile}]. Unable to boot..."
        fi
fi


# Recompile instruction 
# 
# Cross-compiling:
# cd to u-boot directory holding boot.cmd and run
# (64bit) mkimage -C none -A arm64 -T script -d boot.cmd boot.scr
# (32bit) mkimage -C none -A arm -T script -d boot.cmd boot.scr
# then copy boot.scr, boot.cmd, and joetooEnv.txt to the /boot partition
# of your target system eMMC or microSD card
#
# If modifying and existing system (from said system)
# (64bit) mkimage -C none -A arm64 -T script -d /boot/boot.cmd /boot/boot.scr
# (32bit) mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr

