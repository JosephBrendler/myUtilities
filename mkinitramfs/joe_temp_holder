
id_passdevice() {
    # assign an answer to the global configuration variable init_passdevice
    #   and return true or false according to validity type/name device specification
    source /usr/src/initramfs/script_header_brendlefly
    my_candidate="$1";
    dev_t="$2";
    local int OK=1;   # def'n: 0 is logical true; any other int = false
    d_message "Debug: id_passdevice() \$1 = [ $1 ]; \$2 = [ $2 ]"; 3
    d_message "${BWon}Debug: id_passdevice() ${BMon}arg1 = [ $my_candidate ]; ${LBon}arg2 = [ $dev_type ]${Boff}"; 3
    case "${dev_t}" in
        "name")
            d_message "In case [name]; assigning" 3;
            init_passdevice="${my_candidate}"; OK=0;
            d_message "assigned: ${init_passdevice}" 2;
            [ $verbosity -gt 2 ] && sh_countdown 2;
            ;;
        "uuid")
            d_message "In case [uuid]; using findfs" 3;
            init_passdevice="$(findfs UUID=${my_candidate})"; OK=0;
            d_message "found: ${init_passdevice}" 2;
            [ $verbosity -gt 2 ] && sh_countdown 2;
            ;;
        "label")
            d_message "In case [label]; using findfs" 3;
            init_passdevice="$(findfs LABEL=${my_candidate})"; OK=0;
            d_message "found: ${init_passdevice}" 2;
            [ $verbosity -gt 2 ] && sh_countdown 2;
            ;;
        *)
            # invalid or error
            init_passdevice="InvalidDevice"; OK=1;
            ;;
    esac

    d_message "Debug: id_passdevice() just set init_passdevice = ${BMon}[ $init_passdevice ]${Boff}" 3;
    d_message "Debug: id_passdevice() is about to return OK = [ $OK ]" 3;
    [ $verbosity -gt 2 ] && sh_countdown 2;

    #return the result int 0 for true, int 1 for false
    return $OK;
}

