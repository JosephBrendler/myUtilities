#!/bin/bash
# these functions are used by several scripts (make_sources.sh, ckinitramfs, and the init script)
# they are consolidated here as of release 9.0.1
#

load_executables()
{
  # read the list of executables; and load into a bash array the full pathname on the host system
  executables=();  i=0
  for exe_name in ${init_executables}
  do
    candidate=$(echo $exe_name)
    if [[ ! "${candidate}" == "" && ! "${candidate:0:1}" == "#" ]]
    then
      target=$(which ${candidate})
      executables+=("${target}")
      d_message "$i: $candidate   which is ${target}   executables[$i] ${executables[$i]}" 3
      let i++
    fi
  done
}

list_executables()
{
  for ((i=0; i<${#executables[@]}; i++))
  do
    [ ! -z ${executables[$i]} ] && echo "${executables[$i]}"
  done
}

dump_executables()
{
  count=0
  for ((i=0; i<${#executables[@]}; i++))
  do
    [ ! -z ${executables[$i]} ] && message "$i: ${executables[$i]}" && let count++
  done
  message "dumped ${count} executables"
}

display_config() {
    # display the current value of a space-delimitted list of variables provided as input $@
     # provide appropriately formatting for values of variables of special type, including
    # known boolean variables and values with string-length too long for a single line
    # also offer user an option to inssert blank lines in the output by providing an
    # input variable name "<BREAK>"
    my_varlist=$@
    echo; separator "${init_config_title}" "initramfs=${BUILD}"
    longest=0

    for line in ${my_varlist}
    do
        key="$(echo $(echo $line) | cut -d'=' -f1)"
        [[ ${#key} -gt ${longest} ]] && longest=${#key}
    done

    d_echo "longest: ${longest}" 4
    for key in ${my_varlist}
    do
        eval "val=\$${key}"
        # always pad variable name with at least two dots before colon
        dotpad="$(repeat '.' $(( ${longest} - ${#key} + 2 )))"
        case $key in
            "VERBOSE"|"init_lock_down"|"VALID"|"EXISTS"|"HAS_KEY" )  # boolean
                message "${LBon}${key}${dotpad}:${Boff} $(status_color ${val})$(TrueFalse ${val})${Boff}"
                ;;
            "init_executables"|"init_passdevice_list"|"CMDLINE"|"PATH" )  # probably long string values
                message_n "${LBon}${key}${dotpad}:${Boff}"; echo_long_string ${val}
                ;;
            "BREAK" )  # blank line to funciotn as separator in output
                echo
                ;;
            * )
                message "${LBon}${key}${dotpad}:${Boff} ${val}"
                ;;
        esac
    done
    echo
}

echo_long_string() {
  #  spread a long string over several lines, if needed.  Assume external variable $longest has been set to identify start for 1st line
  input="$@"
  tw=$(termwidth)
  newline=""
  start=$longest
  for x in $input
  do
    if [[  $(( ${start} + ${#newline} + ${#x} + 1)) -le ${tw} ]] ; then
      newline="${newline} ${x}"
    else
      echo "${newline}"
      start=0   # since next will be a new line
      newline="${x}"
    fi
  done
  echo "${newline}"
}
