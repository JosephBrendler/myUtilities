#!/bin/ash

source /usr/local/sbin/script_header_brendlefly

#----[ initialize additional global variables ]--------------------------------------------------
separator "initializing" "initramfs-$BUILD"
my_variables="unlock_method CMDLINE \
  init_passdevice init_passdevice_fs root_volume root_fs usr_volume usr_fs \
  VERBOSE verbosity unlock_method\
"

for x in ${my_variables}
do
  	echo -n "initializing $x ..."
        cmd="$x=''"
        eval $cmd
        right_status $? || echo "$x initialization failed"
done
echo

separator "ash.temp" "testing script"
# this script assumes you are in the ash_testing/ directory so build relative
message_n "Sourcing ../GLOBALS ..."
source ../GLOBALS ; right_status $?
message_n "Sourcing ${SOURCES_DIR}/BUILD ..."
source ${SOURCES_DIR}/BUILD ; right_status $?
message_n "Sourcing ${SOURCES_DIR}/init.conf ..."
source ${SOURCES_DIR}/init.conf ; right_status $?
[ $verbosity -gt 0 ] && VERBOSE=$TRUE || VERBOSE=$FALSE
root_volume="${init_root_volume}"
usr_volume="${init_usr_volume}"
root_fs="${init_root_fs}"
usr_fs="${init_usr_fs}"
longest=0
# set defai;t verbosity - b/c we must have these assigned,
#  just in case neither in init.conf nor cmdline does it
VERBOSE=$TRUE; verbosity=4


var_list="DATE_STAMP SCRIPT_HEADER_DIR SOURCES_DIR MAKE_DIR"
for x in ${var_list}
do [ ${#x} -gt $longest ] && longest=${#x}; done

for x in ${var_list}
do
  key="${x}"
  eval "val=$(echo \$$x | cut -d'=' -f2)"
  dotpad="$(repeat "." $(($longest-${#key}+2)))"
  message "${LBon}${key}${dotpad}: ${Boff}${val}"
done
echo

# Note:  GLOBALS sets MAKE_DIR=$(pwd), so build relative
message_n "Sourcing ${MAKE_DIR}/../validated_functions_header ..."
source ${MAKE_DIR}/../validated_functions_header ; right_status $?
message_n "Sourcing ${MAKE_DIR}/../testing_functions_header ..."
source ${MAKE_DIR}/../testing_functions_header ; right_status $?
echo

### actual init script should call mini_udev() here, to mount proc, devtmpfs, devpts, sysfs, etc
### then it should wait for several seconds for normal trailing kernel output and device recognition

# test overriding init.conf with cmdline
#CMDLINE="root=/dev/mapper/vg_gmki91-root verbosity=2 usr=/dev/mapper/vg_gmki91-usr"
# test minimal unmodified cmdline
CMDLINE="root=/dev/mapper/vg_gmki91-root"

process_cmdline
echo
# validate root device
validate_volume "root_volume"
# validate usr device
validate_volume "usr_volume"

display_config
echo

separator "ash.temp" "selecting keying device and unlock method..."
select_keying_device_and_unlock_method
echo

# echo to console to confirm attempt to unlock HDs
separator "Unlocking encrypted Drive(s)" "initramfs-$BUILD"
# call function to unlock HD(s)
unlock_devices ${unlock_method}
echo

# access the root and usr logical volumes (among others), and show what we unlocked
access_logical_volumes

echo
message "cleaning up"
vgchange -an vg_tinker2s
cryptsetup luksClose edb2
echo
message "validating cleanup w vgs; mount | grep sda"
vgs
mount | grep sda

echo ; echo
# call a function in the sourced file
test

