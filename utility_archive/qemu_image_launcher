#!/bin/bash
# launch one of my raspberrypi images with qemu
# Joe Brendler 25 August 2013
#   rev 0.10 - 14 Feb 2014 - generalized to boot or mount any image selected 
#       from those found at a configured image directory
#   rev 0.11 - 15 Feb 2014 - generalized to draw config from multiple possible 
#       locations checked IAW an order of precedence

# --- Define local variables -----------------------------------
source /usr/local/sbin/script_header_brendlefly
BUILD="0.11 (20140215)"

# --- function blocks ------------------------------------------

set_config()
{
# Source the variable assignments made in update-sequence.conf
#   This will supercede/modify the default assignments made by this scrip
#   unless the presiding config leaves that variable null
#   Order of precedence in looking for config: PWD, /etc/, /usr/local/sbin/
[[ -f "/usr/local/sbin/qemu_image_launcher.conf" ]] && CONFIG="/usr/local/sbin/qemu_image_launcher.conf"
[[ -f "/etc/qemu_image_launcher.conf" ]] && CONFIG="/etc/qemu_image_launcher.conf"
[[ -f "./qemu_image_launcher.conf" ]] && CONFIG="./qemu_image_launcher.conf"
source ${CONFIG}

# User-defined variables - modify according to your system
# SCRIPT_DIR is the directory in which you have placed
#   this script and the show-elogs script
[ -z "$SCRIPT_DIR" ] && SCRIPT_DIR=${PWD}"/"    # must end with '/'
[ -z "$IMAGE_DIR" ] && IMAGE_DIR=${PWD}"/"    # must end with '/'
[ -z "$DEFAULT_CMD" ] && DEFAULT_CMD="boot"
[ -z "$KERNEL" ] && KERNEL="/home/joe/MyRaspberryFiles/raspi-kernel"
[ -z "$MAC_ADDR" ] && MAC_ADDR="70:38:22:16:44:00"
}

display_config()
{
message "Using configuration data below: "
echo "CONFIG: "${CONFIG}
echo "SCRIPT_DIR: "${SCRIPT_DIR}
echo "IMAGE_DIR: "${IMAGE_DIR}
echo "DEFAULT_CMD: "${DEFAULT_CMD}
echo "KERNEL: "${KERNEL}
echo "MAC_ADDR: "${MAC_ADDR}
}

useage()
{
   echo -e $BGon"Useage: qemu_image_launcher [option]"$Boff
   echo -e " Currently takes only one command line option:"
   echo -e "  "$BBon"[-b | --boot]"$Boff"..........boot the image with qemu-system-arm"
   echo -e "  "$BBon"[-m | --mount]"$Boff".........mount the image with qemu-nbd"
   echo -e "  "$BBon"[-u | --umount]"$Boff"........umount the image with qemu-nbd"
   echo -e "  "$BBon"[-h | --help]"$Boff"..........print this help text"
   echo
   echo -e "  "$BYon"Notes: (none at this time)"$Boff
   echo
}

process_argument()
{
echo "# command line arguments: ["$#"]"
echo "command line argument string: ["$@"]"
# exit on badly formated command line (currently only takes one argument
[ "$#" -gt "1" ] && E_message "${E_BAD_ARGS}" && useage && exit 1

# process command line argument (must be one of the following)
if [ ! -z "$1" ]
then case $1 in
       "-h" | "--help"    ) useage ; exit 0  ;;
       "-b" | "--boot"    ) set_cmd "boot" ;;
       "-m" | "--mount"   ) set_cmd "mount" ;;
       "-u" | "--umount"  ) set_cmd "umount" ;;
       *                  ) set_cmd "invalid" ;;
     esac
else
    set_cmd "null"
fi
}

set_cmd()
{
case $1 in
    "boot"    ) CMD="boot" ;;
    "mount"   ) CMD="mount" ;;
    "umount"  ) CMD="umount" ;;
    "null"    ) message "Option $1. Defaultng to [${DEFAULT_CMD}]" ; CMD=${DEFAULT_CMD} ;;
    "invalid" ) message "Option $1. Exiting..." ; exit 1 ;;
    *         ) message "unspecified error. Exiting..." ; exit 1 ;;
esac
message "Setting command to ["$CMD"]"
}

pick_target()
{
separator "Target Selection"
TARGET=""
image_array=( $(ls ${IMAGE_DIR} | grep ".img") )
for (( x=0; x < ${#image_array[*]}; x++ )); do echo "["${x}"] "${image_array[${x}]}; done

# prompt user to select one of the images displayed by the listing generated above
# choice must be numeric and between 0 and max listed
re='^[0-'$((x - 1))']+$'
answer=zz
while ! [[ $answer =~ $re ]]
do
    # print selection prompt with default "[0]"
    echo -en $BGon"*"$Boff" Select image file to "$CMD" [0]: "
    read answer && echo
    # if the response is null, set answer to "0"
    [[ -z $answer ]] && echo "Reset to zero" && answer=0
done

TARGET="${image_array[${answer}]}"
message "Setting Target: $TARGET"
echo
}

#---[ Main Script ]--------------------------------------------------------------------------------------
separator "Running qemu_image_launcher-${BUILD}"

# nust be root to run this script
checkroot

# set configuration
message "Setting configuration..."
set_config

# print configuration
display_config

# determine what command to run
separator "process argument(s) to select command"
process_argument $@
echo

# determine what target to launch
[[ ! "${CMD}" == "umount" ]] && pick_target
separator "${CMD} ..." "Running command:"


# run the command on the target
case $CMD in

    "works"  )
        exec qemu-system-arm -kernel ${KERNEL} \
             -cpu arm1176 -m 256 -M versatilepb \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 root=/dev/sda2 panic=1 rootfstype=ext4 fsck.repair=yes net.ifnames=0 rootwait" \
             -hda ${IMAGE_DIR}${TARGET} \
             -no-reboot -serial stdio
       ;;
    "boot"  )
        exec qemu-system-arm -kernel ${KERNEL} \
             -cpu arm1176 -m 256 -M versatilepb \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 root=/dev/sda2 panic=1 rootfstype=ext4 fsck.repair=yes net.ifnames=0 rootwait" \
             -drive file=${IMAGE_DIR}${TARGET},format=raw \
             -no-reboot -serial stdio
       ;;
    "mount" )
        # if a qemu-nbd device is already using /dev/nbd0, then exit(error)
        [[ -b /dev/nbd0p1 ]] && E_message "Error: /dev/nbd0 already busy" && exit 1
        modprobe nbd max_part=4
        sleep 0.1
        qemu-nbd --connect /dev/nbd0 -n ${IMAGE_DIR}${TARGET} -f raw
        sleep 0.1
        mount /dev/nbd0p1 /mnt/image_file_p1
        mount /dev/nbd0p2 /mnt/image_file_p2
        sleep 0.1
        message "Your image has been mounted:"
        mount | grep "nbd0p"
        ;;
   "umount" )
        umount /dev/nbd0p1
        sleep 0.1
        umount /dev/nbd0p2
        sleep 0.5
        qemu-nbd --disconnect /dev/nbd0
        message "Your image has been unmounted:"
        mount | grep "nbd0p"
        ;;
    *       )
        E_message "Invalid command selection" && useage
        ;;
esac
message "Done."
