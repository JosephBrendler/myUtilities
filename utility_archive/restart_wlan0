#!/bin/bash
#kill -9 $(ps -e | grep wpa | awk '{print $1}')
source /usr/local/sbin/script_header_brendlefly

BUILD="171112"

short_wait=".5"
long_wait="10"
dhcpcd_timeout="120"
#DEBUG="true"
DEBUG="false"

#INTERFACE="wlp0s7" # default, can override with cli arg $1
INTERFACE="wlan0" # default, can override with cli arg $1
#INTERFACE="wlan1"
#DRIVER="wext"     # default, can override with cli arg $2
#DRIVER="iwlwifi"
DRIVER="nl80211"

#-----[ function blocks ]-----------------------------------------------------------------

#
# count=0; CLR; HCU; CUP 1 1; SCP; while [ 1 ]; do CUD 2; CUB $(termwidth); echo -n $count; let "count+=1"; RCP; done

wpa_state_wait()
{
  # wait for the return of "wpa_cli status" to have state with status COMPLETED
  search_filter="state"
  search_condition="COMPLETED"
  wpa_state=""; count=0
  [ "${DEBUG}" == "true" ] && message "Debug: search_filter = $search_filter"
  [ "${DEBUG}" == "true" ] && message "Debug: search_condition = $search_condition"
  message "Waiting for ${search_filter} to match [ ${search_condition} ]."
  SCP && HCU       # save cursor position, and hide the cursor
  while [ "${wpa_state}" != "${search_condition}" ]
  do
    let "count+=1"
    wpa_state=$(wpa_cli status | grep -i ${search_filter} | cut -d'=' -f2)
    RCP && echo -e "  ${LBon}Cycle [${BWon}${count}${LBon}] Current state: ${BYon}${wpa_state}${Boff}          "
    sleep 1
  done
  SCU  # show cursor again
}

wpa_ip_wait()
{
  # wait for the return of "wpa_cli status" to have arg ip_address with a non-blank, non LL_V4 value
  search_filter="ip_address"
  search_condition1=""          # blank
  search_condition2="169.254"   # LL_V4
  wpa_state=""; count=1
  [ "${DEBUG}" == "true" ] && message "Debug: search_filter = $search_filter"
  [ "${DEBUG}" == "true" ] && message "Debug: search_condition1 = $search_condition1"
  [ "${DEBUG}" == "true" ] && message "Debug: search_condition2 = $search_condition2"
  echo -e "${BGon}*${Boff} waiting for ${search_filter} to NOT match [ ${search_condition1} ] or [ ${search_condition2} ]."
  SCP && HCU
  while [ "${wpa_state}" == "${search_condition1}" ] || [ "${wpa_state}" == "${search_condition2}" ]
  do
    [ "${DEBUG}" == "true" ] && [ "${wpa_state}" == "${search_condition1}" ] && message "while condition is true; matched [ $search_condition1 ]"
    [ "${DEBUG}" == "true" ] && [ "${wpa_state}" == "${search_condition2}" ] && message "while condition is true; matched [ $search_condition2 ]"
    let "count+=1"
    wpa_state=$(wpa_cli status | grep -i ${search_filter} | cut -d'=' -f2 | cut -d'.' -f1,2)
    RCP && echo -e "  ${LBon}Cycle [${BWon}${count}${LBon}] Current state: ${BYon}${wpa_state}${Boff}           "
    sleep 1
  done
  SCU
}

#-----[ start main script ]---------------------------------------------------------------
[ $# -gt 2 ] && exit E_BAD_ARGS
[ $# -eq 1 ] && INTERFACE="$1"
[ $# -eq 2 ] && INTERFACE="$1" && DRIVER="$2"

CLR && CUP 1 1
echo
separator "restart_wifi-${INTERFACE}-${BUILD}"

message_n "stopping wpa_supplicant..."
killall wpa_supplicant
result=$? && right_status $result
sleep $short_wait

message_n "stopping dhcpcd..."
killall dhcpcd
result=$? && right_status $result
sleep $short_wait

message_n "stopping ${INTERFACE}..."
ifconfig ${INTERFACE} down
result=$? && right_status $result
sleep $short_wait

message_n "starting ${INTERFACE}..."
ifconfig ${INTERFACE} up
result=$? && right_status $result
sleep $short_wait

message_n "starting wpa_supplicant..."
wpa_supplicant -D${DRIVER} -i${INTERFACE} -c /etc/wpa_supplicant/wpa_supplicant.conf -B > /dev/null
result=$? && right_status $result

# wait for wpa_cli to return state=COMPLETED
wpa_state_wait
sleep $short_wait; sleep $short_wait; sleep $short_wait

message_n "starting dhcpcd for ${INTERFACE}..."
dhcpcd ${INTERFACE} -t $dhcpcd_timeout > /dev/null
result=$? && right_status $result

# wait for wpa_cli to return a non blank, non LL_V4 address
wpa_ip_wait

message "done; results below:"
ifconfig ${INTERFACE}
