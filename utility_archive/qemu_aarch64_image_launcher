#!/bin/bash
# launch one of my raspberrypi images with qemu
# Joe Brendler 25 August 2013
#   rev 0.10 - 14 Feb 2014 - generalized to boot or mount any image selected 
#       from those found at a configured image directory
#   rev 0.11 - 15 Feb 2014 - generalized to draw config from multiple possible 
#       locations checked IAW an order of precedence

source /usr/local/sbin/script_header_brendlefly
# --- Define local variables -----------------------------------
BUILD="0.11 (20140215)"

BOLDon="\033[1m"
GREENon="\033[32m"
YELLOWon="\033[33m"
REDon="\033[31m"
BLUEon="\033[36m"
BGon=$BOLDon$GREENon
BYon=$BOLDon$YELLOWon
BRon=$BOLDon$REDon
BBon=$BOLDon$BLUEon
Boff="\033[0m"

ROOT_UID=0       # Only users with $UID 0 have root privileges

# Error message used by script
E_NOTROOT="Must be root to run this script."
E_BAD_ARGS="Improperly formatted command line argument."

# --- function blocks ------------------------------------------

set_config()
{
# Source the variable assignments made in update-sequence.conf
#   This will supercede/modify the default assignments made by this scrip
#   unless the presiding config leaves that variable null
#   Order of precedence in looking for config: PWD, /etc/, /usr/local/sbin/
[[ -f "/usr/local/sbin/qemu_aarch64_image_launcher.conf" ]] && CONFIG="/usr/local/sbin/qemu_aarch64_image_launcher.conf"
[[ -f "/etc/qemu_aarch64_image_launcher.conf" ]] && CONFIG="/etc/qemu_aarch64_image_launcher.conf"
[[ -f "./qemu_aarch64_image_launcher.conf" ]] && CONFIG="./qemu_aarch64_image_launcher.conf"
source ${CONFIG}

# User-defined variables - modify according to your system
# SCRIPT_DIR is the directory in which you have placed
#   this script and the show-elogs script
[ -z "$SCRIPT_DIR" ] && SCRIPT_DIR=${PWD}"/"    # must end with '/'
[ -z "$IMAGE_DIR" ] && IMAGE_DIR=${PWD}"/"    # must end with '/'
[ -z "$DEFAULT_CMD" ] && DEFAULT_CMD="boot"
[ -z "$KERNEL" ] && KERNEL="/home/joe/MyRaspberryFiles/raspi-kernel"
[ -z "$MAC_ADDR" ] && MAC_ADDR="70:38:22:16:44:00"
}

display_config()
{
message "Using configuration data below: "
echo "CONFIG: "${CONFIG}
echo "SCRIPT_DIR: "${SCRIPT_DIR}
echo "IMAGE_DIR: "${IMAGE_DIR}
echo "DEFAULT_CMD: "${DEFAULT_CMD}
echo "KERNEL: "${KERNEL}
echo "MAC_ADDR: "${MAC_ADDR}
}

useage()
{
   echo -e $BGon"Useage: qemu_aarch64_image_launcher [option]"$Boff
   echo -e " Currently takes only one command line option:"
   echo -e "  "$BBon"[-b | --boot]"$Boff"..........boot the image with qemu-system-arm"
   echo -e "  "$BBon"[-m | --mount]"$Boff".........mount the image with qemu-nbd"
   echo -e "  "$BBon"[-h | --help]"$Boff"..........print this help text"
   echo
   echo -e "  "$BYon"Notes: (none at this time)"$Boff
   echo
}

process_argument()
{
echo "# command line arguments: ["$#"]"
echo "command line argument string: ["$@"]"
# exit on badly formated command line (currently only takes one argument
[ "$#" -gt "1" ] && E_message "${E_BAD_ARGS}" && useage && exit 1

# process command line argument (must be one of the following)
if [ ! -z "$1" ]
then case $1 in
       "-h" | "--help"    ) useage ; exit 0  ;;
       "-b" | "--boot"    ) set_cmd "boot" ;;
       "-m" | "--mount"   ) set_cmd "mount" ;;
       *                  ) set_cmd "invalid" ;;
     esac
else
    set_cmd "null"
fi
}

set_cmd()
{
case $1 in
    "boot"    ) CMD="boot" ;;
    "mount"   ) CMD="mount" ;;
    "null"    ) message "Option $1. Defaultng to [${DEFAULT_CMD}]" ; CMD=${DEFAULT_CMD} ;;
    "invalid" ) message "Option $1. Exiting..." ; exit 1 ;;
    *         ) message "unspecified error. Exiting..." ; exit 1 ;;
esac
message "Setting command to ["$CMD"]"
}

pick_target()
{
TARGET=""
image_array=( $(ls ${IMAGE_DIR} | grep ".img") )
for (( x=0; x < ${#image_array[*]}; x++ )); do echo "["${x}"] "${image_array[${x}]}; done

# prompt user to select one of the images displayed by the listing generated above
# choice must be numeric and between 0 and max listed
re='^[0-'$((x - 1))']+$'
answer=zz
while ! [[ $answer =~ $re ]]
do
    # print selection prompt with default "[0]"
    echo -en $BGon"*"$Boff" Select image file to "$CMD" [0]: "
    read answer && echo
    # if the response is null, set answer to "0"
    [[ -z $answer ]] && echo "Reset to zero" && answer=0
done

TARGET="${image_array[${answer}]}"
message "Setting Target: $TARGET"
echo
}

#---[ Main Script ]--------------------------------------------------------------------------------------
separator "Running qemu_aarch64_image_launcher-${BUILD}"

# nust be root to run this script
check_root

# set configuration
message "Setting configuration..."
set_config

# print configuration
display_config

# determine what command to run
separator "process argument(s) to select command"
process_argument $@
echo

# determine what target to launch
separator "target selection"
pick_target

# run the command on the target
case $CMD in
    "old_boot_not_used"  )
        exec qemu-system-arm -kernel ${KERNEL} \
             -cpu arm1176 -m 256 -M versatilepb \
             -cpu cortex-a72 -m 256 -M versatilepb \
             -no-reboot -serial stdio \
             -append "root=/dev/sda2 panic=1 console=ttyAMA0" \
             -drive file=${IMAGE_DIR}${TARGET},index=0,media=disk,format=raw \
             -dtb ${DTB_FILE}
             -net tap,ifname=tap0,script=no,downscript=no \
             -net nic,model=virtio,macaddr=00:70:38:22:16:44
             ;;
    "holder_for_stuff" )
             -device virtio-gpu-pci
             -cpu cortex-a72 -m 1G -M raspi3 \
             ;;
    "boot"      )
        exec qemu-system-aarch64 \
             -kernel ${KERNEL} \
             -cpu cortex-a72 -m 1024 -M raspi3 \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 panic=1 fsck.repair=yes net.ifnames=0 rootwait" \
             -hda ${IMAGE_DIR}${TARGET} \
             -no-reboot -serial stdio
             ;;
    "bad_boot"  )
        qemu-system-aarch64 \
             -kernel ${KERNEL} \
             -M raspi3 -m 1G \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 root=/dev/sda1 panic=1 rootfstype=vfat fsck.repair=yes net.ifnames=0 rootwait" \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 root=/dev/mmcblk0p2 rootfstype=vfat fsck.repair=yes net.ifnames=0 rootwait" \
             -hda ${IMAGE_DIR}${TARGET} \
             -dtb ${DTB_FILE} \
             -no-reboot \
             -serial stdio \
             -vnc thuvia:0 \
             -sdl
             ;;
    "aarch64_boot"  )
        qemu-system-aarch64 \
             -M raspi3b \
             -m 1024 -smp 4 \
             -kernel ${KERNEL} \
             -append "rw earlycon=pl011,0x3f201000 console=ttyAMA0 loglevel=0 panic=1 fsck.repair=yes net.ifnames=0 rootwait" \
             -hda ${IMAGE_DIR}${TARGET} \
             -no-reboot \
             -nographic
             ;;
    "old_aarch64_boot" )
        qemu-system-aarch64 -kernel ${KERNEL} \
             -cpu cortex-a72 -m 1G -M raspi3 \
             -no-reboot -serial stdio \
             -drive file=${IMAGE_DIR}${TARGET},if=sd,index=0,media=disk,format=raw \
             -dtb ${DTB_FILE} \
             -vnc thuvia:0 \
             -sdl
             ;;
    "more-holdings" )
             -append "root=/dev/sda7 panic=1 console=ttyAMA0" \
             -net tap,ifname=tap0,script=no,downscript=no \
             -net nic,model=virtio,macaddr=00:70:38:22:16:44 \
             -bios ${BIOS} \
             -sdl
        ;;
    "manual" )
        exec qemu-system-aarch64 -cpu cortex-a72 -m 1G -M raspi3 -kernel ../kernel8.img -drive file=NOOBS.img,if=sd,format=raw -serial stdio -vnc thuvia:0
        ;;
    "mount" )
        # if a qemu-nbd device is already using /dev/nbd0, then exit(error)
        [[ -b /dev/nbd0p1 ]] && E_message "Error: /dev/nbd0 already busy" && exit 1
        modprobe nbd max_part=4
        sleep 0.1
        qemu-nbd --connect /dev/nbd0 -n ${IMAGE_DIR}${TARGET}
        sleep 0.1
        mount /dev/nbd0p1 /mnt/image_file_p1
        mount /dev/nbd0p6 /mnt/image_file_p6
        sleep 0.1
        message "Your image has been mounted:"
        mount | grep "nbd0p"
        ;;
    *       )
        E_message "Invalid command selection" && useage
        ;;
esac
message "Done."
