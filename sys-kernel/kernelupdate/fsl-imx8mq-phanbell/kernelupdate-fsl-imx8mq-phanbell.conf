# kernelconfig.conf file for board: fsl-imx8mq-phanbell
# custom configuration for kernelupdate
# Joe Brendler 4 September 2023
#
# Please review: https://www.raspberrypi.com/documentation/computers/linux_kernel.html
#
# original commneted entries below are default values copy/edit to change them
# all non-commented lines must be valid bash commands. (this file is sourced by main script)
#
#
# VERBOSE - Logical dependent on script_header_joetoo, use for debugging
#VERBOSE=$TRUE
#
# verbosity - how much debug info? higer # = more
#verbosity=3
#
# user - used to set ownership of kernel development files
#user="joe"
#
# makeopts - set -j# and -l#
#  -j (--jobs) is the number of simultaneous jobs (basic recommendation is (2 * #cpus) + 1)
#     (note: total #cpus can be high, in a distcc environment)
#  -l (--load-average) limits creation of parallel tasks based on the current load average
#     (do not count remote cpus; basic recommendation is #cpus +1 )
#makeopts="-j9 -l5"  # example for 4 core system
# Aggressive setting --
#makeopts=" -j$(( $(( 2 * $(nproc) )) + 1 )) -l$(( $(nproc) + 1 ))"
#   However, another consider RAM usage. As of 2024, gcc may take 1.5 GB to 2 GB of RAM
#   per job. Lower the MAKEOPTS value to provide at least 2G RAM per cpu, so the system can
#   compile without hitting swap very often slowing things down
# Conserviative setting --
memtotal=$(grep 'MemTotal' /proc/meminfo | awk '{print $2}'); GiB=$((1024 * 1024))
makeopts="-j$(echo "scale=0; $memtotal / ( 2 * $GiB)" | bc)"
#
# features - select or de-select features (recommend turning off distcc if otherwise used)
features=" -userpriv -distcc"
#
# arch - what architecture?
#arch="arm"
arch="arm64"
#
# cross_compile - tuple indicating target for cross-compilation
#cross_compile="armv7a-unknown-linux-gnueabihf-"
cross_compile="aarch64-unknown-linux-gnu-"
#
# model - what device? Used to select device tree file (dtb), so it must name a dtb file produced by
#         the command "${make_model} dtbs" (run manually in kernel build directory to list)
#model="rk3288-tinker-s"
model="fsl-imx8mq-phanbell"
#
# image - what is the name of the make target used to generate kernel image
#image="zImage"
image="Image.gz"
#
# kernel - name of the destination bootable kernel image when deployed
#kernel=Image
kernel=vmlinuz
#
#
# dtb_folder - relative to build/${model}/arch/${ARCH}/boot/dts - where "make dtbs" puts dtb files
#dtb_folder=""
dtb_folder="nxp/freescale"
#
# overlay_folder - relative to build/${model}/arch/${ARCH}/boot/dts - where "make dtbs" puts overlay files
#overlay_folder=""
overlay_folder="nxp/overlay"
#
# build_root - path to cross development directory tree for this arch/target/model
#build_root="/home/${user}/MyTinkerboardFiles"
build_root="/home/${user}/My_${model}_project"
#
# my_devel_dir - source repository from which to upload content to github (omit trailing '/')
#my_devel_dir="/home/${user}/myUtilities/sys-kernel"
#
# my_devel_dir_credentials - loc. of github user/password (put in .git to avoid upload)
#   this will be sourced by build script, so it must be legit bash assignments
#   of user="somebody" and pass="somesecret"
#my_devel_dir_credentials="/home/${user}/myUtilities/.git/.credentials"
my_devel_dir_credentials="/home/${user}/myUtilities/.git/.credentials"
#
# my_ebuild_dir - ebuild repository from which to upload content to github (omit trailing '/')
#my_ebuild_dir="/home/${user}/joetoo/sys-kernel"
#
# my_ebuild_dir_credentials - loc. of github user/password (put in .git to avoid upload)
#   this will be sourced by build script, so it must be legit bash assignments
#   of user="somebody" and pass="somesecret"
#my_ebuild_dir_credentials="/home/${user}/joetoo/.git/.credentials"
my_ebuild_dir_credentials="/home/${user}/joetoo/.git/.credentials"
#
# INTERACTIVE - ask user y/n to proceed from one command sequnce step to the next
INTERACTIVE=${TRUE}
#
# Note: if it doesn't exist, the first run of kernelupdate will create
#  the build_root directory tree.
#
# First run will also explain that you must retreive kernel sources and
#  symlink ${build_root}/linux to those sources.
# The program will keep that directory clean and build your output -
#  kernel(s), modules, and dtb file(s) in the ${distrib_dir}
#
# host_dir - location inside build_root to store kernel images for xen client use via symlink
#host_dir="domU_kernel_images"
host_dir="<NOT_APPLICABLE>"
