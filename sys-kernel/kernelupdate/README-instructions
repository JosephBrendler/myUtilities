## Do not delete or edit this file 
##   This file is sourced by the kernelupdate script to provide instructions
##   to users regarding how to get sources appropriate for their project
# Notes:
# (1) dropped dom0 build support in favor of simple gentoo-kernel 20250507
#
# (2) Interactive support allows you to copy the ${manual_prefix} or ${make_me} string
# and use it to manually issue the sequence of commands that accomplishes a kernel update
#
# (3) You must first have cloned/linked the kernel sources <project_root>/linux directory
#
# (4) you can either "seed" build dir with .config or interactively (manually)
# make one with, e.g. --
    eval ${make_me} imx_v8_defconfig
#
# (5) first run of kernelupdate for any given "model" creates directory structure
#
# To build cross compiler, start clean, and if stable versions are available use "-S" --
    TARGET=armv7a-unknown-linux-gnueabihf
    crossdev --clean --target ${TARGET}
    crossdev -S -t ${TARGET}
# If a specific version of part of the toolchain is needed use this --
    crossdev --b ~2.40 --g ~12.3 --k ~2.37 --l ~6.1 --target ${TARGET}
#
# (6) If using it, ou may need to disable distcc first; run --
    nodist_path
# and preface crossdev commands above with FEATURES="${FEATURES} -distcc" --
    FEATURES="${FEATURES} -distcc" crossdev -S -t ${TARGET}
#
# see README_* instructions on getting kernel sources, manual process, etc.
# ( similar to the following example for raspi-sources )

  # First, on build-workstation, remove any existing sources link or folder
    cd /home/${user}/raspi-sources
    rm -r linux
  # ignore (deprecated) ./update-ebuild.sh   ## created for  EGIT based ebuild,
  # but we're now downloading, and making tarball directly

  # See https://www.raspberrypi.com/documentation/computers/linux_kernel.html#choosing_sources
  # browse https://www.kernel.org/ to determine latest stable version of kernel
  # browse https://github.com/raspberrypi/linux.git and note available branches and tags
    branch_version=X.Z   ## e.g. 6.12
    git clone --depth 1 --branch rpi-${branch_version}.y https://github.com/raspberrypi/linux.git linux-${branch_version}.y

    cd linux-${branch_version}.y
    kernelversion=$(make kernelversion) ; echo "kernelversion: $kernelversion"
    cd ..
    mv linux-${branch_version}.y linux-${kernelversion}-raspi

  # then see README-tar-command
    tar --exclude '.git*' -cvjpf linux-${kernelversion}-raspi.tbz2 linux-${kernelversion}-raspi

  # create link for kernelupdate use
    ln -snf linux-${kernelversion}-raspi linux

  # scp to raspi56406 to publish
    scp linux-${kernelversion}-raspi.tbz2 raspi56406:/home/${user}/

  # now go to raspi56406 and move (as root) from /home/${user}/ to /var/www/localhost/htdocs/raspi-sources/
    cp /home/${user}/linux-${kernelversion}-raspi.tbz2 /var/www/localhost/htdocs/raspi-sources/
    rm /home/${user}/linux-${kernelversion}-raspi.tbz2

  # manually update the new raspi-sources ebuild
    cd /home/${user}/joetoo/sys-kernel/raspi-sources/
    cp ${latest-version} ${new-version}

  # now go to build-workstation and run (as root)
    eselect kernelupdate list/set

  # link the new sources and seed a .config file
    cd ~/My_${model}_project/
    ln -snf /home/${user}/raspi-sources/-<version> linux
    cp kernelconfigs/<myconfig> build/${model}/.config

  # now run kernelupdate
    kernelupdate

# For rockchip, amlogic, and nxp/freescale kernels, we browse to find the same specific kernel that
# armbian is using, and use wget to download that. (the ebuild can do the same, so there is no
# no need to copy a tarball to our server (raspi56406).  See instructions at README_*

# see also --
# https://www.raspberrypi.com/documentation/computers/linux_kernel.html
# https://www.kernel.org/
# https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/
# https://github.com/nxp-imx/linux-imx
# https://github.com/libre-computer-project/libretech-linux.git
# https://github.com/raspberrypi/linux
# https://github.com/rockchip-linux
# https://github.com/rockchip-linux/kernel
