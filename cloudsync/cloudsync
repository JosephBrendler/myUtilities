#!/bin/bash
#
# Joe Brendler
# 27 Apr 2014
# Rev 22 May 2014 - bug fixes for cron jobs not running
# Rev 01 Jun 2014 - ver 0.03 - added cloudsync.conf functionality
# Rev 19 Aug 2014 - ver 0.1.1 - (1) added delete capability in two parts
#                   script will first run a purgelist_command located
#                   in the local_scripts_folder (this is necessary for
#                   nat'd remote hosts that cannot receive pushed
#                   rsync delete commands from servers (hubs).
#                   (2) Also implemented command line options
#                   and sanity checking
# Rev 10 Jan 2017 - removed purge crap (in favor of delete option)
#
# cloudsync -- synchronize my cloud servers - replaces several
#  separate rsync cron jobs.  participating nodes may have symmetrically
#  or asymetrically configured rsync services and/or storage.
#
# Rev 5 Feb 2017 - packaged with ebuild for distribution.  Introduced
#                  more robust argument processing, and included
#                  a new "targets" option, to identify specific
#                  remote targets that should be affected by the operation
#
# For each category of cloud server (content, scripts, packages),
#   User should configure each instance of this script with:
#   + list of servers that this should pull-sync with
#     -- list of rsync-served folders that should be pull-sync'd
#   + list of servers that this should push-sync with
#     -- list of rsync-served folders that should be push-sync'd
#   This is more clearly explained by the actual assignments, below
#
# -----------------------------------------------------------
# Set default values and then source the variable assignments made in cloudsync.conf.
#   Look for: ./cloudsync.conf , /usr/local/sbin/cloudsync.conf, /etc/cloudsync.conf
#   (if multiple .confs exist, the latter found in that order will over-ride the
#   assignments made by the former (and the default assignments made below)
# ** NOTE ** Options provided via the command line will supercede both defaults
#   and the contents of any .conf files found
#

source /usr/local/sbin/script_header_brendlefly

# --- Define local variables -----------------------------------
BUILD="2.0.0"

OPTS1="-uaz"
OPTS2=""

DEBUG=$TRUE     #I'm using this to generate cron output for debugging purposes
#DEBUG=$FALSE

verbosity=0

# --- function blocks ------------------------------------------
set_defaults() {
[[ -e cloudsync.conf ]] && config_file=$PWD/cloudsync.conf
[[ -e /usr/local/sbin/cloudsync.conf ]] && config_file="/usr/local/sbin/cloudsync.conf"  ## comment out to debug
[[ -e /etc/cloudsync.conf ]] && config_file="/etc/cloudsync.conf"                        ## comment out to debug

PUT=$FALSE
GET=$FALSE
DELETE=$FALSE
CONTENT=$FALSE
SCRIPTS=$FALSE
PACKAGES=$FALSE
TARGETS=("")
EXCLUDE=("")
QUIET=$FALSE
VERBOSE=$TRUE
PROGRESS=$TRUE
CMDLINE_OVERRIDE_PUTGET=$FALSE
CMDLINE_OVERRIDE_CATEGORY=$FALSE
CMDLINE_OVERRIDE_QV=$FALSE
CMDLINE_OVERRIDE_PROGRESS=$FALSE

#---[ configure default servers and folders ]-------------------------------------------------------
#   Note that remote "folders" are the served rsync folder names, whereas
#     the local folder names are actual folder paths
# --- do not include leading or trailing "/" in folder lists ---------
[ -z $MyPackagesROOT ] && MyPackagesROOT="/"

[ -z $MyContentROOT ] && MyContentROOT="/srv/public"
[ -z ${content_serverlist} ] && \
    content_serverlist="thuvia oromis persephone spartacus pascal raspberry03"
[ -z ${content_folderlist} ] && \
    content_folderlist="Documents Joe_Laptop Music MyArduinoProjects My_Audio_Projects Pictures Software Video"

[ -z ${pull_scripts_serverlist} ] && \
    pull_scripts_serverlist="thuvia selene slim slim2 oromis spartacus zelda raspberry03 raspberry06 raspberry201 raspberry202"
[ -z ${push_scripts_serverlist} ] && \
    push_scripts_serverlist="thuvia selene slim slim2 oromis spartacus zelda raspberry03 raspberry06 raspberry201 raspberry202"
[ -z ${local_scripts_folder} ] && local_scripts_folder="/usr/local/sbin"
[ -z ${remote_scripts_folder} ] && remote_scripts_folder="usr-local-sbin"

[ -z ${pull_packages_serverlist} ] && pull_packages_serverlist=""
[ -z ${push_packages_serverlist} ] && push_packages_serverlist=""
[ -z ${local_packages_folder} ] && \
    local_packages_folder="${MyPackagesROOT}usr/portage/packages"
[ -z ${remote_packages_folder} ] && \
    remote_packages_folder="armv6j-hardfloat-linux-gnueabi-packages"

}    # end of set_defaults()

normalize_list()
{
  # convert the input positional parameter string into an array
  local list=($@)
  # output the contents of the array to sdtout
  echo ${list[@]}
  # the result should be an orderly list(string) of the parameters
  # each separated by the IFS field separation character (normally one space)
}

normalize_lists()
{
  # pass the contents of each list to normalize_list as a set of positional parameters
  content_serverlist=$(normalize_list $content_serverlist)
  pull_scripts_serverlist=$(normalize_list $pull_scripts_serverlist)
  push_scripts_serverlist=$(normalize_list $push_scripts_serverlist)
  pull_packages_serverlist=$(normalize_list $pull_packages_serverlist)
  push_packages_serverlist=$(normalize_list $push_packages_serverlist)
  pull_packages_serverlist=$(normalize_list $pull_packages_serverlist)
  push_packages_serverlist=$(normalize_list $push_packages_serverlist)
}

process_cmdline()
{
  option=(""); arg=("")
  i=0; j=0    # option and arg arrays are both zero-based
  FIRST=$TRUE
  while [[ $# -gt 0 ]]
  do
    d_message "Processing cmdline item [$1]" 2
    if [[ "${1:0:1}" == "-" ]]
    then
      d_message "This is an option" 2
      # the first character is a hyphen, this is an option
      option[i]=$1
      d_message "  option[$i]=[${option[i]}]" 3
      # if we already had option/args in queue, process that
      [[ $i -gt 0 ]] && FIRST=$FALSE
      d_message "  FIRST=[$(status_color $FIRST)$(TrueFalse $FIRST)${Boff}]" 3
      if [[ ! $FIRST ]]
      then
        # process the last option with any arguments
        d_message "  Processing previous option/args:" 2
        d_message "  option[$((i-1))]=[${option[$((i-1))]}]" 3
        process_option ${option[$((i-1))]} ${arg[@]}
        arg=("")     # reset the arg array
        let "j=0"    # reset the arg counter for next option
      fi
      let "i+=1"   # increment the option counter
    else
      d_message "  This is NOT an option - treat as arg to option" 2
      # not an option, may be an argument for an earlier option, or may be invalid
      arg[j]=$1
      d_message "  arg[$j]=[${arg[j]}]" 3
      let "j+=1"
    fi
    shift
  done
  # process the final option queued up along with any args
  d_message "  Processing final option/args already queued:" 2
  d_message "  option[$((i-1))]=[${option[$((i-1))]}]" 3
  process_option ${option[$((i-1))]} ${arg[@]}
  let "j=0"    # reset the arg counter for next option
  # now that we've processed all cmdline options, use the resultant flag set to set OPTS1 and OPTS2
  # check for invalid option combinations -- this used to be "sanity_check"

  d_message "  ${BWon}>>> before sanity check: OPTS1=[${OPTS1}]  OPTS2=[$OPTS2]${Boff}" 2
  d_message "    ${BWon}PROGRESS=[$(status_color $PROGRESS)$(TrueFalse $PROGRESS)${BWon}]${Boff}" 3
  d_message "    ${BWon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${BWon}]${Boff}" 3
  d_message "    ${BWon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${BWon}]${Boff}" 3
  d_message "    ${BWon}DELETE=[$(status_color $DELETE)$(TrueFalse $DELETE)${BWon}]${Boff}" 3
  d_message "    ${BWon}verbosity=[$verbosity]${Boff}" 2
  [[ $QUIET ]] && [[ $VERBOSE ]] && QUIET=$FALSE                              # verbose overrides
  [[ ! $QUIET ]] && [[ ! $VERBOSE ]] && VERBOSE=$TRUE                         # default to verbose
  [[ $PROGRESS ]] && QUIET=$FALSE && VERBOSE=$TRUE                            # progress implies verbose and overrides quiet
  # now set options
  [[ $DELETE ]] && if [[ -z "$OPTS2" ]]; then OPTS2="--delete --force"; else OPTS2+=" --delete --force"; fi
  [[ $PROGRESS ]] && if [[ -z "$OPTS2" ]]; then OPTS2="--progress"; else OPTS2+=" --progress"; fi
  [[ $VERBOSE ]] && if [[ -z "$OPTS1" ]]; then  OPTS1="-v"; else OPTS1+="v"; fi
  [[ $QUIET ]] && if [[ -z "$OPTS1" ]]; then OPTS1="-q"; else OPTS1+="q"; fi
  d_message "  ${BWon}>>>  after sanity check: OPTS1=[${OPTS1}]  OPTS2=[$OPTS2]${Boff}" 2
  d_message "    ${BWon}PROGRESS=[$(status_color $PROGRESS)$(TrueFalse $PROGRESS)${BWon}]${Boff}" 3
  d_message "    ${BWon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${BWon}]${Boff}" 3
  d_message "    ${BWon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${BWon}]${Boff}" 3
  d_message "    ${BWon}DELETE=[$(status_color $DELETE)$(TrueFalse $DELETE)${BWon}]${Boff}" 3
  d_message "    ${BWon}verbosity=[$verbosity]${Boff}" 2

  # almost done; to avoid having to address this in both process_option and process_compound, do it here:
  d_message "  Almost done; checking overrides for serverlists..." 2
  d_message "         PUT=[$(TrueFalse $PUT)]" 3
  d_message "         GET=[$(TrueFalse $GET)]" 3
  d_message "    PACKAGES=[$(TrueFalse $PACKAGES)]" 3
  d_message "     SCRIPTS=[$(TrueFalse $SCRIPTS)]" 3
  d_message "     CONTENT=[$(TrueFalse $CONTENT)]" 3
  d_message "     TARGETS=[${#TARGETS[@]}]" 3
  d_message "  Targetlist=[${TARGETS[@]}]" 3
  [[ $PUT ]] && [[ $PACKAGES ]] && [[ ! -z "${TARGETS[@]}" ]] && push_packages_serverlist="${TARGETS[@]}" && \
    d_message "        Overrode packages push_serverlist with TARGETS" 3
  [[ $GET ]] && [[ $PACKAGES ]] && [[ ! -z "${TARGETS[@]}" ]] && pull_packages_serverlist="${TARGETS[@]}" && \
    d_message "        Overrode packages pull_serverlist with TARGETS" 3
  [[ $PUT ]] && [[ $SCRIPTS ]] && [[ ! -z "${TARGETS[@]}" ]] && push_scripts_serverlist="${TARGETS[@]}" && \
    d_message "        Overrode scripts push_serverlist with TARGETS" 3
  [[ $GET ]] && [[ $SCRIPTS ]] && [[ ! -z "${TARGETS[@]}" ]] && pull_scripts_serverlist="${TARGETS[@]}" && \
    d_message "        Overrode scripts pull_serverlist with TARGETS" 3
  [[ $PUT || $GET ]] && [[ $CONTENT ]] && [[ ! -z "${TARGETS[@]}" ]] && content_serverlist="${TARGETS[@]}" && \
    d_message "        Overrode content serverlist with TARGETS" 3

}

process_option()
{
  local opt=$1; shift
  local argarray=$@
  result=999
  d_message "    ${BYon}Removed opt [${opt}] from argarray, which is now [${argarray[@]}]${Boff}" 4
  d_message "    ${BYon}Processing opt [${opt}] with args [$argarray]${Boff}" 3
  # set the appropriate values for the appropriate global flags.  Also flag CMDLINE_OVERRIDE at the first use of
  #   one of [ CONTENT | SCRIPTS | PACKAGES ] or one of [ PUT | GET ] and default the others in that category
  #   to $FALSE at that point.  This is because if one of them is specified on the command line,
  #   we will attend only to those in that category activated by the command line. (e.g. if PUT is specified
  #   by the command line, then we will set GET to $FALSE unless it too is specified on the command line)
  case $opt in
    "-q" | "--quiet" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
      # unless progress is set, quiet overrides verbose if it is set later on the command line
      if [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
      then
        QUIET=$TRUE
        VERBOSE=$FALSE
        check_cmdline_override "$opt"
        d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 3
        d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 3
        d_message "    ${BYon}Set external variable ${LBon}verbosity=[${BMon}${verbosity}${LBon}]${Boff}" 3
        d_message "    ${BYon}Set external variable ${LBon}CMDLINE_OVERRIDE_QV=[$(status_color $CMDLINE_OVERRIDE_QV)$(TrueFalse $CMDLINE_OVERRIDE_QV)${LBon}]${Boff}" 3
        d_message "    ${BYon}Set external variable ${LBon}CMDLINE_OVERRIDE_PROGRESS=[$(status_color $CMDLINE_OVERRIDE_PROGRESS)$(TrueFalse $CMDLINE_OVERRIDE_PROGRESS)${LBon}]${Boff}" 3
      fi
      ;;
    "-v" | "--verbose" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      # verbose overrides quiet if if falls later in the command line
      VERBOSE=$TRUE; QUIET=$FALSE; let "verbosity+=1"; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 2
      d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 2
      d_message "        ${BYon}Incremented external variable to ${LBon}verbosity=[${BMon}${verbosity}${LBon}]${Boff}" 3
      ;;
    "-P" | "--progress" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      # progress implies verbose and overrides quiet
      PROGRESS=$TRUE; VERBOSE=$TRUE; QUIET=$FALSE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 2
      d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 2
      d_message "    ${BYon}Set external variable ${LBon}PROGRESS=[$(status_color $PROGRESS)$(TrueFalse $PROGRESS)${LBon}]${Boff}" 2
      ;;
    "-t" | "--targets" )
      result=1 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which must have ${BGon}at least one${boff} argument" 3
      TARGETS="${argarray[@]}"
      d_message "    ${BYon}Set external variable ${LBon}TARGETS=[${BWon}${TARGETS}${LBon}]${Boff}" 2
      ;;
    "-p" | "--put" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      PUT=$TRUE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}PUT=[$(status_color $PUT)$(TrueFalse $PUT)${LBon}]${Boff}" 2
      ;;
    "-g" | "--get" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      GET=$TRUE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}GET=[$(status_color $GET)$(TrueFalse $PUT)${LBon}]${Boff}" 2
      ;;
    "-d" | "--delete" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      DELETE=$TRUE
      d_message "    ${BYon}Set external variable ${LBon}DELETE=[$(status_color $DELETE)$(TrueFalse $DELETE)${LBon}]${Boff}" 2
      ;;
    "-c" | "--contents" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      CONTENTS=$TRUE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}CONTENTS=[$(status_color $CONTENTS)$(TrueFalse $CONTENTS)${LBon}]${Boff}" 2
      ;;
    "-s" | "--scripts" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      SCRIPTS=$TRUE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}SCRIPTS=[$(status_color $SCRIPTS)$(TrueFalse $SCRIPTS)${LBon}]${Boff}" 2
      ;;
    "-k" | "--packages" )
      result=0 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
      PACKAGES=$TRUE; check_cmdline_override "$opt"
      d_message "    ${BYon}Set external variable ${LBon}PACKAGES=[$(status_color $PACKAGES)$(TrueFalse $PACKAGES)${LBon}]${Boff}" 2
      ;;
    "-x" | "--exclude" )
      result=1 ;
      d_message "    ${BWon}>>>${Boff} ${opt} is a ${BGon}valid${Boff} opt which must have ${BGon}at least one${boff} argument" 3
      EXCLUDE="${argarray[@]}"
      d_message "    ${BYon}Set external variable ${LBon}EXCLUDE=[${BWon}${EXCLUDE}${LBon}]${Boff}" 2
      ;;
    * )
      # if this starts with "-" followed by a compound of single letter opts, process that
      if [[ ${#opt} -gt 2 && "${opt:0:1}" == "-" && "${opt:1:1}" != "-" ]]
      then
        compound=${opt:1}
        d_message "      Stripped leading \"-\", processing the rest as a compound of opts [${compound}]" 3
        process_compound ${compound}    # processing of the compound arg will set result
      else
        result=2
        local msg="    ${BWon}>>>${Boff} ${BRon}Invalid opt [${BWon}${opt}${BRon}]${Boff}"
        [[ "${opt}" =~ [xt] ]] && msg+=" ${BRon}(options x and t not allowed in compound agrument)${Boff}"
        E_message "$msg"
      fi
      ;;
  esac
}

process_compound()
{
  local argstr=$1
  d_message "        ${LBon}Processing compound option set [$argstr]${Boff}" 2
  result=3  # treat as valid compound argument until proven false
  # handle each char separately
  for ((l=0; l<${#argstr}; l++))
  do
    d_message "        ${LBon}l=[$l]; argstr[$l]=[${argstr:$l:1}]" 4
    case ${argstr:$l:1} in
      "q" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        # unless progress is set, quiet overrides verbose if it is set later on the command line
        if [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
        then
          QUIET=$TRUE
          VERBOSE=$FALSE
          check_cmdline_override "-q"
          d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 3
          d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 3
          d_message "    ${BYon}Set external variable ${LBon}verbosity=[${BMon}${verbosity}${LBon}]${Boff}" 3
          d_message "    ${BYon}Set external variable ${LBon}CMDLINE_OVERRIDE_QV=[$(status_color $CMDLINE_OVERRIDE_QV)$(TrueFalse $CMDLINE_OVERRIDE_QV)${LBon}]${Boff}" 3
          d_message "    ${BYon}Set external variable ${LBon}CMDLINE_OVERRIDE_PROGRESS=[$(status_color $CMDLINE_OVERRIDE_PROGRESS)$(TrueFalse $CMDLINE_OVERRIDE_PROGRESS)${LBon}]${Boff}" 3
        fi
        ;;
      "v" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
        # verbose overrides quiet if if falls later in the command line
        VERBOSE=$TRUE; QUIET=$FALSE; let "verbosity+=1"; check_cmdline_override "-v"
        d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 2
        d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 2
        d_message "        ${BYon}Incremented external variable to ${LBon}verbosity=[${BMon}${verbosity}${LBon}]${Boff}" 3
        ;;
      "P" )  # capital P for --progress
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 3
        # progress implies verbose and overrides quiet
        PROGRESS=$TRUE; VERBOSE=$TRUE; QUIET=$FALSE; check_cmdline_override "-P"
        d_message "    ${BYon}Set external variable ${LBon}VERBOSE=[$(status_color $VERBOSE)$(TrueFalse $VERBOSE)${LBon}]${Boff}" 2
        d_message "    ${BYon}Set external variable ${LBon}QUIET=[$(status_color $QUIET)$(TrueFalse $QUIET)${LBon}]${Boff}" 2
        d_message "    ${BYon}Set external variable ${LBon}PROGRESS=[$(status_color $PROGRESS)$(TrueFalse $PROGRESS)${LBon}]${Boff}" 2
        ;;
      "p" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        PUT=$TRUE; check_cmdline_override "-p"
        d_message "        ${BYon}Set external variable ${LBon}PUT=[$(status_color $PUT)$(TrueFalse $PUT)${LBon}]${Boff}" 3
        ;;
      "g" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        GET=$TRUE; check_cmdline_override "-g"
        d_message "        ${BYon}Set external variable ${LBon}GET=[$(status_color $GET)$(TrueFalse $GET)${LBon}]${Boff}" 3
        ;;
      "d" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        DELETE=$TRUE
        d_message "        ${BYon}Set external variable ${LBon}DELETE=[$(status_color $DELETE)$(TrueFalse $DELETE)${LBon}]${Boff}" 3
        ;;
      "c" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        CONTENT=$TRUE; check_cmdline_override "-c"
        d_message "        ${BYon}Set external variable ${LBon}CONTENT=[$(status_color $CONTENT)$(TrueFalse $CONTENT)${LBon}]${Boff}" 3
        ;;
      "s" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        SCRIPTS=$TRUE; check_cmdline_override "-s"
        d_message "        ${BYon}Set external variable ${LBon}SCRIPTS=[$(status_color $SCRIPTS)$(TrueFalse $SCRIPTS)${LBon}]${Boff}" 3
        ;;
      "k" )
        d_message "    ${BWon}>>>${Boff} ${argstr:$l:1} is a ${BGon}valid${Boff} opt which can have ${BRon}no${Boff} argument" 2
        PACKAGES=$TRUE; check_cmdline_override "-k"
        d_message "        ${BYon}Set external variable ${LBon}PACKAGES=[$(status_color $PACKAGES)$(TrueFalse $PACKAGES)${LBon}]${Boff}" 3
        ;;
       *  )
        # everything else is invalid (incl x or t which cannot be assigned in a compound arg)
        local msg="        ${BWon}>>>${Boff} ${BRon}Invalid option [${BWon}${argstr:$l:1}${BRon}]${Boff}"
        [[ "${argstr:$l:1}" =~ [xt] ]] && msg+=" ${BRon}(options x and t not allowed in compound agrument)${Boff}"
        E_message "$msg"
        result=2 ;
        ;;
    esac
  done
}

check_cmdline_override()
{
# Set flag CMDLINE_OVERRIDE at the first use of one of [ CONTENT | SCRIPTS | PACKAGES ]
#   or one of [ PUT | GET ] or one of [ QUIET | VERBOSE ] and default the others in
#   that category to $FALSE at that point. This is because if one of them is specified
#   on the command line, we will attend only to those in that category activated by the
#   command line. (e.g. if PUT is specified by the command line, then we will set GET
#   to $FALSE which it will remain unless it too is specified on the command line and
#   thus set $TRUE outside this function.  Note: PROGRESS, if activated on the command
#   line further overrides QUIET and implies VERBOSE
d_message "Checking for command line override for option [${1}]:" 2

if [[ ! $CMDLINE_OVERRIDE_PUTGET ]] || [[ ! $CMDLINE_OVERRIDE_CATEGORY ]] || \
   [[ ! $CMDLINE_OVERRIDE_QV ]] || [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
then
  case "$1" in
    "-P" | "--progress"      )
      if [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
      then
        CMDLINE_OVERRIDE_PROGRESS=$TRUE
        PROGRESS=$TRUE; VERBOSE=$TRUE   ; QUIET=$FALSE
      fi ;;
    "-v" | "--verbose"       )
      if [[ ! $CMDLINE_OVERRIDE_QV ]] && [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
      then
        CMDLINE_OVERRIDE_QV=$TRUE
        VERBOSE=$TRUE   ; QUIET=$FALSE
      fi ;;
    "-q" | "--quiet"         )
      if [[ ! $CMDLINE_OVERRIDE_QV ]] && [[ ! $CMDLINE_OVERRIDE_PROGRESS ]]
      then
        CMDLINE_OVERRIDE_QV=$TRUE
        # quiet can only turn off progress if it alone (of q v P) is set on the command line
        VERBOSE=$FALSE   ; QUIET=$TRUE;  PROGRESS=$FALSE
      fi ;;
    "-p" | "--put"           )
      if [[ ! $CMDLINE_OVERRIDE_PUTGET ]]
      then
        CMDLINE_OVERRIDE_PUTGET=$TRUE
        PUT=$TRUE     ; GET=$FALSE
      fi ;;
    "-g" | "--get"           )
      if [[ ! $CMDLINE_OVERRIDE_PUTGET ]]
      then
        CMDLINE_OVERRIDE_PUTGET=$TRUE
        PUT=$FALSE    ; GET=$TRUE
      fi ;;
    "-c" | "--content"       )
      if [[ ! $CMDLINE_OVERRIDE_CATEGORY ]]
      then
        CMDLINE_OVERRIDE_CATEGORY=$TRUE
        CONTENT=$TRUE  ; SCRIPTS=$FALSE  ; PACKAGES=$FALSE
      fi ;;
    "-s" | "--scripts"       )
      if [[ ! $CMDLINE_OVERRIDE_CATEGORY ]]
      then
        CMDLINE_OVERRIDE_CATEGORY=$TRUE
        CONTENT=$FALSE ; SCRIPTS=$TRUE   ; PACKAGES=$FALSE
      fi ;;
    "-k" | "--packages"      )
      if [[ ! $CMDLINE_OVERRIDE_CATEGORY ]]
      then
        CMDLINE_OVERRIDE_CATEGORY=$TRUE
        CONTENT=$FALSE ; SCRIPTS=$FALSE  ; PACKAGES=$TRUE
      fi ;;
    *                        ) E_message "Error in command line argument override of config/default"; exit 1 ;;
  esac
  d_message "${BWon}Overrode [$1]:${Boff}" 2
else
  d_message "${BWon}Override necessary not necessary for [$1]:${Boff}" 2
fi
d_message "  ${BBon}CMDLINE_OVERRIDE_PUTGET=[$(status_color $CMDLINE_OVERRIDE_PUTGET)$(TrueFalse $CMDLINE_OVERRIDE_PUTGET)${BBon}]${Boff}" 3
d_message "  ${BBon}CMDLINE_OVERRIDE_CATEGORY=[$(status_color $CMDLINE_OVERRIDE_CATEGORY)$(TrueFalse $CMDLINE_OVERRIDE_CATEGORY)${BBon}]${Boff}" 3
d_message "  ${BBon}CMDLINE_OVERRIDE_QV=[$(status_color $CMDLINE_OVERRIDE_QV)$(TrueFalse $CMDLINE_OVERRIDE_QV)${BBon}]${Boff}" 3
d_message "  ${BBon}CMDLINE_OVERRIDE_PROGRESS=[$(status_color $CMDLINE_OVERRIDE_PROGRESS)$(TrueFalse $CMDLINE_OVERRIDE_PROGRESS)${BBon}]${Boff}" 3
}

# ---[ display config ]-------------------------------------------
display_config()
{
/bin/echo
/bin/echo -e "${LBon}Configuration from [ ${BYon}${config_file} ${LBon}] and command line:${Boff}"
/bin/echo
/bin/echo -e "${BGon}DELETE${BBon}....................: $(status_color $DELETE)$(TrueFalse $DELETE)${Boff}"
/bin/echo -e "${BGon}PROGRESS${BBon}..................: $(status_color $PROGRESS)$(TrueFalse $PROGRESS)${Boff}"
/bin/echo -e "${BGon}QUIET${BBon}.....................: $(status_color $QUIET)$(TrueFalse $QUIET)${Boff}"
/bin/echo -e "${BGon}VERBOSE${BBon}...................: $(status_color $VERBOSE)$(TrueFalse $VERBOSE)${Boff}"
/bin/echo -e "${BGon}verbosity${BBon}.................: ${Boff}${verbosity}"
/bin/echo
/bin/echo -e "${BGon}PUT${BBon}.......................: $(status_color $PUT)$(TrueFalse $PUT)${Boff}"
/bin/echo -e "${BGon}GET${BBon}.......................: $(status_color $GET)$(TrueFalse $GET)${Boff}"
/bin/echo -e "${BGon}TARGETS${BBon}...................: ${BYon}${TARGETS[@]}${Boff}"
/bin/echo -e "${BGon}EXCLUDE${BBon}...................: ${BYon}${EXCLUDE[@]}${Boff}"
/bin/echo
/bin/echo -e "${BGon}rsync OPTS1${BBon}...............: ${BWon}$OPTS1${Boff}"
/bin/echo -e "${BGon}rsync OPTS2${BBon}...............: ${BWon}$OPTS2${Boff}"
/bin/echo
/bin/echo -e "${BMon}CONTENT${BBon}...................: $(status_color $CONTENT)$(TrueFalse $CONTENT)${Boff}"
/bin/echo -e "${BBon}MyContentROOT.............: ${BWon}${MyContentROOT}${Boff}"
/bin/echo -e "${BBon}content_serverlist........: ${BWon}${content_serverlist}${Boff}"
/bin/echo -e "${BBon}content_folderlist........: ${BWon}${content_folderlist}${Boff}"
/bin/echo
/bin/echo -e "${BMon}SCRIPTS${BBon}...................: $(status_color $SCRIPTS)$(TrueFalse $SCRIPTS)${Boff}"
/bin/echo -e "${BBon}pull_scripts_serverlist...: ${BWon}${pull_scripts_serverlist}${Boff}"
/bin/echo -e "${BBon}push_scripts_serverlist...: ${BWon}${push_scripts_serverlist}${Boff}"
/bin/echo -e "${BBon}local_scripts_folder......: ${BWon}${local_scripts_folder}${Boff}"
/bin/echo -e "${BBon}remote_scripts_folder.....: ${BWon}${remote_scripts_folder}${Boff}"
/bin/echo
/bin/echo -e "${BMon}PACKAGES${BBon}..................: $(status_color $PACKAGES)$(TrueFalse $PACKAGES)${Boff}"
/bin/echo -e "${BBon}MyPackagesROOT............: ${BWon}${MyPackagesROOT}${Boff}"
/bin/echo -e "${BBon}pull_packages_serverlist..: ${BWon}${pull_packages_serverlist}${Boff}"
/bin/echo -e "${BBon}push_packages_serverlist..: ${BWon}${push_packages_serverlist}${Boff}"
/bin/echo -e "${BBon}local_packages_folder.....: ${BWon}${local_packages_folder}${Boff}"
/bin/echo -e "${BBon}remote_packages_folder....: ${BWon}${remote_packages_folder}${Boff}"
/bin/echo
/bin/echo -e "${BGon}Generic Pull command${BBon}......: ${Boff}/usr/bin/rsync $OPTS1 $OPTS2 rsync://<server>/<remote_folder> ${MyContentROOT}/<local_folder>"
/bin/echo -e "${BGon}Generic Push command${BBon}......: ${Boff}/usr/bin/rsync $OPTS1 $OPTS2 ${MyContentROOT}/<local_folder>/ rsync://<server>/<remote_folder>"
/bin/echo -e "${BBon}                            [  --exclude option to be assembled separately for each content, scripts, packages  ]${Boff}"
/bin/echo

}

# ---[ display useage message ]-------------------------------------------
useage()
{
   /bin/echo -e $BGon"Useage: cloudsync [option] [function] [category(ies)] [target(s)] [exclude(s)]"$Boff
   /bin/echo -e " ${LBon}Command line options:${Boff}"
   /bin/echo -e "  "$BBon"[-P | --progress]"$Boff"...............display progress during transfer"
   /bin/echo -e "  "$BBon"[-v | --verbose]"$Boff"................increase verbosity"
   /bin/echo -e "  "$BBon"[-q | --quiet]"$Boff"..................supress non-error messages"
   /bin/echo -e "  "$BBon"[-h | --help]"$Boff"...................print this text"
   /bin/echo -e " ${LBon}Command line functions:${Boff}"
   /bin/echo -e "  "$BBon"[-p | --put]"$Boff"....................put (push) to remote receiver"
   /bin/echo -e "  "$BBon"[-g | --get]"$Boff"....................get (pull) from remote receiver"
   /bin/echo -e "  "$BBon"[-d | --delete]"$Boff".................force delete from receiver"
   /bin/echo -e " ${LBon}Command line category:${Boff}"
   /bin/echo -e "  "$BBon"[-c | --content]"$Boff"................sync server content directories"
   /bin/echo -e "  "$BBon"[-s | --scripts]"$Boff"................sync local scripts"
   /bin/echo -e "  "$BBon"[-k | --packages]"$Boff"...............sync binary packages"
   /bin/echo -e " ${LBon}Command line target(s):${Boff}"
   /bin/echo -e "  "$BBon"[-t | --targets <targetlist>]"$Boff"...list of remote sync nodes"
   /bin/echo -e " ${LBon}Command line exclude(s):${Boff}"
   /bin/echo -e "  "$BBon"[-x | --exclude <pattern(s)>]"$Boff"...exclude <pattern> from sync"
   /bin/echo
   /bin/echo -e "  "$BYon"Notes: "$Boff
   /bin/echo -e "  "$BYon" 1)"$Boff" Options -t and -x, if used, must be followed by argument(s)"
   /bin/echo -e "    which will read as space-delimitted positional parameters and"
   /bin/echo -e "    subsequently managed as an array of target nodes and an array"
   /bin/echo -e "    of patterns respectively"
   /bin/echo -e "  "$BYon" 2)"$Boff" cloudsync will sync with target nodes each specified category"
   /bin/echo -e "    (content, scripts, packages) as directed in cloudsync.conf"
   /bin/echo -e "    (which it looks for in PWD, /usr/local/sbin, and /etc --"
   /bin/echo -e "    in that order; each overrides former if more than one is found"
   /bin/echo -e "  "$BYon" 3)"$Boff" Command line specifications will override .conf file settings"
   /bin/echo -e "    for put/get, for content/scripts/packages, and for"
   /bin/echo -e "    progress/verbose/quiet if any of each is set via command line"
   /bin/echo -e "  "$BYon" 4)"$Boff" --progress implies --verbose, overrides --quiet;"
   /bin/echo -e "    --verbose is default and overrides --quiet if both are selected"
   /bin/echo -e "  "$BYon" 5)"$Boff" Use the -d | --delete option to force deletion on"
   /bin/echo -e "    the reciever of files not present on the sender.  Use with CAUTION"
   /bin/echo -e "    NOTE: ALL remote nodes must be targeted. This is topologically"
   /bin/echo -e "    a \"hub\" function, since any federated \"server/hub\" or remote"
   /bin/echo -e "    \"client/spoke\" not specifically targeted will simply replace the"
   /bin/echo -e "    deleted files"
   /bin/echo
   /bin/echo -e "  "$BYon"Examples: "$Boff
   /bin/echo -e "  "$BWon"  cloudsync -vvv -psd -t gilgamesh enkidu --exclude *.joe *-joe.txt "$Boff
   /bin/echo -e "    will verbosely push-sync/delete scripts with remote targets"
   /bin/echo -e "    gilgamesh and enkidu, excluding from transfer any files matching"
   /bin/echo -e "    either of the patterns '*.joe' or '*-joe.txt'"
   /bin/echo
   /bin/echo -e "  "$BWon"  cloudsync -pgck"$Boff
   /bin/echo -e "    will pull- and push-sync (in that order) content and binary packages"
   /bin/echo -e "    with remote targets specified in cloudsync.conf"
   /bin/echo
   /bin/echo -e "  "$BWon"  cloudsync -pgck --delete --target $all_my_nodes"$Boff
   /bin/echo -e "    will push-sync/delete and pull-sync (in that order, since --delete is"
   /bin/echo -e "    specified) content and binary packages, with remote targets listed"
   /bin/echo -e "    in the variable ${all_my_nodes}"
   /bin/echo
}

# ---[ rsync() -- this is the main sync engine ]--------------------------------------------------------------
r_sync()  #args: source destinaton opts
{
  rsync_args="$1 $2 $OPTS1 $OPTS2${excludestring}"
  message "${BGon}Executing:${Boff} /usr/bin/rsync ${rsync_args}"
  /usr/bin/rsync ${rsync_args}
}

# ---[ Pull ]-------------------------------------------------------------------------------------------------
pull_sync()
{
  message "${BYon}---[ ${BGon}pull${BBon}-synchronizing ${BGon}$1${BBon} with ${BGon}${server}${BYon} ]-----------------${Boff}"
  [[ $DEBUG ]] && /usr/bin/logger -p cron.notice "[cloudsync] pull-synchronizing $1 with ${server}"
  r_sync "rsync://${server}/${remote_folder}" "${local_folder}" && \
    message "Done pull sync of $1 with $server" || \
    E_message "Error in pull sync of $1 with $server"
  /bin/echo
}

pull_content_sync()
{
  message "${BYon}---[ ${BGon}pull${BBon}-synchronizing ${BGon}${folder}${BBon} with ${BGon}${server}${BYon} ]-----------------${Boff}"
  [[ $DEBUG ]] && /usr/bin/logger -p cron.notice "[cloudsync] pull-synchronizing ${folder} with ${server}"
  r_sync "rsync://${server}/${folder}" "${MyContentROOT}/${folder}" && \
    message "Done pull sync of ${folder} with ${server}" || \
    E_message "Error in pull sync of ${folder} with ${server}"
  /bin/echo
}

# ---[ Push ]-------------------------------------------------------------------------------------------------
push_sync()
{
  message "${BYon}---[ ${BGon}push${BBon}-synchronizing ${BGon}$1${BBon} with ${BGon}${server}${BYon} ]-----------------${Boff}"
  [[ $DEBUG ]] && /usr/bin/logger -p cron.notice "[cloudsync] push-synchronizing $1 with ${server}"
  r_sync "${local_folder}/" "rsync://${server}/${remote_folder}" && \
    message "Done push sync of $1 with $server" || \
    E_message "Error in push sync of $1 with $server"
 /bin/echo
}

push_content_sync()
{
  message "${BYon}---[ ${BGon}push${BBon}-synchronizing ${BGon}${folder}${BBon} with ${BGon}${server}${BYon} ]-----------------${Boff}"
  [[ $DEBUG ]] && /usr/bin/logger -p cron.notice "[cloudsync] push-synchronizing ${folder} with ${server}"
  r_sync "${MyContentROOT}/${folder}/" "rsync://${server}/${folder}" && \
    message "Done push sync of  ${folder} with ${server}" || \
    E_message "Error in push sync of ${folder} with ${server}"
  /bin/echo
}

# ---[ Sync script and packages source and destination folders on list of servers ]---------------------------
sync_loop()
{
separator "$1" "cloudsync"
case $1 in
  "scripts"  )
    # no additional excludes known
    pull_serverlist="${pull_scripts_serverlist}"
    push_serverlist="${push_scripts_serverlist}"
    local_folder="${local_scripts_folder}"
    remote_folder="${remote_scripts_folder}"
    d_message "chose scripts sync case" 2
    ;;
  "packages" )
    EXCLUDE+=("Packages" "*.html")
    pull_serverlist="${pull_packages_serverlist}"
    push_serverlist="${push_packages_serverlist}"
    local_folder="${local_packages_folder}"
    remote_folder="${remote_packages_folder}"
    d_message "chose packages sync case" 2
    ;;
  *          )
    /usr/bin/logger -p cron.notice "Error in sync_loop for $1; job not completed"
    exit
    ;;
esac

# finish assembling excludestring
excludestring=""; for x in ${EXCLUDE[@]}; do excludestring+=" --exclude '$x'"; done

# Normally, if both are set, we pull first and then push to improve efficiency of distribution across cloud
#  However, if delete is selected, then push(delete) first, and then pull
if [[ $DELETE ]]
then
  d_message "push_serverlist: ${push_serverlist}" 2
  [[ $PUT ]] && for server in ${push_serverlist}; do push_sync $1; done
  d_message "pull_serverlist: ${pull_serverlist}" 2
  [[ $GET ]] && for server in ${pull_serverlist}; do pull_sync $1; done
else
  d_message "pull_serverlist: ${pull_serverlist}" 2
  [[ $GET ]] && for server in ${pull_serverlist}; do pull_sync $1; done
  d_message "push_serverlist: ${push_serverlist}" 2
  [[ $PUT ]] && for server in ${push_serverlist}; do push_sync $1; done
fi
}

# ---[ Sync script and packages source and destination folders on list of servers ]---------------------------
sync_content_loop()
{
separator "content" "cloudsync"
# finish assembling excludestring
EXCLUDE+=("*~")
excludestring=""; for x in ${EXCLUDE[@]}; do excludestring+=" --exclude '$x'"; done

for server in ${content_serverlist}
do
  for folder in ${content_folderlist}
  do
    # Normally, we pull first and then push to improve efficiency of distribution across cloud
    #  However, if delete is selected, then push(delete) first, and then pull
    if [[ $DELETE ]]
    then
      [[ $PUT ]] && push_content_sync
      [[ $GET ]] && pull_content_sync
    else
      [[ $GET ]] && pull_content_sync
      [[ $PUT ]] && push_content_sync
    fi
  done
done
}

#---[ main script ]-----------------------------------------------
CLR; CUP 1 1; echo
separator "Running cloudsync-${BUILD}"
checkroot

set_defaults
source ${config_file}
normalize_lists
process_cmdline $@
display_config

#exit

sh_countdown 5

[[ $CONTENT ]] && sync_content_loop || message "content sync not requested"
[[ $SCRIPTS ]] && sync_loop "scripts" || message "script sync not requested"

if [[ $PACKAGES ]]
then
  # first, force correct permissions on all my package files
  message "Setting proper ownership and permissions on all my package files"
  /bin/chown -R portage:portage ${local_packages_folder}/
  /usr/bin/find ${local_packages_folder}/ -type d -exec /bin/chmod 755 '{}' \;
  /usr/bin/find ${local_packages_folder}/ -type f -exec /bin/chmod 644 '{}' \;
  sync_loop "packages"
  # force correct permissions on all my package files again
  message "Setting proper ownership and permissions on all my package files"
  /bin/chown -R portage:portage ${local_packages_folder}/
  /usr/bin/find ${local_packages_folder}/ -type d -exec /bin/chmod 755 '{}' \;
  /usr/bin/find ${local_packages_folder}/ -type f -exec /bin/chmod 644 '{}' \;
  # update the local ${local_packages_folder}/Packages file - so it can list sync'd files properly
  message "Updating the local Packages file [${local_packages_folder}/Packages]"
  ROOT=${MyPackagesROOT} /usr/sbin/emaint binhost --fix
else
  message "packages sync not requested"
fi

/usr/bin/logger -p cron.notice "cloudsync complete."
#. /root/bin/loggit
message "Logged and Done."
