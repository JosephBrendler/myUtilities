#!/bin/bash
# Standardized Joetoo Update Sequence (jus), implemented as interactive
#   script with "resume" functionality
# Author: Joe Brendler 14 October 2020
# see version_history in ebuild's filesdir

source /usr/sbin/script_header_joetoo
source /usr/sbin/script_header_joetoo_extended

# source BUILD PVR
PN=$(basename $0)
source /etc/${PN}/BUILD

# if /usr/share/config/ doesn't exist, fix that
[ ! -d /usr/share/config ] && mkdir -p /usr/share/config/ && message "created /usr/share/config/"

# basic configuration variables and internals
conf_varlist="CONF_DIR ELOG_DIR"
conf_varlist+=" PORTDIR PKGDIR DISTDIR PORT_LOGDIR"
conf_varlist+=" STATUS_FILE yn.EIX yn.DISTCC"
conf_varlist+=" worldfile bool.VERBOSE verbosity BUILD"
# phase 0
p0_varlist="phase yn.RESUME lv.EXCLUDE"
p0_varlist+=" yn.SYNC SYNC_TS SYNC_CMD MAX_AGE"
p0_varlist+=" yn.REGEN_OVERLAY_METADATA"
p0_varlist+=" lv.NOBINFEATURES"
# phase 1
p1_varlist="yn.UPDATE_CHECK"
# phase 2
p2_varlist="yn.USEPKG yn.USEPKGONLY yn.GETBINPKG yn.GETBINPKGONLY yn.WITH_BDEPS_Y"
p2_varlist+=" yn.NEWUSE yn.CHANGEDUSE"
p2_varlist+=" yn.GO_AHEAD yn.KEEPGOING lv.EXCLUDE"
# phase 6
p6_varlist="yn.EIX_UPDATE yn.HASKELL_UPDATER yn.MODULE_REBUILD"
p6_varlist+=" yn.PERL_CLEANER yn.PYTHON_UPDATER yn.SELINUX_RELABEL yn.RKHUNTER"
p6_varlist+=" yn.X11_MODULE_REBUILD yn.GLSA_CHECK"
p6_varlist+=" yn.EMAINT_CHECK"

# --- function blocks ------------------------------------------

source_config() {
  # source jus.conf in order to load user-configured settings (over-ride initilized defaults)
  if [[ -e /etc/jus/jus.conf ]] ; then
    CONF_DIR="/etc/jus/jus.conf"
  elif [[ -e /usr/local/sbin/jus.conf ]] ; then
    CONF_DIR="/usr/local/sbin/jus.conf"
  elif [[ -e jus.conf ]] ; then
    CONF_DIR="$(pwd)/jus.conf"
  else
    E_message "Error: no jus.conf config file found"
    exit 1
  fi
  d_message_n "Sourcing configuration file [ ${CONF_DIR} ] ..." 1
  source ${CONF_DIR} ; d_right_status $? 1
}

initialize_variables() {
  VERBOSE=$TRUE
  verbosity=3
  initialize_vars ${conf_varlist} ${p0_varlist} ${p1_varlist} ${p2_varlist} ${p6_varlist}

  # restore VERBOSE and verbosity to defaults (initialization would clear them)
  d_message_n "Restoring PN, BUILD, and verbosity ..." 1
  PN=$(basename $0) && source /etc/${PN}/BUILD && \
  VERBOSE=$TRUE && verbosity=3
  d_right_status $? 1

  # PORTDIR, PKGDIR, DISTDIR must be evaluated in this order if e.g. PKGDIR=${PORTDIR}/packages
  d_message_n "Setting default PORTDIR, PKGDIR, DISTDIR, PORT_LOGDIR, ELOG_DIR per make.conf ..." 1
  eval $( grep ^PORTDIR /etc/portage/make.conf ) && \
  eval $( grep ^PKGDIR /etc/portage/make.conf ) && \
  eval $( grep ^DISTDIR /etc/portage/make.conf ) && \
  eval $( grep ^PORT_LOGDIR /etc/portage/make.conf ) && \
  ELOG_DIR="${PORT_LOGDIR}/elog/"
  d_right_status $? 1

  # Set these to defaults, override later with config file
  d_message_n "Setting default phase, new_phase(0)  ..." 1
  phase=0 && new_phase=0 ; d_right_status $? 1

  d_message_n "Setting default NOBINFEATURES ..." 1
  NOBINFEATURES='MAKEOPTS="-j1 -l1" FEATURES=" -getbinpkg -userpriv -distcc"'
  d_right_status $? 1

  d_message_n "Setting default STATUS_FILE ..." 1
  STATUS_FILE="/root/bin/jus-status" ; d_right_status $? 1

  d_message_n "Setting default yes/no variables ..." 1
  EIX="yes" && DISTCC="yes" && SELINUX_RELABEL="no" && PERL_CLEANER="no" && \
  HASKELL_UPDATER="no" && REGEN_OVERLAY_METADATA="yes" && EIX_UPDATE="no" && \
  NEWUSE="yes" && CHANGEDUSE="no" && \
  PYTHON_UPDATER="yes" && MODULE_REBUILD="no" && \
  X11_MODULE_REBUILD="no" && RKHUNTER="no" && GLSA_CHECK="yes" && EMAINT_CHECK="yes" && \
  continue="y" && RESUME="no" && SYNC="no" && EXCLUDE="" && UPDATE_CHECK="no" && GO_AHEAD="no" && \
  KEEPGOING="yes" && USEPKG="no" && USEPKGONLY="no" && GETBINPKG="no" && GETBINPKGONLY="no" && \
  WITH_BDEPS_Y="yes"
  d_right_status $? 1

  d_message_n "Setting default sync data ..." 1
  SYNC_TS="${PORTDIR}/metadata/timestamp.chk" && SYNC_CMD="EIX_SYNC" && MAX_AGE=24
  d_right_status $? 1

  # --- Define local variables -----------------------------------
  d_message_n "Setting default world file ..." 1
  worldfile="/var/lib/portage/world" ; d_right_status $? 1

  d_message_n "Setting defaults for non-displayed variables ..." 1
  KP_FOUND=$FALSE && continue="y" && new_phase=0 && updateables=""
  d_right_status $? 1

  # Array of messages used to announce each phase
  phase_message=(
  'Sync'
  'Update-Check'
  'Emerge Updates'
  'Review news and Maintain Config Files'
  'Review elogs'
  'Handle Dependencies'
  'Final steps'
  )

  phase_function_sequence=(
  'emerge_sync'
  'update_check'
  'emerge_updates'
  'show_news; maintain_config_files'
  'showelogs'
  'handle_dependencies'
  'final_phases'
  )
}

sanity_check()
{
# veryfy the sanity of the combination of arguments on the command line
[ "$SYNC" == "yes" ] && [ "$RESUME" == "yes" ] && \
   E_message "Nonsensical option combination: sync and resume" && \
   useage && exit 1

[ "$SYNC" == "yes" ] && [ "$GO_AHEAD" == "yes" ] && \
   E_message "Dangerous option combination: sync and go_ahead" && \
   E_message "(you should never merge packages blindly, please check first)" && \
   useage && exit 1

# if both remote/local and local-only are set local-only should over-ride
[ "$GETBINPKG" == "yes" ] && [ "$GETBINPKGONLY" == "yes" ] && GETBINPKG="no"
[ "$USEPKG" == "yes" ] && [ "$USEPKGONLY" == "yes" ] && USEPKG="no"
}

process_command_line()
{
# process command line arguments (for now only -x/--exclude option can have argument(s))
last=""
d_message "processing command line with argument(s): [ ${*} ]" 2
# shift each argument into position $1 and examine it
#   process the argument or processit with its own arguments
while [ ! -z "$1" ]
do
  d_message "arg1 = [ $1 ]" 3
  # if arg begins with a single dash, process it alone
  if [ "${1:0:1}" == "-" ] && [ "${1:1:1}" != "-" ]
  then
    d_message "processing [ $1 ] alone as single-dash argument" 3
    process_argument $1
    shift
  # if arg begins with a double dash, process it alone if it is not --exclude
  elif [ "${1:0:2}" == "--" ] && [ "$1" != "--exclude" ]
  then
    d_message "processing [ $1 ] alone as double-dash non-exclude argument" 3
    process_argument $1
    shift
  # if arg begins with a double dash, and it is --exclude,
  #   then process it with its own agruments (identified by no leading - or --)
  elif [ "${1:0:2}" == "--" ] && [ "$1" == "--exclude" ]
  then
    d_message "processing [ $1 ] as --exclude, with own args:" 3
    tmp_cmd=$1
    tmp_args=""
    shift
    while [ ! -z "$1" ]
    do
      if [ "${1:0:1}" != "-" ]
      then
        d_message "adding [ $1 ] to tmp_args:" 3
        # formulate this so as to preserve internal white space between multiple exclude atoms, but to not add extra whitespace
        [ -z "${tmp_args}" ] && tmp_args=${1} || tmp_args="${tmp_args} ${1}"
      else
        d_message "non-argument [ $1 ], exiting" 2
        exit
      fi
      shift
    done
    d_message "processing [ $tmp_cmd \"$tmp_args\" ]" 1
    process_argument $tmp_cmd "$tmp_args"
  else
    # bogus argument
    d_message "bogus argument [ $1 ]" 1
    E_message "${E_BAD_ARGS}" && useage && exit 1
  fi
done
sanity_check
}

process_argument()
{
EXCLUDE=""
d_message "about to process argument(s): [ $* ]" 1
d_message "1: [ $1 ], 2: [ $2 ]" 2
# process command line argument (must be one of the following)
[ ! -z "$1" ] && case "$1" in
    "-a" | "--glsa"          ) GLSA_CHECK="yes" ;;
    "-c" | "--check"         ) UPDATE_CHECK="yes" ;;
    "-d" | "--distcc"        ) DISTCC="yes" ;;
    "-e" | "--eix"           ) EIX_UPDATE="yes" ;;
    "-g" | "--getbinpkg"     ) GETBINPKG="yes" ;;
    "-G" | "--getbinpkgonly" ) GETBINPKGONLY="yes" ;;
    "-k" | "--usepkg"        ) USEPKG="yes" ;;
    "-K" | "--usepkgonly"    ) USEPKGONLY="yes" ;;
    "-m" | "--modules"       ) MODULE_REBUILD="yes" ;;
    "-M" | "--emaint"        ) EMAINT_CHECK="yes" ;;
    "-n" | "--nodist"        ) DISTCC="no" ;;
    "-N" | "--newuse"        ) NEWUSE="yes" ;;
    "-p" | "--perl_cleaner"  ) PERL_CLEANER="yes" ;;
    "-P" | "--python"        ) PYTHON_UPDATER="yes" ;;
    "-q" | "--quiet"         ) VERBOSE=$TRUE; [ ! $verbosity -le 0 ] && let "verbosity-=1" ; [ $verbosity -eq 0 ] && VERBOSE=$FALSE ;;
    "-r" | "--resume"        ) RESUME="yes" ;;
    "-[0-9]"                 ) RESUME="yes" ; let new_phase=${myargs:1:1};;
    "-R" | "--regen"         ) REGEN_OVERLAY_METADATA="yes" ;;
    "-s" | "--status"        ) status ; exit 0 ;;
    "-S" | "--selinux"       ) SELINUX_RELABEL="yes" ;;
    "-t" | "--rkhunter"      ) RKHUNTER="yes" ;;
    "-U" | "--changeduse"    ) CHANGEDUSE="yes" ;;
    "-v" | "--verbose"       ) VERBOSE=$TRUE; [ ! $verbosity -ge 6 ] && let "verbosity+=1" ;;
    "-w" | "--with-bdeps=y"  ) WITH_BDEPS_Y="yes" ;;
    "-x" | "--exclude"       ) EXCLUDE="${2}" ;;
    "-X" | "--X11"           ) X11_MODULE_REBUILD="yes" ;;
    "-y" | "--sync"          ) SYNC="yes" ;;
    "-Y" | "--go-ahead"      ) GO_AHEAD="yes" ;;
    "-Z" | "--keep-going"    ) KEEPGOING="yes" ;;
    "-H" | "--haskell"       ) HASKELL_UPDATER="yes" ;;
    "-h" | "--help"          ) useage ; exit 0 ;;
    "-u" | "--update-all"    ) GLSA_CHECK="yes"; EIX_UPDATE="yes"; MODULE_REBUILD="yes"; \
                               EMAINT_CHECK="yes"; PERL_CLEANER="yes"; \
                               PYTHON_UPDATER="yes"; REGEN_OVERLAY_METADATA="yes"; \
                               SELINUX_RELABEL="yes"; RKHUNTER="yes"; WITH_BDEPS_Y="yes"; \
                               X11_MODULE_REBUILD="yes"; SYNC="yes"; HASKELL_UPDATER="yes" ;;
    *                        ) process_compound_arg $1 ;;
esac
}

process_compound_arg()
{
# must begin with a single dash
[ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && useage && exit 1
# must not begin with two dashes (would have been picked in process_argument)
[ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && useage && exit 1
# strip leading dash(es)
myargs=${1##-}
# handle remaining characters in sequence
while [ -n "${myargs}" ]
do
    #handle first char
    d_message "handling compound arg [ ${myargs} ], char [ ${myargs:0:1} ]" 3
    case ${myargs:0:1} in
        "a") GLSA_CHECK="yes" ;;
        "c") UPDATE_CHECK="yes" ;;
        "d") DISTCC="yes" ;;
        "e") EIX_UPDATE="yes" ;;
        "g") GETBINPKG="yes" ;;
        "G") GETBINPKGONLY="yes" ;;
        "k") USEPKG="yes" ;;
        "K") USEPKGONLY="yes" ;;
        "m") MODULE_REBUILD="yes" ;;
        "M") EMAINT_CHECK="yes" ;;
        "n") DISTCC="no" ;;
        "N") NEWUSE="yes" ;;
        "p") PERL_CLEANER="yes" ;;
        "P") PYTHON_UPDATER="yes" ;;
        "q") VERBOSE=$TRUE; [ ! $verbosity -le 0 ] && let "verbosity-=1" ; [ $verbosity -eq 0 ] && VERBOSE=$FALSE ;;
        "r") RESUME="yes" ;;
      [0-9]) RESUME="yes" ; let new_phase=${myargs:0:1};;
        "R") REGEN_OVERLAY_METADATA="yes" ;;
        "s") status ; exit 0 ;;
        "S") SELINUX_RELABEL="yes" ;;
        "t") RKHUNTER="yes" ;;
        "U") CHANGEDUSE="yes" ;;
        "v") VERBOSE=$TRUE;  [ ! $verbosity -ge 6 ] && let "verbosity+=1" ;;
        "w") WITH_BDEPS_Y="yes" ;;
        "X") X11_MODULE_REBUILD="yes" ;;
        "Y") GO_AHEAD="yes" ;;
        "y") SYNC="yes" ;;
        "Z") KEEPGOING="yes" ;;
        "H") HASKELL_UPDATER="yes" ;;
        "u") CHANGEDUSE="yes"; NEWUSE="yes"; \
             GLSA_CHECK="yes"; EIX_UPDATE="yes"; MODULE_REBUILD="yes"; \
             EMAINT_CHECK="yes"; PERL_CLEANER="yes"; \
             PYTHON_UPDATER="yes"; REGEN_OVERLAY_METADATA="yes"; \
             SELINUX_RELABEL="yes"; RKHUNTER="yes"; WITH_BDEPS_Y="yes" \
             X11_MODULE_REBUILD="yes"; SYNC="yes"; HASKELL_UPDATER="yes" ;;
        *  ) E_message "${E_BAD_ARGS}" && useage && exit 1
esac
    #strip first char from myargs (i.e. "shift")
    myargs=${myargs:1}
done
}

useage()
{
   echo -e $BGon"Useage: jus [option]"$Boff
   echo -e " ${BWon}Command line options:${Boff}"
   echo -e "   ${BYon}Options for all phases${Boff}"
   echo -e "    "$BBon"[-s | --status]"$Boff"...........print next phase in update sequence"
   echo -e "    "$BBon"[-r | --resume]"$Boff"...........resume update sequence at next phase"
   echo -e "    "$BBon"[-[0-9]]"$Boff"..................resume update sequence at this phase"
   echo -e "    "$BBon"[-v | --verbose]"$Boff"..........increase verbosity"
   echo -e "    "$BBon"[-q | --quiet]"$Boff"............decrease verbosity"
   echo -e "    "$BBon"[-h | --help]"$Boff".............print this message"
   echo -e "   ${BYon}Options for Phase 0 - ${phase_message[0]}${Boff}"   ## phase 0 - Sync
   echo -e "    "$BBon"[-y | --sync]"$Boff".............force sync portage tree"
   echo -e "    "$BBon"[-R | --regen]"$Boff"............regenerate portage tree metadata (including overlays) "
   echo -e "   ${BYon}Options for Phase 1 - ${phase_message[1]}${Boff}"   ## phase 1 - Update-Check
   echo -e "    "$BBon"[-c | --check]"$Boff"............check for and list updateable installed packages"
   echo -e "   ${BYon}Options for Phase 2 - ${phase_message[2]}${Boff}"   ## phase 2 - Emerge Updates
   echo -e "    "$BBon"[-d | --distcc]"$Boff"...........use distcc distributed compiling support"
   echo -e "    "$BBon"[-n | --nodist]"$Boff"...........do not use distcc distributed compiling support"
   echo -e "    "$BBon"[-N | --newuse]"$Boff"...........rebuild packages with added/changed USE"
   echo -e "    "$BBon"[-g | --getbinpkg]"$Boff"........use local and remote binary packages and ebuilds"
   echo -e "    "$BBon"[-G | --getbinpkgonly]"$Boff"....use local and remote binary packages only"
   echo -e "    "$BBon"[-k | --usepkg]"$Boff"...........use local binary packages and ebuilds"
   echo -e "    "$BBon"[-K | --usepkgonly]"$Boff".......use local binary packages only"
   echo -e "    "$BBon"[-U | --changeduse]"$Boff".......rebuild packages with changed USE flags"
   echo -e "    "$BBon"[-w | --WITH_BDEPS_Y]"$Boff".....emerge with build-time dependencies"
   echo -e "    "$BBon"[-x | --exclude <atom>]"$Boff"...exclude <atom> from emerge"
   echo -e "    "$BBon"[-Y | --go-ahead]"$Boff".........automatically continue to next phases"
   echo -e "    "$BBon"[-Z | --keep-going]"$Boff".......on emerge failure, try to keep emerging other packages"
   echo -en "   ${BYon}Options for Phase 3 - ${phase_message[3]}${Boff}"   ## phase 3 - Review news and Maintain Config Files
   echo -e " "$LBon"[future development]"$Boff
   echo -en "   ${BYon}Options for Phase 4 - ${phase_message[4]}${Boff}"   ## phase 4 - Review elogs
   echo -e " "$LBon"[future development]"$Boff
   echo -en "   ${BYon}Options for Phase 5 - ${phase_message[5]}${Boff}"   ## phase 5 - Handle Dependencies
   echo -e " "$LBon"[future development]"$Boff
   echo -e "   ${BYon}Options for Phase 6 - ${phase_message[6]}${Boff}"   ## phase 6 - Final steps
   echo -e "    "$BBon"[-a | --glsa]"$Boff".............run glsa-check -vp affected"
   echo -e "    "$BBon"[-e | --eix]"$Boff"..............run eix-update"
   echo -e "    "$BBon"[-m | --modules]"$Boff"..........run emerge @module-rebuild"
   echo -e "    "$BBon"[-M | --emaint]"$Boff"...........run emaint --check all"
   echo -e "    "$BBon"[-p | --perl_cleaner]"$Boff".....run perl-cleaner --all"
   echo -e "    "$BBon"[-P | --python]"$Boff"...........run python-updater"
   echo -e "    "$BBon"[-S | --selinux]"$Boff"..........redo selinux lablels"
   echo -e "    "$BBon"[-t | --rkhunter]"$Boff".........run rkhunter --propupd"
   echo -e "    "$BBon"[-X | --X11]"$Boff"..............run emerge @x11-module-rebuild"
   echo -e "    "$BBon"[-H | --haskell]"$Boff"..........run haskell-updater"
   echo
   echo -e "  "$BYon"Notes: "$Boff
   echo -e "  "$BYon" 1)"$Boff" --status and --resume both identify the next phase"
   echo -e "    (which is the last successfully completed phase + 1)"
   echo -e "  "$BYon" 2)"$Boff" --sync is set automatically if portage tree is older"
   echo -e "    than MAX_AGE (set in jus.conf)"
   echo -e "  "$BYon" 3)"$Boff" option(s) -[k|K|g|G] function as explained in gentoo binary package guide:"
   echo -e "    https://wiki.gentoo.org/wiki/Binary_package_guide"
   echo -e "  "$BYon" 4)"$Boff" option(s) -[d|n] are mutually exclusive opposites"
   echo -e "    if both used, DISTCC will be reset yes/no by the right-most cmdline"
   echo -e "  "$BYon" 5)"$Boff" option(s) -[N|U] are similar. Subsequent depclean may require NEWUSE, but"
   echo -e "    CHANGEDUSE instead can avoid unnecessary rebuilds.  See these references for more info:"
   echo -e "      https://forums.gentoo.org/viewtopic-p-8719502.html?sid=1e3d721ff79585b67bb9255a51c01f3f"
   echo -e "      https://www.reddit.com/r/Gentoo/comments/16ua43e/changeduse_vs_newuse/"
   echo -e "      https://wiki.gentoo.org/wiki/Gentoo_Cheat_Sheet"
   echo -e "      https://wiki.gentoo.org/wiki/Emerge"
   echo -e "      https://wiki.gentoo.org/wiki/Full_manpages/emerge"
   echo
}

status()
{
    read phase < ${STATUS_FILE}
    echo "Next phase: ${phase} -- ${phase_message[${phase}]}"
    echo
}

display_config()
{
message "${BWon}Using configuration data below: ${Boff}"
longest=$(get_longest ${conf_varlist} ${p0_varlist} ${p1_varlist} ${p2_varlist} ${p6_varlist})
echo -e ${BYon}"Global Congiguration${Boff}"
display_vars ${longest} ${conf_varlist}
echo -e ${BYon}"Options for Phase 0 - ${phase_message[0]}${Boff}"   ## phase 0 - Sync
display_vars ${longest} ${p0_varlist}
echo -e ${BYon}"Options for Phase 1 - ${phase_message[1]}${Boff}"   ## phase 1 - Update Check
display_vars ${longest} ${p1_varlist}
echo -e ${BYon}"Options for Phase 2 - ${phase_message[2]}${Boff}"   ## phase 2 - Emerge Updates
display_vars ${longest} ${p2_varlist}
echo -e ${BYon}"Options for Phase 3 - ${phase_message[3]}${Boff}"   ## phase 3 - Review news and Maintain Configs
echo -e ${BYon}"Options for Phase 4 - ${phase_message[4]}${Boff}"   ## phase 4 - Review elogs
echo -e ${BYon}"Options for Phase 5 - ${phase_message[5]}${Boff}"   ## phase 5 - Handle Dependencies
echo -e ${BYon}"Options for Phase 6 - ${phase_message[6]}${Boff}"   ## phase 6 - Final Steps
display_vars ${longest} ${p6_varlist}
}

check_timestamp()
{
    # compute age in hours of timestamp on file passed as argument
    # set $SYNC flag to "yes" if timestamp is older than $MAX_AGE allows
    SPM=60   # seconds per minute
    MPH=60   # minutes per hour
    agehours=$(( $(( $(date -u +%s) - $(date -u -r $1 +%s))) / $SPM / $MPH ))
    #if it's old, set SYNC flag
    message "Portage tree last sync'd $agehours hours ago"
    [ "$SYNC" == "yes" ] && \
        message "option: sync set by command line" || \
        message "option: sync not set by command line"
    if [ $agehours -gt $MAX_AGE ]
    then
        if [ "$GO_AHEAD" == "yes" ]
        then
            # sanity-check: unwise to go-ahead immediately after sync
            #  without checking what will be merged
            E_message "You selected option: go-ahead " && \
            E_message "but you also set MAX_AGE: $MAX_AGE hours in jus.conf" && \
            E_message "The latter would cause this program to sync and then auto-emerge non-interactively" && \
            E_message "(you should never merge packages blindly, please check first)" && \
            useage && exit 1
        else
            SYNC="yes" && \
            message "portage tree sync required by MAX_AGE ($MAX_AGE hours) set in jus.conf"
        fi
    else
        message "portage tree sync not required by MAX_AGE ($MAX_AGE hours) set in jus.conf"
    fi
}

emerge_sync()
{
    # check to see if portage tree is up to date
    # if timestamp of last emerge --sync is old, do a new one
    check_timestamp "$SYNC_TS"
    if [ "$SYNC" == "yes" ]
    then
        fixpackages   # Perform package move updates for all packages
        case ${SYNC_CMD} in
            "WEBRSYNC" ) message "Running emerge-webrsync... " && emerge-webrsync ;;
            "SYNC"     ) message "Running emerge --sync... " && emerge --sync ;;
            "EIX_SYNC" ) message "Running eix-sync..." && eix-sync ;;
            *          ) E_message "Error: invalid sync option [ $SYNC_CMD ]" ; return 1 ;;
        esac
        [ "${REGEN_OVERLAY_METADATA}" == "yes" ] && message "Running emerge --regen ..." && emerge --regen
    else
        message "Not running a sync for portage tree."
    fi
    return 0
}

update_check()
{
  # Beginning with ver 6, just check for major upgrades in key packages
  # (linux-headers, glibc, binutils, libtool, gcc) and branch to full rebuild

#    'sys-devel/libtool'

  key_packages=(
    'sys-kernel/linux-headers'
    'sys-libs/glibc'
    'sys-devel/binutils'
    'sys-devel/gcc-config'
    'dev-build/libtool'
    'sys-devel/gcc'
    )
  KP_FOUND=${FALSE}

  # first populate the updateables list (note, calling script has already run emerge_sync()
  if [ "$EIX" == "yes" ]
  then
    if [[ "$SYNC_CMD" != "EIX_SYNC" ]]
    then
      ### make sure the index is current
      d_message "${BMon}running eix-update to ensure index is up to date${Boff}" 2 ;
      eix-update ;
    else
      d_message "${BMon}eix-update not needed -- eix-sync should have already done it -- continuing...${Boff}" 2 ;
    fi
    d_message "EIX=[$EIX]; assiging updateables with \"eix -u\"" 2 ;
    updateables=($(eix -u#)) ;
  else
    d_message "EIX=[$EIX]; assigning updateables with \"emerge -puDN world | grep ...\" please wait..." 2 ;
    updateables=($(for x in $(emerge -puDN world | grep '\[ebuild' | cut -c18- | cut -d' ' -f1); do qatom -F %{CATEGORY}/%{PN} $x; done)) ;
  fi

  # now determine if any key packages are in the updatables list
  updateablecount=${#updateables[@]}
  message "${BWon}There are $updateablecount ${LBon}updateable installed${BWon} packages:${Boff}"
  for ((i=0; i<${updateablecount}; i++))
  do
    pkg_color=${BGon}
    # determine if this is a key package using bs() tool in script_header_joetoo_extended
    # note: bs() is "noisy" so quiet it down here
    if [ $verbosity -le 3 ] ; then
      depth=0; ( VERBOSE=$FALSE verbosity=0 bs ${updateables[i]} 0 ${#key_packages[@]} ${key_packages[@]} )
    else
      depth=0; bs ${updateables[i]} 0 ${#key_packages[@]} ${key_packages[@]}
    fi
    d_message "$i ${updateables[i]} $result" 3
    [[ ${result} -gt 0 ]] && KP_FOUND=${TRUE} && pkg_color=${BRon}
    echo -e "   ${pkg_color}${updateables[i]}${Boff}"
    [[ ${result} -gt 0 ]] && echo -n "       " && eix -uc ${updateables[i]}
  done
  if [[ ${KP_FOUND} ]]
  then
    echo

    update_message="${BRon}  **  ${BYon}There is a key package to update\n" \
    update_message+="  --> ${BRon}if this is a major version upgrade, ${BWon}exit ${BRon}and run a ${BWon}rebuild ${BRon}sequence ${BYon}(rus)${Boff}\n" \
    update_message+="  --> ${BMon}if binary package server is updated, ${BWon}rebuild toolchain${BMon} and then run ${BGon}emerge -avbgke world --keep-going${Boff}"
  else
    update_message="${BGon}  **  ${BYon}There are no key pakages to update\n" \
    update_message+="  --> ${BGon}ok to continue update sequence${Boff}"
  fi
  message "${update_message}"
  d_message "done with update_check. returning with answer = [ $answer ]" 3
  return 0
}

emerge_updates()
{
    # assemble the emerge option string and message with baseline options (note --oneshot prevents jus
    #   from just adding all updateable packages to the world favorites file)
    OPTS1="uvD"
    OPTS2=""
    MSG="emerging updates"
    if [ ! "${GO_AHEAD}" == "yes" ]
    then
        OPTS1="a"${OPTS1}
        MSG+=" interactively"
    else
        MSG+=" non-interactively"
    fi
    [ "${NEWUSE}" == "yes" ] && OPTS1+="N"
    [ "${CHANGEDUSE}" == "yes" ] && OPTS1+="U"
    [ "${USEPKG}" == "yes" ] && OPTS1+="k"
    [ "${USEPKGONLY}" == "yes" ] && OPTS1+="K"
    [ "${GETBINPKG}" == "yes" ] && OPTS1+="g"
    [ "${GETBINPKGONLY}" == "yes" ] && OPTS1+="G"
    [ "${KEEPGOING}" == "yes" ] && OPTS2+=" --keep-going"
    [ "${WITH_BDEPS_Y}" == "yes" ] && OPTS2+=" --with-bdeps=y"

    # add --binpkg-respect-use=y and --binpkg-changed-deps=y universally (for now anyway)
    OPTS2+=" --binpkg-respect-use=y --binpkg-changed-deps=y"

    # if verbose, use --verbose-conflicts
    [ $verbosity -ge 3 ] && OPTS2+=" --verbose-conflicts"

    # if we have an exclude, put it on the end of the command line
    [ ! -z "${EXCLUDE}" ] && OPTS2+=" --exclude ${EXCLUDE}"

    message "${MSG}"
    # first, emerge the packages that do not like distcc (if any need it)
    # then, emerge the packages that do like distcc (if any need it)
    [[ "$DISTCC" == "yes" ]] && MyCMD='FEATURES="${FEATURES} distcc" ' || MyCMD=""
    MyCMD+="emerge -${OPTS1} @world${OPTS2}" && \
    message "${BWon}About to run - [ ${BRon}${MyCMD}${BWon} ]${Boff}" && \
    eval ${MyCMD} || return 1
    return 0
}

show_news()
{
    # display any news...
    message "The following news has been generated:"
    eselect news read new
    echo
}

maintain_config_files()
{
    # run dispatch-conf to maintain configs, if this is necessary
    # if the optional go-ahead flag is set, skip this (remind user later)
    if $( [[ -z "$(find /etc/ -iname '*._cfg***')" ]] && \
       [[ -z "$(find /usr/share/config/ -iname '*._mrg***')" ]] )
    then
        message "No config files need maintenance."
    else
        if [ ! "$GO_AHEAD" == "yes" ]     # note: use of the GO_AHEAD option will cause this phase to be skipped
        then
            message "Launching dispatch-conf to maintain the following config files:"
            echo $(find /etc/ -iname '*._cfg***')
            dispatch-conf
        fi  # not go_ahead
    fi  # find/not-find
    echo
    return 0
}

showelogs()
{
    # run show-elogs script to apply important phases from emerge notes
    # if the optional go-ahead flag is set, skip this (remind user later)
    message "Running show-elogs -l | less ..." && [ "$GO_AHEAD" == "no" ] && show-elogs -l | less && return 0 || return 1
}

handle_dependencies()
{
    echo && message "Running emerge -av --depclean ..." && emerge -av --depclean
    echo && message "Running emerge @preserved-rebuild ..." && eval ${NOBINFEATURES} emerge @preserved-rebuild
    echo && message "Running revdep-rebuild -p ..." && eval ${NOBINFEATURES} revdep-rebuild -p
    # recommend you run revdep-rebuild again if it had to
    #   emerge something to fix dependencies
    # TO DO: check if that is the case and ask this only if so
    [ "$GO_AHEAD" == "no" ] && \
    echo -en $BYon"would you like to run revdep-rebuild again, for action? (y/n) "$Boff && \
    read rerun && echo || \
    rerun="y"
    case $rerun in
        "y") eval ${NOBINFEATURES} revdep-rebuild ;;
        *) ;; # do nothing
    esac
    echo && message "Double-checking configuration files now ..." && maintain_config_files
    return 0
}

final_phases()
{
    # as indicated by option flags, perform additional phases
    [ "${EIX_UPDATE}" == "yes" ] && [ "${SYNC_CMD}" != "EIX_SYNC" ] && message "Running eix-update ..." && eix-update
    [ "${PERL_CLEANER}" == "yes" ] && message "Running ${BGon}perl-cleaner --all${Boff} ..." && eval ${NOBINFEATURES} perl-cleaner --all
    [ "${HASKELL_UPDATER}" == "yes" ] && message "Running ${BGon}haskell-updater${Boff} ..." && eval ${NOBINFEATURES} haskell-updater
    [ "${PYTHON_UPDATER}" == "yes" ] && message "Running ${BGon}eselect python update${Boff} ..." && eselect python update && eselect python cleanup
    [ "${MODULE_REBUILD}" == "yes" ] && message "Running ${BGon}emerge @module-rebuild${Boff} ..." && eval ${NOBINFEATURES} emerge @module-rebuild
    [ "${X11_MODULE_REBUILD}" == "yes" ] && message "Running ${BGon}emerge @x11-module-rebuild${Boff} ..." && eval ${NOBINFEATURES} emerge @x11-module-rebuild
    [ "${SELINUX_RELABEL}" == "yes" ] && message "Running ${BGon}rlpkg -a -r${Boff} ..." && rlpkg -a -r
    [ "${RKHUNTER}" == "yes" ] && message "Running ${BGon}rkhunter --propupd${Boff} ..." && rkhunter --propupd
    [ "${GLSA_CHECK}" == "yes" ] && message "Running ${BGon}glsa-check -vp affected${Boff} ..." && glsa-check -vp affected
    [ "${EMAINT_CHECK}" == "yes" ] && message "Running ${BGon}emaint --check all${Boff} ..." && emaint --check all

    # clean un-needed package and distribution files, run localepurge
    [ -d "${PKGDIR}" ] && message "Running ${BGon}eclean-pkg${Boff} ..." && eclean-pkg
    message "Running ${BGon}eclean-dist -d${Boff} ..." && eclean-dist -d
    message "Running ${BGon}hash -r${Boff} for current shell ..." && hash -r
    message "Running ${BGon}source /etc/profile${Boff} for current shell..." && source /etc/profile
    return 0
}

get_answer()        # set external variable $answer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [yngYNG]: " && read answer;
while ! expr "${answer:0:1}" : [yngYNG] >/dev/null;  # answer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [yngYNG]: " && read answer; done; }

# --- start main script ---------------------------------------------------------

checkroot

# display script kick-off separator
separator "${PN}-${BUILD}" $(hostname)

# initialize and set default values
initialize_variables

# override default values with config file
source_config

# process command line to set and check sanity of option flags; override config file and defaults
process_command_line $*

# display config variables from jus.conf and option flags from command line
separator "${PN}-${BUILD} (Configuration)" $(hostname)
display_config

# if calling for an update check, then sync if necessary and list updateables
[ "$UPDATE_CHECK" == "yes" ] && emerge_sync && update_check && exit 0

# if resuming, retrieve number of next phase to be performed from status file
if [ "$RESUME" == "yes" ]
then
  # assign current phase from command line or from saved status file
  [ ${new_phase} -ne 0 ] && let phase=${new_phase} || read phase < ${STATUS_FILE}
fi
[[ "$GO_AHEAD" == "yes" ]] && answer="g" || answer=""
# proceed thru each phase, as allowed to continue, until complete
for ((ph=phase; ph<${#phase_function_sequence[@]}; ph++))
do
  [[ ! $answer == [gG] ]] && answer="" && \
    separator "($ph) ${phase_message[$ph]}" "$(hostname) jus-${BUILD} Now starting" && \
    get_answer "Are you ready to execute ${BYon}(${ph}) ${phase_message[$ph]}${Boff}?"
  if [[ $answer == [YyGg] ]]
  then
    [[ $answer == [gG] ]] && GO_AHEAD="yes"
    message "About to run step [ $ph of ${#phase_function_sequence[@]} : ${phase_function_sequence[$ph]} ]"
    eval ${phase_function_sequence[$ph]}; right_status $?
    message "Completed: ($ph) ${phase_message[$ph]}"
    echo $ph > ${STATUS_FILE}
  else
    message "${BRon}User aborted${Boff} at step ${BYon}($ph) ${phase_message[$ph]}${Boff}. Quitting..."
    echo $ph > ${STATUS_FILE}
    exit
  fi
done

# if go-ahead flag was set, remind user and check for new configs and elogs
if [ "$GO_AHEAD" == "yes" ]
then
    # remind user
    message "You ran update sequence with option: go-ahead."

    # check for new config files
    if [[ ! -z "$(find /etc/ -iname '*._cfg***')" ]] || \
       [[ ! -z "$(find /usr/share/config/ -iname '*._mrg***')" ]]
    then
        E_message 'You have updated config files pending. You should run "dispatch-conf"'
        E_message "found the following pending config file updates:"
        echo $(find /etc/ -iname '*._cfg***')
    fi # found new configs

    # check for elogs
    for x in $(ls $ELOG_DIR | cut -d":" -f 3 | cut -d"-" -f 1 | sort -nu); do : ; done && \
    [ "$x" == "$(date -u +%Y%m%d)" ] && \
    E_message 'jus produced new elogs.  You should run "show-elogs"'
fi  # go_ahead

echo && message "Don't forget rebuild modules if needed\n\temerge @[x11-]module-rebuild\n"

/usr/bin/logger -p cron.notice "jus complete at $(my_short_date)."
msg="Logged and done at: "$(date +"%T %Z, %d %B %Y.")
message "$msg"
exit 0
