#!/bin/bash
#
# collect-sensitive (for system rebuild) (c) joe.brendler  2025-2072
# collect appropriate template files for crossbuild target filesystem
#

source /usr/sbin/script_header_joetoo

#-----[ variables ]---------------------------------------------------
VERBOSE=$TRUE
verbosity=2
#verbosity=4
INTERACTIVE=$TRUE

PN=$(basename $0)

varlist="PN BPN BUILD"
varlist+=" BREAK user collection_directory"
varlist+=" BREAK starting_step stopping_step statusfile"
varlist+=" bool.INTERACTIVE bool.VERBOSE verbosity"

command_sequence=(
'maybe_create_collection_directory'
'copy_dirs'
'copy_files'
'change_ownership_to_user'
'report_results'
)

msg1_sequence=(
'maybe create collection_directory'
'copy target directories'
'copy target files'
'change collection ownership to user'
'report results'
)

msg2_sequence=(
'maybe creating collection_directory'
'copying target directories'
'copying target files'
'changing collection ownership to user'
'reporting results'
)

#-----[ functions ]---------------------------------------------------

# usage() -- use the one built into /usr/sbin/script_header_joetoo_extended
# but since cli errors won't exit the main program, use this wrapper to help w that

initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."
    # initialize variables to null values
    initialize_vars ${varlist}

    # set default values
    FLAGGED=$FALSE
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing BUILD ..." 2
    source /etc/${PN}/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    # source the "Base Package Name (BPN) before sourcing script_header_joetoo_extended
    d_message_n "sourcing BPN ..." 2
    source /etc/${PN}/BPN && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )

    # set default values that will be over-ridden by sourcing ${PN}.conf
    d_message_n "setting default user = joe ..." 2
    user=joe && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default collection_directory = content_for_mkimg_$(hostname) ..." 2
    collection_directory="content_for_mkimg_$(hostname)" && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "populating source_dirs array with defaults ..." 2
    source_dirs=( '/etc/openvpn' "/home/${user}/.ssh" ) && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "populating source_files array with defaults ..." 2
    source_files=( '/etc/apache2/ssl/*.key' '/etc/apache2/ssl/*.crt' '/etc/apache2/ssl/*.pem'
        '/etc/apache2/vhosts.d/00_default_ssl_vhost.conf' '/etc/apache2/vhosts.d/00_default_vhost.conf'
        '/etc/hostname' '/etc/conf.d/hostname' '/etc/conf.d/net' '/etc/conf.d/modules'
        '/etc/wpa_supplicant/wpa_supplicant.conf' '/root/.bash_profile' "/home/${user}/.bashrc"
        "/home/${user}/.bash_profile" ) && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default starting_step = 0" 2
    starting_step=0 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default stopping_step = $(( ${#command_sequence[@]} - 1 ))" 2
    stopping_step=$(( ${#command_sequence[@]} - 1 )) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default statusfile = /root/bin/collect-sensitive_status" 2
    statusfile="/root/bin/collect-sensitive_status" && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default INTERACTIVE true ..." 2
    INTERACTIVE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE true ..." 2
    VERBOSE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = 3 ..." 2
    verbosity=3 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )

    # source this package's .conf file, to override defaults set above
    d_message_n "sourcing ${PN}.conf ..." 2
    source /etc/${PN}/${PN}.conf && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    # now source ext. script header to enable advanced script management
    message_n "sourcing /usr/sbin/script_header_joetoo_extended ..."
    source /usr/sbin/script_header_joetoo_extended && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )

    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
}

maybe_mkdir() {
    # don't flag; die over error
    my_z=$1
    message_n "maybe making collection_directory"
    if [ ! -d /home/${user}/${collection_directory%/}/${my_z} ] ; then
        mkdir -p /home/${user}/${collection_directory%/}/${my_z} && \
            echo -en " (dir ${BGon}created${Boff} dir)" || \
            die "failed to mkdir -p /home/${user}/${collection_directory%/}/${my_z}"
    else
        echo -en " (dir ${BGon}exists${Boff})"
    fi
    return 0
}

copy_dirs() {
    # flag, but don't die over error
    for ((i=0; i<${#source_dirs[@]}; i++)); do
        message_n "copying ${BMon}dir${BYon} ${source_dirs[$i]}${Boff} content"
        z=$(echo ${source_dirs[$i]} | sed 's|^/||')
        maybe_mkdir "${z}"
        echo -en " copying ..."
        if [[ ${VERBOSE} ]] && [ ${verbosity} -gt 3 ] ; then
            cp -av ${source_dirs[$i]%/}/* /home/${user}/${collection_directory%/}/${z}/
        else
            cp -a ${source_dirs[$i]%/}/* /home/${user}/${collection_directory%/}/${z}/
        fi
        result=$? ; right_status $result ; [ $result -ne 0 ] && FLAGGED=$TRUE
    done
    return 0
}

copy_files() {
    # flag, but don't die over error
    for source_file in ${source_files[@]}; do
        message_n "copying ${LBon}file${Boff} ${source_file}"
        z=$(dirname ${source_file} | sed 's|^/||')
        maybe_mkdir "${z}"
        echo -en " copying ..."
        if [[ ${VERBOSE} ]] && [ ${verbosity} -gt 3 ] ; then
            cp -av ${source_file} /home/${user}/${collection_directory%/}/${z}/
        else
            cp -a ${source_file} /home/${user}/${collection_directory%/}/${z}/
        fi
        result=$? ; right_status $result ; [ $result -ne 0 ] && FLAGGED=$TRUE
    done
    return 0
}

maybe_create_collection_directory() {
    # don't flag; die over error
    message "maybe creating collection directory"
    message_n "  collection directory: [${collection_directory}]"
    if [ -d /home/${user}/${collection_directory} ] ; then
        echo -en " (${BGon}exists${Boff})"
        right_status $TRUE
    else
        mkdir /home/${user}/${collection_directory} && result=$? && \
            echo -en " (${BGon}created${Boff})" && right_status $result || \
            die "failed to mkdir ${collection_directory} "
    fi
    return 0
}

change_ownership_to_user() {
    message_n "setting ownership of collection_directory to user: ${user} ..."
    chown -R ${user}:${user} /home/${user}/${collection_directory} && \
        right_status $? || \
        die "failed to chown -R ${user}:${user} /home/${user}/${collection_directory}"
}

report_results() {
    message "please inspect results in /home/${user}/${collection_directory} ..."
    tree -a /home/${user}/${collection_directory}
    echo
    [[ $FLAGGED ]] && return 1 || return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator "${PN}" "($(hostname))"

message "my PID: $$"

initialize_variables || die "failed to initialize variables"
validate_status_file ${statusfile} || die "Failed to validate_status_file"

# over-ride configuration with commandline input
d_message "cmdline: $*" 5
d_message "processing cmdline args: $@" 5
separator ${PN} "(process_cmdline)"
process_cmdline ${@} || usage
display_configuration || die "Failed to display_configuration"

#sanity_check  || die "Failed sanity_check"
FLAGGED=$FALSE
run_sequence ${statusfile} && message "run_sequence complete" || die "Failed to run_sequence"

#E_message "breakpoint reached"; exit

exit 0
