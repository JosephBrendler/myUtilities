#!/bin/bash
# joe brendler; 15 May 2024
# test the status leds for an sbc
#
TRUE=0
FALSE=

STATUS=0

# unlike other sbc's the x4 writes status to its internam microcontroller
# over an internal serial port.  joetoo convention is that the
# rp2040 microcontroller will have a green, yellow, and red leds
# in the same physical pin locations as other sbc, but it will use
# a custom firmware developed for the rp2040 to set these LEDs on/off
# and that fimware will read a single status byte from the serial port.
# joetoo convention will be that the x4 uses -
# status bit 0 to set the green led,
# status bit 1 to set the yellow led, and
# status bit 2 to set the red led
#
VPN_BIT=0             # maps to VPN LED (green)
SVC_BIT=1             # maps to Services LED (yellow)
TEMP_BIT=2            # maps to Temp LED (red)

SERIAL_PORT=/dev/ttyS4

blinkwait=0.2         # s wait during fluttler blink
wait_time=30          # s wait for ping

BLINKS=3              # how many times to blink

vpn_server_ip="192.168.63.1"
vpn_status_file="/root/bin/vpn_status"

cputempfile=/sys/class/thermal/thermal_zone0/temp
temp_threshold=60     # deg celcius above which to consider cpu to be hot

PROG_NAME="sbc-status-leds"

VPN_OK=$TRUE

#NEED_WORKAROUND=$TRUE
NEED_WORKAROUND=$FALSE

VERBOSE=$TRUE    # verbpse logging pm/off
verbosity=2     # 0: none; 1: restarts; 2: errors; 3: success; 4: dump vectors on restart

#-----[ override defaults with config file ]--------------------
[ -e /etc/sbc-status-leds/sbc-status-leds.conf ] && \
      source /etc/sbc-status-leds/sbc-status-leds.conf || \
      ( echo "Error: symlink /etc/sbc-status-leds/sbc-status-leds.conf does not exist" ;
        echo "use eselect sbc-status-leds to create it" )

#-----[ functions ]---------------------------------------------

send_status() {
    echo ${STATUS} > ${SERIAL_PORT}
}

light_off() {
  # clear the bit masked by $1
  mask=$(( ~ $((1 << $1)) ))
  STATUS=$(( $STATUS & $mask ))
  send_status
}

light_on() {
  # set the bit masked by $1
  STATUS=$(( $STATUS | $(( 1 << $1 )) ))
  send_status
}

blink_light() {
  # blink LED selected by $1; finish off
  my_led=$1
  for ((i=0;i<${BLINKS};i++))       # blink on/off 5 times, quickly
  do
    light_on $my_led
    sleep ${blinkwait}
    light_off $my_led
    sleep ${blinkwait}
  done
}

#-----[ main script ]-----------------------

# set/reset the serial port
# (moved to /etc/local.d/serial_port_kick.start)

#blink each LED
blink_light ${VPN_BIT}
blink_light ${SVC_BIT}
blink_light ${TEMP_BIT}
