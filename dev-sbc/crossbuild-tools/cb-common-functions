#!/bin/bash
# crossbuild-common-functions    (c) joe.brendler  2025-2072
#
# to be sourced in programs that employ these functions
# /usr/sbin/scritp_header_joetoo must be sourced first
#
# DEFAULT_profile_number values by ARCH as of 5/11/2025 -
#    [59]  default/linux/arm/23.0/armv6j_hf (stable)
#    [72]  default/linux/arm/23.0/armv7a_hf (stable)
#    [15]  default/linux/arm64/23.0 (stable)
#        [29]  default/linux/arm64/23.0/split-usr (stable) *** split-usr (old system)
#    [1]   default/linux/amd64/23.0 (stable)
# (as of 7/18/25 validate_target and cb-mkenv are updated to explicitly use the text
#  name to assign the default profile rather than those numbers, since the numbers changed when
#  deprecated 17.1 profiles were recently removed from portage tree)

BOARD=$1
VALID=$FALSE

# -----[changes 7/14/25 - for ver 0.6.14 ]--------------------------
# new_prompt() .......... moved to script_header_joetoo
# die() ................. moved to script_header_joetoo
# get_luks_keyfile() .... moved to script_header_joetoo
# get_luks_edev_name() .. moved to script_header_joetoo
# confirm_continue_or_exit . moved to script_header_joetoo_extended
# validate_status_file() ... moved to script_header_joetoo_extended
# linear_search() .......... moved to script_header_joetoo_extended
# run_sequence() ........... moved to script_header_joetoo_extended
# display_configuration .... moved to script_header_joetoo_extended
# process_cmdline .......... moved to script_header_joetoo_extended
# process_argument ......... moved to script_header_joetoo_extended
# process_compound_arg ..... moved to script_header_joetoo_extended
# usage-common-message ..... moved to /etc/${BPN}/local.usage
# (note: crossbuild-tools - specific arguments moved to --
#    local.cmdline_arguments
#    local.cmdline_compound_arguments
#    local.usage
#  to be installed at /etc/${BPN}/ by dev-sbc/crossbuild-tools ebuild)

validate_target() {
    # TARGET = crossbuild target for image generation
    [ $# -ne 1 ] && E_message "Error: must specify BOARD" && return 1
    BOARD=$1
    separator "${PN}" "(validate_target)"
    d_message "validating BOARD and target for BOARD: [ ${BOARD} ]" 3
    case $BOARD in
        "generic-amd64"         )
            TARGET=x86_64-pc-linux-gnu
            TARGET_ARCH=amd64
            QEMU_ARCH=x86_64
            STAGE3_SELECTOR="stage3-amd64-openrc-[0-9]"
            default_profile="default/linux/amd64/23.0"
            LLVM_TARGET="X86-64"
            VALID=$TRUE ;;
        "generic-armv6j"         )
            TARGET=armv6j-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv6j_hf"
            LLVM_TARGET="ARM"
            VALID=$TRUE ;;
        "generic-armv7a"         )
            TARGET=armv7a-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv7a_hf"
            LLVM_TARGET="ARM"
            VALID=$TRUE ;;
        "generic-aarch64"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "bcm2708-rpi-b"          )
            TARGET=armv6j-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv6j_hf"
            LLVM_TARGET="ARM"
            VALID=$TRUE ;;
        "bcm2709-rpi-2-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv7a_hf"
            LLVM_TARGET="ARM"
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv7a_hf"
            LLVM_TARGET="ARM"
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b-plus"   )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "bcm2711-rpi-4-b"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "bcm2711-rpi-cm4-io"     )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "bcm2712-rpi-5-b"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "bcm2712-rpi-cm5-cm5io"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3288-tinker-s"        )
            TARGET=armv7a-unknown-linux-gnueabihf
            TARGET_ARCH=arm
            QEMU_ARCH=arm
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]"
            default_profile="default/linux/arm/23.0/armv7a_hf"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3399-tinker-2"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3399-rock-pi-4c-plus" )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3588-rock-5b"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3588-radxa-rock-5b+"  )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3588s-orangepi-5"     )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3588s-orangepi-5b"    )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "rk3588s-rock-5c"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "fsl-imx8mq-phanbell"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "meson-gxl-s905x-libretech-cc-v2"        )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "meson-g12b-a311d-libretech-cc"          )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        "meson-sm1-s905d3-libretech-cc"          )
            TARGET=aarch64-unknown-linux-gnu
            TARGET_ARCH=arm64
            QEMU_ARCH=aarch64
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]"
            default_profile="default/linux/arm64/23.0"
            LLVM_TARGET="AArch64"
            VALID=$TRUE ;;
        *                        )
            VALID=$FALSE ;;
    esac

    if [[ $VALID ]] ; then
        d_message "BOARD ...........: ${BOARD}" 3
        d_message "TARGET ..........: ${TARGET}" 3
        d_message "TARGET_ARCH .....: ${TARGET_ARCH}" 3
        d_message "QEMU_ARCH .......: ${QEMU_ARCH}" 3
        d_message "default_profile..: ${default_profile}" 3
        d_message "LLVM_TARGET......: ${LLVM_TARGET}" 3
        d_message "${BGon}[valid target]${Boff}" 2
    else
        E_message "${BRon}[invalid target]${Boff}"
        # run the usage() function
        ## *** of whatever script sourced cb-common-functions ***
        usage
    fi
    echo
    return 0
}

validate_device() {
    # OUTPUTDEVICE = physical block device to which crossbuilt image will be copied/flashed/deployed
    [ $# -ne 1 ] && E_message "Error: must specify OUTPUTDEVICE" && return 1
    OUTPUTDEVICE=$1
    separator "${PN}" "(validate_device)"
    message_n "validating OUTPUTDEVICE: [ ${OUTPUTDEVICE} ] ..."
    if [ -b ${OUTPUTDEVICE} ] ; then
        right_status $TRUE
        message "running fdisk -l ${OUTPUTDEVICE} ..."
        fdisk -l ${OUTPUTDEVICE} | sed 's|^|    |'
    else
        right_status 1
        E_message "no such block device found for [ ${OUTPUTDEVICE} ]"
        exit 1
    fi
    # check if any part of this device is mounted - un-mount before continuing

    # (1) first unmount anything mounted to lvm in luks
    # note:  | sed 's|\\x0a| |' substitutes a space for the escaped newline
    #     control character in multiple mountpoints in lsblk -P output
    while read line; do
        # read a line from lsblk output (see below)
        if [[ ! -z $(echo $line) ]] ; then
           # use the line to assign NAME, TYPE, MOUNTPOINTS
           eval "${line}"
           d_message "${TYPE}: $NAME  MOUNTPOINTS: ${MOUNTPOINTS}" 2

           # (1.1) If this device appears to be mounted, check and if so try to unmount it
           if [[ ! -z ${MOUNTPOINTS} ]] ; then
               for x in ${MOUNTPOINTS}; do
                   # if it is in fact still mounted, unmount it
                   if [[ ! -z $(findmnt -ln ${x}) ]] ; then
                       umount -R ${x} && message "successfully ran umount -R ${x}" || \
                           die "failed to umount -R ${x}"
                   else
                       d_message "${x} is no longer mounted; continuing" 3
                   fi
               done
           else
               d_message "no MOUNTPOINTS for TYPE [$TYPE] NAME [$NAME]" 2
           fi

           # (1.2) get volume group name and fs_name for this LV (for joetoo standard lv naming)
           VG=$(echo $NAME | cut -d'-' -f1)
           fs_name=$(echo $NAME | cut -d'-' -f2)
           # (1.3) turn off swap, if it is turn on for this LV
           if [[ "${fs_name}" == "swap" ]] && \
              [[ ! -z "$(swapon --noheadings --show | grep ${NAME})" ]] ; then
               swapoff /dev/mapper/${NAME} && message "successfully ran swapoff /dev/mapper/${NAME}" || \
                   die "failed to run swapoff /dev/mapper/${NAME}"
           fi
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "lvm" | sed 's|\\x0a| |')
    # (2) next, release the volume group's LVs (ignore if no actual VG)
    if [[ ! -z $(lsblk ${OUTPUTDEVICE} | grep lvm) ]] ; then
        vgchange -an ${VG} >/dev/null && message "successfully ran vgchange -an ${VG} >/dev/null" || \
            die "failed to run vgchange -an ${VG} >/dev/null"
    else
        [ ! -z "${VG}" ] && d_message "no LVs active in VG [${VG}]" 2
    fi
    # (3) next, close any luks cyprt device
    while read line ; do
        if [[ ! -z $(echo $line) ]] ; then
            eval "${line}"
            d_message "TYPE: [${TYPE}] NAME: [$NAME]  MOUNTPOINTS: [${MOUNTPOINTS}]" 2
            cryptsetup luksClose ${NAME} && message "successfully ran cryptsetup luksClose ${NAME}" || \
                die "failed to run cryptsetup luksClose ${NAME}"
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "crypt" | sed 's|\\x0a| |')
    # (4) finally, unmount any mounted regular partitions
    while read line ; do
        if [[ ! -z $(echo $line) ]] ; then
            eval "${line}"
            if [[ ! -z ${MOUNTPOINTS} ]] ; then
                message_n "umounting MOUNTPOINTS: [${MOUNTPOINTS}] from partition [$NAME] ..."
                for x in ${MOUNTPOINTS}; do
                    umount -R ${x} && message "successfully ran umount -R ${x}" || \
                       die "failed to umount -R ${x}"
                done
            else
                d_message "no MOUNTPOINTS for TYPE: [$TYPE] NAME: [$NAME]" 2
            fi
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "part" | sed 's|\\x0a| |')

    # If we made it here without choking, then return success
    d_message "${BGon}[valid device]${Boff}" 2
    echo
    return 0
}

validate_source() {
    # "source" (in this context) means a running host system from which
    #      content will be collected, either --
    # (1) in preparation for (public) administrative addition of a new
    #      category of supported "BOARD" device(s) to those supported
    #      by this package ) via the database it generates for all
    #      build-users at /etc/crossbuild-tools/mkenv-files, or
    # (2) in preparation for (private) addition of a template for
    #      sensitive data from a build-user's machine(s) to the database
    #      of information maintained locally by the user at
    #      /etc/crossbuild-tools/mkimg-files
    BOARD=$1
    # look up what board this should be ...
#    model=$(lshw | grep -i -A5 $(hostname) | grep product | cut -d':' -f2 | sed 's/^[>
    model=$(cat /proc/device-tree/model | tr -d '\0')
    case ${model} in
        "" ) my_board="" ;;
        "Raspberry Pi Model B Rev 2" ) my_board="bcm2708-rpi-b" ;;
        "Raspberry Pi 2 Model B Rev 1.1" ) my_board="bcm2709-rpi-2-b" ;;
        "Raspberry Pi 3 Model B Rev 1.2" ) my_board="bcm2710-rpi-3-b" ;;
        "Raspberry Pi 3 Model B Plus Rev 1.3" ) my_board="bcm2710-rpi-3-b-plus" ;;
        "Raspberry Pi 4 Model B Rev 1.1" ) my_board="bcm2711-rpi-4-b" ;;
        "Raspberry Pi Compute Module 4 Rev 1.1" ) my_board="bcm2711-rpi-cm4-io" ;;
        "Raspberry Pi 5 Model B Rev 1.0" ) my_board="bcm2712-rpi-5-b" ;;
        "Raspberry Pi Compute Module 5 Rev 1.0" ) my_board="bcm2712-rpi-cm5-cm5io" ;;
        "Radxa ROCK Pi 4C+" ) my_board="rk3399-rock-pi-4c-plus" ;;
        "Radxa ROCK 5B" ) my_board="rk3588-rock-5b" ;;
        "Radxa ROCK 5B+" ) my_board="rk3588-radxa-rock-5b+" ;;
        "Orange Pi 5" ) my_board="rk3588s-orangepi-5" ;;
        "Orange Pi 5B" ) my_board="rk3588s-orangepi-5b" ;;
        "Radxa ROCK 5C" ) my_board="rk3588s-rock-5c" ;;
        "Freescale i.MX8MQ Phanbell" ) my_board="fsl-imx8mq-phanbell" ;;
        "Libre Computer AML-S905X-CC V2" ) my_board="meson-gxl-s905x-libretech-cc-v2" ;;
        "Libre Computer AML-S905D3-CC Solitude" ) my_board="meson-sm1-s905d3-libretech-cc" ;;
        "Libre Computer AML-A311D-CC Alta" ) my_board="meson-g12b-a311d-libretech-cc" ;;
    esac
    echo
    message "source reports it is [${model}], so source board is [${my_board}]"
    message "comparing my_board [${my_board}] and BOARD [${BOARD}] ..."
    if [[ "${my_board}" == "${BOARD}" ]] ; then
        message "this is a ${BGon}match${Boff}"
        return 0
    else
        E_message "this is a ${BRon}mismatch${Boff}"
        return 1
    fi
}

install_files_from_source() {
    # SOURCE = (in this context) is a path to staged data already collected,
    #   to enable joetoo system image generation for this board
    SOURCE="$1"
    # ignore missing or empty SOURCE diretory and strip source directory name
    #   from each pathname to use relative to /usr/${TARGET}/
    for x in $(find ${SOURCE} -type f 2>/dev/null | sed "s|${SOURCE}||") ; do
        DESTINATION="/usr/${TARGET}/$(dirname ${x})"
        FILE="$(basename ${x})"
        if [ ! -d ${DESTINATION} ] ; then
            d_echo "" 3
            [ $verbosity -lt 3 ] && \
                d_message_n "${DESTINATION} (${BRon}does not exist${Boff})" 2 || \
                d_message "${DESTINATION} (${BRon}does not exist${Boff})" 2
            d_message "  TARGET......: ${TARGET}" 3
            d_message "  SOURCE......: ${SOURCE}" 3
            d_message "  x...........: ${x}" 4
            d_message "  dirname x...: $(dirname $x)" 4
            d_message "  basename x..: $(basename $x)" 4
            d_message "  DESTINATION.: ${DESTINATION}" 3
            d_message "  FILE........: ${FILE}" 3
            mkdir -p ${DESTINATION} && echo -en "(${BGon}created${Boff})" || die "failed to mkdir -p ${DESTINATION}"
            right_status $TRUE
            d_echo "" 3
        fi
        message_n "populating ${x} ..."
        cp ${SOURCE}${x} ${DESTINATION}/${FILE} && right_status $? || ( right_status $? && exit 1 )
    done
    return 0
}

TARGET-emerge-joetoo-platform-meta() {
    # use crossdev tools to emerge joetoo-platform-meta (platform-specific configs)
    # from the build-host, for the crossbuild target system
    options="--update --newuse --deep --verbose --keep-going --getbinpkg"
    [[ $INTERACTIVE ]] && options+=" --ask"
    root="/usr/${TARGET}"
    uses="sbc ${BOARD} headless -plasma -gnome -http3 -quic -curl_quic_openssl"
    package="joetoo-base/joetoo-platform-meta"
    features="-collision-detect -protect-owned"
    ROOT="${root}" USE="${uses}" FEATURES="${features}" ${TARGET}-emerge ${package} ${options}
    echo
    message "Do not worry if some @system packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

TARGET-emerge-system() {
    # use crossdev tools to run emerge @system from the build-host, for the crossbuild target system
    options="--update --newuse --deep --verbose --keep-going --getbinpkg"
    [[ $INTERACTIVE ]] && options+=" --ask"
    ${TARGET}-emerge @system ${options}
    echo
    message "Do not worry if some @system packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

TARGET-emerge-world() {
    # use crossdev tools to run emerge @world from the build-host, for the crossbuild target system
    options="--update --newuse --deep --verbose --keep-going --getbinpkg"
    [[ $INTERACTIVE ]] && options+=" --ask"
    ${TARGET}-emerge @world ${options}
    echo
    message "Do not worry if some @world packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

sanity_check() {
    # sanity check configuration
    FLAGGED=$FALSE
    message "sanity-checking configuration ..."
    if [[ $DESTROY ]] && [ $starting_step -ne 0 ] ; then
        E_message "user specified DESTROY and non-zero starting_step"
        FLAGGED=$TRUE
    fi
    if [[ $CREATE ]] && [ $starting_step -ne 0 ] ; then
        E_message "user specified CREATE and non-zero starting_step"
        FLAGGED=$TRUE
    fi
    if [[ $CREATE ]] && [[ $DESTROY ]] ; then
        E_message "user specified both CREATE and DESTROY"
        FLAGGED=$TRUE
    fi

    # caution: -n tests true even when the variable is NULL
    #echo "BOARD: [${BOARD}]"
    #echo "TARGET: [${TARGET}]"
    #echo -n "-n: BOARD: " ; [ -n ${BOARD} ] && echo true || echo false
    #echo -n "-n: TARGET: " ; [ -n ${TARGET} ] && echo true || echo false
    #echo -n "-z: BOARD: " ; [ -z ${BOARD} ] && echo true || echo false
    #echo -n "-z: TARGET: " ; [ -z ${TARGET} ] && echo true || echo false
    #echo -n "len: BOARD: " ; echo ${#BOARD}
    #echo -n "len: TARGET: " ; echo ${#TARGET}
    #    if [ -n ${BOARD} ] && [ -n ${TARGET} ] ; then
    #    if [ ${#BOARD} -ne 0 ] && [ ${#TARGET} -ne 0 ] ; then

# dont need to check if both are set, since standard to run validate_target first makes that so
#    if [ ! -z ${BOARD} ] && [ ! -z ${TARGET} ] ; then
#        E_message "user specified both BOARD [${BOARD}] and TARGET [${TARGET}}"
#        message "OK: validate_target() will use BOARD and (re)assign TARGET"
#    fi

    if [ -z ${BOARD} ] && [ -z ${TARGET} ] ; then
        E_message "user specified neither BOARD nor TARGET"
        FLAGGED=$TRUE
    fi
    if [ -z ${BOARD} ] && [ -n ${TARGET} ] ; then
        E_message "user specified TARGET but no board"
        message_n "OK: auto-selecting generic board:"
        case ${TARGET} in
            "armv6j-unknown-linux-gnueabihf" ) export BOARD="generic-armv6j" ; echo -n " [${BOARD}]" ;;
            "armv7a-unknown-linux-gnueabihf" ) export BOARD="generic-armv7a" ; echo -n " [${BOARD}]" ;;
            "aarch64-unknown-linux-gnu"      ) export BOARD="generic-aarch64" ; echo -n " [${BOARD}]" ;;
            *                                ) E_message "invalid target ${TARGET}" ; FLAGGED=$TRUE ;;
        esac ; right_status $?
    fi
    if [[ "${PN}" == "cb-mkdev" ]] && [[ "${OUTPUTDEVICE}" == "" ]] ; then
        E_message "cb-mkdev requires both -b <BOARD> and -o <OUTPUTDEVICE>"
        FLAGGED=$TRUE
    fi
    message_n "overall sanity check:"
    if [[ ${FLAGGED} ]] ; then
        echo -en " ${BRon}(errors)${Boff}"
        right_status 1 ; usage
    else
        echo -en " ${BGon}(sane)${Boff}"
        right_status 0 ; return 0
    fi
}

format_warning() {
    separator "${PN}" "(format warning)"
    answer=""
    msg="   ${BRon}Warning:${BYon} this process will destroy all data on device [ ${BRon}${OUTPUTDEVICE}${BYon} ]\n${Boff}"
    # estimate message() function left side padding
    message_func_pad=4
    # adjust for non-printing chars and message() padding
    msg_width=$(( ${#msg} - $(( ${#BYon} + ${#BRon} + ${#BYon} + ${#BRon} + ${#Boff})) - $message_func_pad ))
    msg_banner="${BMon}$(repeat '*' ${msg_width})\n${Boff}"
    msg+="   ${BYon}Warning:${BRon} this process will destroy all data on device [ ${BYon}${OUTPUTDEVICE}${BRon} ]\n${Boff}"
    msg+="   ${BRon}Warning:${BYon} this process will destroy all data on device [ ${BRon}${OUTPUTDEVICE}${BYon} ]\n${Boff}"
    msg2="   ${BWon}Are you sure you want to continue?"
    echo
    prompt "${msg_banner}${msg}${BGon} * ${msg_banner}${msg2}"
    case ${answer:0:1} in
        [yY] ) message "Affirmative response from user; continuing" ;;
        [nN] ) E_message "Negative response from user; quitting"; exit 1 ;;
        * ) E_message "invalid response to format_warning"; exit 1 ;;
    esac
    return 0
}

smaller_script_common_usage_message() {
    echo
    message "  ${BYon}Exactly one <BOARD> must be specified --"
    echo -e "     ${LBon}${PN} currently supports these SBCs:${Boff}"
    while read board_model; do
        echo -e "         ${board_model}"
    done <<< $(joetoo-sbc-list | grep -v '\[')
    echo
    message "  ${BYon}Exactly one <TARGET> will be selected automatically. Examples:${Boff}"
    echo "         aarch64-unknown-linux-gnu"
    echo "         armv6j-unknown-linux-gnueabihf"
    echo "         armv7a-unknown-linux-gnueabihf"
    echo
    message "${BMon}  find additional information at ${LBon}/etc/crossbuild-tools/README${Boff}"
    echo
}
