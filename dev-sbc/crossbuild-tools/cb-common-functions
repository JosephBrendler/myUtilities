#!/bin/bash
# crossbuild-common-functions    (c) joe.brendler  2025-2072
#
# to be sourced in programs that employ these functions
# /usr/local/sbin/scritp_header_brendlefly must be sourced first
#
# DEFAULT_profile_number values by ARCH as of 5/11/2025 -
#    [59]  default/linux/arm/23.0/armv6j_hf (stable)
#    [72]  default/linux/arm/23.0/armv7a_hf (stable)
#    [15]  default/linux/arm64/23.0 (stable)
#       [29]  default/linux/arm64/23.0/split-usr (stable) *** split-usr (old system)
#

BOARD=$1
VALID=$FALSE

validate_status_file() {
    [ $# -ne 1 ] && E_message "Error: must specify status_file" && return 1
    status_file=$1
    d_message "status_file: [ ${status_file} ]" 3
    status_dir=$(dirname ${status_file})
    d_message "status_dir: [ ${status_dir} ]" 3
    message_n "validating status_dir [${status_dir}] ..."
    if [ ! -d ${status_dir} ] ; then
        echo -en " (creating) ..."
        mkdir -p ${status_dir} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    message_n "validating status_file [${status_file}] ..."
    if [ ! -f ${status_file} ] ; then
        echo -en " (creating) ..."
        touch ${status_file} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    # final validation
    message_n "re-verifying status_file [${status_file}] ..."
    [ -f ${status_file} ] && result=$TRUE || result=1
    right_status $result
    return $result
}

validate_target() {
    [ $# -ne 1 ] && E_message "Error: must specify BOARD" && return 1
    BOARD=$1
    d_message "validating BOARD: [ ${BOARD} ]" 3
    case $BOARD in
        "generic-armv6j"         )
            TARGET=armv6j-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            profile_number=59 ;
            VALID=$TRUE ;;
        "generic-armv7a"         )
            TARGET=armv7a-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "generic-aarch64"        )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2708-rpi-b"          )
            TARGET=armv6j-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            profile_number=59 ;
            VALID=$TRUE ;;
        "bcm2709-rpi-2-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b-plus"   )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2711-rpi-4-b"        )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2712-rpi-5-b"        )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3288-tinker-s"        )
            TARGET=armv7a-unknown-linux-gnueabihf ; TARGET_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "rk3399-tinker-2"        )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3399-rock-pi-4c-plus" )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3588s-orangepi-5"     )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3588s-rock-5c"        )
            TARGET=aarch64-unknown-linux-gnu ;      TARGET_ARCH=arm64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        *                        )
            VALID=$FALSE ;;
    esac

    if [[ $VALID ]] ; then
        d_message "BOARD ...........: ${BOARD}" 3
        d_message "TARGET ..........: ${TARGET}" 3
        d_message "TARGET_ARCH .....: ${TARGET_ARCH}" 3
        d_message "profile_number .: ${profile_number}" 3
        d_message "${BGon}[valid target]${Boff}" 2
    else
        E_message "${BRon}[invalid target]${Boff}"
        usage  # will run the usage function of whatever script from which cb-common-functions was sourced
    fi
    return 0
}

TARGET-emerge-system() {
    ${TARGET}-emerge -uavDN @system --keep-going
    echo
    message "Do not worry if some @system packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

TARGET-emerge-world() {
    ${TARGET}-emerge -uavDN @world --keep-going
    echo
    message "Do not worry if some @world packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

new_prompt()        # set external variable $response based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; # '=~' not in busybox
while ! expr "${response:0:1}" : [yYnNsS] >/dev/null;  # response not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; done; }

linear_search() {  # find $2 in array $1, return index
    # pass arguments like this usage:
    # linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}"
    #
    needle="$1" ; shift ; haystack=("$@")
#    echo "needle: ${needle}"
#    echo "haystack length: ${#haystack[@]}"
    for ((i=0; i<${#haystack[@]}; i++ )) ; do
        [[ "${haystack[$i]}" == "${needle}" ]] && echo $i && return $i
    done
}

usage-common-message() {
    echo
    message "  ${BMon}Note: exactly one <BOARD> must be specified. Examples:${Boff}"
    message "  generic-armv6j"
    message "  generic-armv7a"
    message "  generic-aarch64"
    message "  bcm2708-rpi-b"
    message "  bcm2709-rpi-2-b"
    message "  bcm2710-rpi-3-b"
    message "  bcm2710-rpi-3-b-plus"
    message "  bcm2711-rpi-4-b"
    message "  bcm2712-rpi-5-b"
    message "  rk3288-tinker-s"
    message "  rk3399-tinker-2"
    message "  rk3399-rock-pi-4c-plus"
    message "  rk3588s-orangepi-5"
    message "  rk3588s-rock-5c"

    echo
    message "${BMon}Note: exactly one <TARGET> will be selected automatically. Examples:${Boff}"
    message "  aarch64-unknown-linux-gnu"
    message "  armv6j-unknown-linux-gnueabihf"
    message "  armv7a-unknown-linux-gnueabihf"
    echo
    return 0
}
