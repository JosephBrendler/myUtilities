#!/bin/bash
# crossbuild-common-functions    (c) joe.brendler  2025-2072
#
# to be sourced in programs that employ these functions
# /usr/sbin/scritp_header_joetoo must be sourced first
#
# DEFAULT_profile_number values by ARCH as of 5/11/2025 -
#    [59]  default/linux/arm/23.0/armv6j_hf (stable)
#    [72]  default/linux/arm/23.0/armv7a_hf (stable)
#    [15]  default/linux/arm64/23.0 (stable)
#       [29]  default/linux/arm64/23.0/split-usr (stable) *** split-usr (old system)
#

BOARD=$1
VALID=$FALSE

validate_status_file() {
    [ $# -ne 1 ] && E_message "Error: must specify status_file" && return 1
    status_file=$1
    d_message "status_file: [ ${status_file} ]" 3
    status_dir=$(dirname ${status_file})
    d_message "status_dir: [ ${status_dir} ]" 3
    message_n "validating status_dir [${status_dir}] ..."
    if [ ! -d ${status_dir} ] ; then
        echo -en " (creating) ..."
        mkdir -p ${status_dir} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    message_n "validating status_file [${status_file}] ..."
    if [ ! -f ${status_file} ] ; then
        echo -en " (creating) ..."
        touch ${status_file} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    # final validation
    message_n "re-verifying status_file [${status_file}] ..."
    [ -f ${status_file} ] && result=$TRUE || result=1
    right_status $result
    return $result
}

validate_target() {
    # TARGET = crossbuild target for image generation
    [ $# -ne 1 ] && E_message "Error: must specify BOARD" && return 1
    BOARD=$1
    d_message "validating BOARD: [ ${BOARD} ]" 3
    case $BOARD in
        "generic-armv6j"         )
            TARGET=armv6j-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            profile_number=59 ;
            VALID=$TRUE ;;
        "generic-armv7a"         )
            TARGET=armv7a-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "generic-aarch64"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2708-rpi-b"          )
            TARGET=armv6j-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
            profile_number=59 ;
            VALID=$TRUE ;;
        "bcm2709-rpi-2-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b"        )
            TARGET=armv7a-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "bcm2710-rpi-3-b-plus"   )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2711-rpi-4-b"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2711-rpi-cm4-io"     )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2712-rpi-5-b"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "bcm2712-rpi-cm5-cm5io"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3288-tinker-s"        )
            TARGET=armv7a-unknown-linux-gnueabihf ;
            TARGET_ARCH=arm ;
            QEMU_ARCH=arm ;
            STAGE3_SELECTOR="stage3-armv7a_hardfp-openrc-[0-9]" ;
            profile_number=72 ;
            VALID=$TRUE ;;
        "rk3399-tinker-2"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3399-rock-pi-4c-plus" )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3588-rock-5b"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3588s-orangepi-5"     )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "rk3588s-rock-5c"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        "meson-gxl-s905x-libretech-cc-v2"        )
            TARGET=aarch64-unknown-linux-gnu ;
            TARGET_ARCH=arm64 ;
            QEMU_ARCH=aarch64 ;
            STAGE3_SELECTOR="stage3-arm64-openrc-[0-9]" ;
            profile_number=15 ;
            VALID=$TRUE ;;
        *                        )
            VALID=$FALSE ;;
    esac

    if [[ $VALID ]] ; then
        echo
        d_message "BOARD ...........: ${BOARD}" 3
        d_message "TARGET ..........: ${TARGET}" 3
        d_message "TARGET_ARCH .....: ${TARGET_ARCH}" 3
        d_message "QEMU_ARCH .......: ${QEMU_ARCH}" 3
        d_message "profile_number ..: ${profile_number}" 3
        d_message "${BGon}[valid target]${Boff}" 2
    else
        E_message "${BRon}[invalid target]${Boff}"
        usage  # will run the usage function of whatever script from which cb-common-functions was sourced
    fi
    echo
    return 0
}

validate_device() {
    # OUTPUTDEVICE = physical block device to which crossbuilt image will be copied/flashed/deployed
    [ $# -ne 1 ] && E_message "Error: must specify OUTPUTDEVICE" && return 1
    OUTPUTDEVICE=$1
    separator "(validate_device)" ${PN}
    message_n "validating OUTPUTDEVICE: [ ${OUTPUTDEVICE} ] ..."
    if [ -b ${OUTPUTDEVICE} ] ; then
        right_status $TRUE
        message "running fdisk -l ${OUTPUTDEVICE} ..."
        fdisk -l ${OUTPUTDEVICE} | sed 's|^|    |'
    else
        right_status 1
        E_message "no such block device found for [ ${OUTPUTDEVICE} ]"
        exit 1
    fi
    # check if any part of this device is mounted - un-mount before continuing
    # first unmount anything mounted to lvm in luks
    # note:  | sed 's|\\x0a| |' substitutes a space for the escaped newline
    #     control charackter in multiple mountpoints in lsblk -P output
    while read line; do
        # echo -n $line
        if [[ ! -z $(echo $line) ]] ; then
           eval "${line}" # will set NAME,TYPE, and MOUNTPOINTS
           d_message "${TYPE}: $NAME  MOUNTPOINTS: ${MOUNTPOINTS}" 2
           if [[ ! -z ${MOUNTPOINTS} ]] ; then
               for x in ${MOUNTPOINTS}; do
                   # if it is in fact still mounted, unmount it
                   if [[ ! -z $(findmnt -ln ${x}) ]] ; then
                       umount -R ${x} && message "successfully ran umount -R ${x}" || \
                           die "failed to umount -R ${x}"
                   else
                       d_message "${x} is no longer mounted; continuing" 3
                   fi
               done
           else
               d_message "no MOUNTPOINTS for TYPE [$TYPE] NAME [$NAME]" 2
           fi
           # get volume group name and fs_name for this LV (for joetoo standard lv naming)
           VG=$(echo $NAME | cut -d'-' -f1)
           fs_name=$(echo $NAME | cut -d'-' -f2)
           # turn off swap, if it is turn on for this LV
           if [[ "${fs_name}" == "swap" ]] && \
              [[ ! -z "$(swapon --noheadings --show | grep ${NAME})" ]] ; then
               swapoff /dev/mapper/${NAME} && message "successfully ran swapoff /dev/mapper/${NAME}" || \
                   die "failed to run swapoff /dev/mapper/${NAME}"
           fi
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "lvm" | sed 's|\\x0a| |')
    # next, release the volume group's LVs
    if [[ ! -z $(lsblk ${OUTPUTDEVICE} | grep lvm) ]] ; then
        vgchange -an ${VG} >/dev/null && message "successfully ran vgchange -an ${VG} >/dev/null" || \
            die "failed to run vgchange -an ${VG} >/dev/null"
    else
        d_message "no LVs active in VG [${VG}]" 2
    fi
    # next, close any luks cyprt device
    while read line ; do
        if [[ ! -z $(echo $line) ]] ; then
            eval "${line}"
            d_message "TYPE: [${TYPE}] NAME: [$NAME]  MOUNTPOINTS: [${MOUNTPOINTS}]" 2
            cryptsetup luksClose ${NAME} && message "successfully ran cryptsetup luksClose ${NAME}" || \
                die "failed to run cryptsetup luksClose ${NAME}"
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "crypt" | sed 's|\\x0a| |')
    # finally, unmount any mounted regular partitions
    while read line ; do
        if [[ ! -z $(echo $line) ]] ; then
            eval "${line}"
            if [[ ! -z ${MOUNTPOINTS} ]] ; then
                message_n "umounting MOUNTPOINTS: [${MOUNTPOINTS}] from partition [$NAME] ..."
                for x in ${MOUNTPOINTS}; do
                    umount -R ${x} && message "successfully ran umount -R ${x}" || \
                       die "failed to umount -R ${x}"
                done
            else
                d_message "no MOUNTPOINTS for TYPE: [$TYPE] NAME: [$NAME]" 2
            fi
        fi
    done <<< $(lsblk -y -b ${OUTPUTDEVICE} -o NAME,TYPE,MOUNTPOINTS -P | grep "part" | sed 's|\\x0a| |')

    return 0
}

validate_source() {
    # "source" (in this context) means a running host system from which
    #      content will be collected, either --
    # (1) in preparation for (public) administrative addition of a new
    #      category of supported "BOARD" device(s) to those supported
    #      by this package ) via the database it generates for all
    #      build-users at /etc/crossbuild-tools/mkenv-files, or
    # (2) in preparation for (private) addition of a template for
    #      sensitive data from a build-user's machine(s) to the database
    #      of information maintained locally by the user at
    #      /etc/crossbuild-tools/mkimg-files
    BOARD=$1
    # look up what board this should be ...
#    model=$(lshw | grep -i -A5 $(hostname) | grep product | cut -d':' -f2 | sed 's/^[>
    model=$(cat /proc/device-tree/model | tr -d '\0')
    case ${model} in
        "" ) my_board="" ;;
        "Raspberry Pi 2 Model B Rev 1.1" ) my_board="bcm2709-rpi-2-b" ;;
        "Raspberry Pi 3 Model B Rev 1.2" ) my_board="bcm2710-rpi-3-b" ;;
        "Raspberry Pi 3 Model B Plus Rev 1.3" ) my_board="bcm2710-rpi-3-b-plus" ;;
        "Raspberry Pi 4 Model B Rev 1.1" ) my_board="bcm2711-rpi-4-b" ;;
        "Raspberry Pi Compute Module 4 Rev 1.1" ) my_board="bcm2711-rpi-cm4-io" ;;
        "Raspberry Pi 5 Model B Rev 1.0" ) my_board="bcm2712-rpi-5-b" ;;
        "Raspberry Pi Compute Module 5 Rev 1.0" ) my_board="bcm2712-rpi-cm5-cm5io" ;;
        "Radxa ROCK Pi 4C+" ) my_board="rk3399-rock-pi-4c-plus" ;;
        "Radxa ROCK 5B" ) my_board="rk3588-rock-5b" ;;
        "Orange Pi 5B" ) my_board="rk3588s-orangepi-5" ;;
        "Radxa ROCK 5C" ) my_board="rk3588s-rock-5c" ;;
        "Libre Computer AML-S905X-CC V2" ) my_board="meson-gxl-s905x-libretech-cc-v2" ;;
    esac
    echo
    message "source reports it is [${model}], so source board is [${my_board}]"
    message "comparing my_board [${my_board}] and BOARD [${BOARD}] ..."
    if [[ "${my_board}" == "${BOARD}" ]] ; then
        message "this is a ${BGon}match${Boff}"
        return 0
    else
        E_message "this is a ${BRon}mismatch${Boff}"
        return 1
    fi
}


install_files_from_source() {
    # SOURCE = (in this context) staged data already collected to enable joetoo system image generation for this board
    SOURCE="$1"
    # strip source directory name from each pathname to use relative to /usr/${TARGET}/
    for x in $(find ${SOURCE} -type f | sed "s|${SOURCE}||") ; do
        DESTINATION="/usr/${TARGET}/$(dirname ${x})"
        FILE="$(basename ${x})"
        if [ ! -d ${DESTINATION} ] ; then
            d_echo "" 3
            d_message "TARGET......: ${TARGET}" 3
            d_message "SOURCE......: ${SOURCE}" 3
            d_message "x...........: ${x}" 4
            d_message "dirname x...: $(dirname $x)" 4
            d_message "basename x..: $(basename $x)" 4
            d_message "DESTINATION.: ${DESTINATION}" 3
            d_message "FILE........: ${FILE}" 3
            d_echo "" 3
            message_n "creating destination directory ${DESTINATION} ..."
            mkdir -p ${DESTINATION} && right_status $? || ( right_status $? && exit 1 )
        fi
        message_n "populating ${x} ..."
        cp ${SOURCE}${x} ${DESTINATION}/${FILE} && right_status $? || ( right_status $? && exit 1 )
    done
    return 0
}

TARGET-emerge-system() {
    # use crossdev tools to run emerge @system from the build-hose, for the crossbuild target system
    [[ $INTERACTIVE ]] && options="-uavDN" || ptions="-uvDN"
    ${TARGET}-emerge ${options} @system --keep-going
    echo
    message "Do not worry if some @system packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

TARGET-emerge-world() {
    # use crossdev tools to run emerge @world from the build-hose, for the crossbuild target system
    [[ $INTERACTIVE ]] && options="-uavDN" || ptions="-uvDN"
    ${TARGET}-emerge ${options} @world --keep-going
    echo
    message "Do not worry if some @world packages fail to build (e.g. gcc, above)"
    message "Some must be compiled natively after chroot, in steps to follow"
    echo
    return 0
}

new_prompt()        # set external variable $response based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; # '=~' not in busybox
while ! expr "${response:0:1}" : [yYnNsS] >/dev/null;  # response not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; done; }

linear_search() {  # find $2 in array $1, return index
    # pass arguments like this usage:
    # linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}"
    #
    needle="$1" ; shift ; haystack=("$@")
#    echo "needle: ${needle}"
#    echo "haystack length: ${#haystack[@]}"
    for ((i=0; i<${#haystack[@]}; i++ )) ; do
        [[ "${haystack[$i]}" == "${needle}" ]] && echo $i && return $i
    done
}

usage-common-message() {
    echo
    message "  ${BMon}Note: exactly one <BOARD> may be specified.  Examples:${Boff}"
    message "  generic-armv6j"
    message "  generic-armv7a"
    message "  generic-aarch64"
    message "  bcm2708-rpi-b"
    message "  bcm2709-rpi-2-b"
    message "  bcm2710-rpi-3-b"
    message "  bcm2710-rpi-3-b-plus"
    message "  bcm2711-rpi-4-b"
    message "  bcm2711-rpi-cm4-io"
    message "  bcm2712-rpi-5-b"
    message "  bcm2712-rpi-cm5-cm5io"
    message "  rk3288-tinker-s"
    message "  rk3399-tinker-2"
    message "  rk3399-rock-pi-4c-plus"
    message "  rk3588-rock-5b"
    message "  rk3588s-orangepi-5"
    message "  rk3588s-rock-5c"
    message "  meson-gxl-s905x-libretech-cc-v2"

    echo
    message "${BMon}Note: exactly one <TARGET> will be selected automatically. Examples:${Boff}"
    message "  aarch64-unknown-linux-gnu"
    message "  armv6j-unknown-linux-gnueabihf"
    message "  armv7a-unknown-linux-gnueabihf"
    echo
    message "${BYon}Note: find additionl information at /etc/crossbuild-tools/README"
    return 0
}

run_sequence() {
    # run the sequence of commands stored in the command_sequence array
    # for each step, store updated status in a status file provided as arg $1
    [ $# -ne 1 ] && E_message "run_sequence requires exactly one argument (status_file) " && exit 1
    status_file=$1
    echo
    separator "Running command sequence" "${PN}-${BUILD}"
    echo
    d_message "starting_step: [ ${starting_step} ]" 3
    d_message "stopping_step: [ ${stopping_step} ]" 3
    for ((step_number=${starting_step}; step_number<=${stopping_step}; step_number++))
    do
        separator "(${step_number}: ${command_sequence[${step_number}]})" "${PN}-${BUILD}"
        d_message "Writing step_number [ $step_number ] to status_file ( $status_file )" 2
        echo $step_number > ${status_file}
        if [[ ${INTERACTIVE} ]] ; then
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will prompt to ${step_number}: (${msg1_sequence[${step_number}]})"
            d_message "${msg}" 2
            response=""
            # confirm user is ready/wants to run the next command
            new_prompt "${BMon}Are you ready to ${BGon}${msg1_sequence[${step_number}]}${BMon}?${Boff}"
        else  # automatically execute other steps for non-interactive
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will automatically ${step_number}: (${msg1_sequence[${step_number}]})"
            d_message "${msg}" 2
            message "${BMon}Beginning ${BGon}${command_sequence[${step_number}]}${BMon} as instructed ...${Boff}"
            response="y"
       fi  ## interactive
       case $response in
           [Yy] )  # execute this command and continue
               message "${LBon}About to run ${BYon}${command_sequence[${step_number}]}${LBon} ...${Boff}" ; \
               eval ${command_sequence[${step_number}]} ; result=$? ;
               if [ ${result} -eq 0 ] ; then
                   message "${BYon}Note:${Boff} ${command_sequence[${step_number}]} ${BGon}completed successfully${Boff}"
               else
                   E_message "${BYon}Note:${Boff} ${command_sequence[${step_number}]} ${BRon}failed${Boff}"
               fi
               ;;
           [Ss] ) ;; # skip this command and continue
           *    )  # abort due to negative response
               message "${BRon}As instructed, not running ${BGon}${command_sequence[${step_number}]}${BRon}. Quitting...${Boff}" ; \
               exit ;;
        esac

    done
    echo
}

sanity_check() {
    # sanity check configuration
    FLAGGED=$FALSE
    message "sanity-checking configuration ..."
    if [[ $DESTROY ]] && [ $starting_step -ne 0 ] ; then
        E_message "user specified DESTROY and non-zero starting_step"
        FLAGGED=$TRUE
    fi
    if [[ $CREATE ]] && [ $starting_step -ne 0 ] ; then    
        E_message "user specified CREATE and non-zero starting_step"
        FLAGGED=$TRUE
    fi
    if [[ $CREATE ]] && [[ $DESTROY ]] ; then
        E_message "user specified both CREATE and DESTROY"
        FLAGGED=$TRUE
    fi

    # caution: -n tests true even when the variable is NULL 
    #echo "BOARD: [${BOARD}]"  
    #echo "TARGET: [${TARGET}]"
    #echo -n "-n: BOARD: " ; [ -n ${BOARD} ] && echo true || echo false
    #echo -n "-n: TARGET: " ; [ -n ${TARGET} ] && echo true || echo false
    #echo -n "-z: BOARD: " ; [ -z ${BOARD} ] && echo true || echo false
    #echo -n "-z: TARGET: " ; [ -z ${TARGET} ] && echo true || echo false
    #echo -n "len: BOARD: " ; echo ${#BOARD}  
    #echo -n "len: TARGET: " ; echo ${#TARGET}
    #    if [ -n ${BOARD} ] && [ -n ${TARGET} ] ; then
    #    if [ ${#BOARD} -ne 0 ] && [ ${#TARGET} -ne 0 ] ; then
    if [ ! -z ${BOARD} ] && [ ! -z ${TARGET} ] ; then
        E_message "user specified both BOARD [${BOARD}] and TARGET [${TARGET}}"
        message "OK: validate_target() will use BOARD and (re)assign TARGET"
    fi
    if [ -z ${BOARD} ] && [ -z ${TARGET} ] ; then
        E_message "user specified neither BOARD nor TARGET"
        FLAGGED=$TRUE
    fi
    if [ -z ${BOARD} ] && [ -n ${TARGET} ] ; then
        E_message "user specified TARGET but no board"
        message_n "OK: auto-selecting generic board:" 
        case ${TARGET} in
            "armv6j-unknown-linux-gnueabihf" ) export BOARD="generic-armv6j" ; echo -n " [${BOARD}]" ;;
            "armv7a-unknown-linux-gnueabihf" ) export BOARD="generic-armv7a" ; echo -n " [${BOARD}]" ;;
            "aarch64-unknown-linux-gnu"      ) export BOARD="generic-aarch64" ; echo -n " [${BOARD}]" ;;
            *                                ) E_message "invalid target ${TARGET}" ; FLAGGED=$TRUE ;;
        esac ; right_status $?
    fi
    if [[ "${PN}" == "cb-mkdev" ]] && [[ "${OUTPUTDEVICE}" == "" ]] ; then
        E_message "cb-mkdev requires both -b <BOARD> and -o <OUTPUTDEVICE>"
        FLAGGED=$TRUE
    fi
    message_n "overall sanity check:"
    if [[ ${FLAGGED} ]] ; then
        echo -en " ${BRon}(errors)${Boff}"
        right_status 1 ; usage
    else
        echo -en " ${BGon}(sane)${Boff}"
        right_status 0 ; return 0
    fi
}

display_configuration()  {
    # will pick up PN, BUILD, varlist from the environment of whatever script sources cb-common-functions
    separator "configuration" "${PN}-${BUILD}"
    longest=$(get_longest ${varlist})
    display_vars ${longest} ${varlist}
    return 0
}

process_cmdline() {
  # process command line arguments (for now only -x/--exclude option can have argument(s))
  arglist="$@"

  last=""
  d_message "processing command line with [ ${arglist} ]" 2
  # shift each argument into position $1 and examine it
  #   process the argument or processit with its own arguments
  while [ ! -z "$1" ]
  do
    d_message "arg1 = [ $1 ]" 3
    # if arg begins with a single dash, process it alone
    if [ "${1:0:1}" == "-" ] && [ "${1:1:1}" != "-" ] ; then
      d_message "processing [ $1 ] alone as single-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is -t or -b
      [[ "${1}" =~ ^(-t|-b|-o)$ ]] && shift  # extra shift to clear target, board, or outputdevice
      shift
    # if arg begins with a double dash, process it alone
    elif [ "${1:0:2}" == "--" ] ; then
      d_message "processing [ $1 ] alone as double-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is --target
      [[ "$1" == "--target" ]] && shift  # extra shift to clear target
      shift
    else
      d_message "does not start with - or --" 3
      usage; exit
    fi
  done
  d_message "done with process_command_line" 2
  return 0
}

process_argument() {
  d_message "about to process [ $* ]" 2
  d_message "1: [ $1 ], 2: [ $2 ]" 2
  # process command line argument (must be one of the following)
  [ ! -z "$1" ] && case "$1" in
    "-"[sS] | "--status"         )
      # display status
      d_message "${BYon}reading status file: [ ${BWon}${mkenvstatusfile}${BYon}  ]${Boff}" 2
      read starting_step < ${mkenvstatusfile};
      msg="${BWon}Status: Step $(($starting_step - 1)) complete;"
      msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]${Boff}"
      message "${msg}"
      exit;
      ;;
    "-"[rR] | "--resume"         )
      # resume at stored step unless that is overridden by a new start # (below)
      d_message "${BYon}reading status file: [ ${BWon}${mkenvstatusfile}${BYon}  ]${Boff}" 2
      export RESUME=${TRUE}
      read starting_step < ${mkenvstatusfile};
      msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
      d_message "${msg}" 2
      ;;
    -*[0-9]*  )
        # currently there are double-digit steps; if the next char is also numeric, append it
        myarg=${1:1} # drop the leading "-"
        export RESUME=${TRUE}
        if $(isnumber ${myarg}) && [ ${myarg} -ge 0 ] && \
          [ ${myarg} -lt ${#command_sequence[@]} ] ; then
            export starting_step=${myarg};
            msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
            msg+=" to status file [${Boff}${finishupstatusfile}${BYon}]${Boff}"
            d_message "${msg}" 2
            echo ${starting_step} > ${finishupstatusfile};
            msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
            msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
            d_message "${msg}" 2
        else
            # it may be a combination of numbers and letters - hand off to process_compound_arg()
            process_compound_arg $1
        fi
        ;;
    "-"[iI] | "--interactive"    )
      # interactive
      export INTERACTIVE=${TRUE};
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[cC] | "--create"    )
      # create
      export CREATE=${TRUE};
      stopping_step=$(linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}")
      d_message "${BYon}setting CREATE: $(status_color ${CREATE})$(TrueFalse ${CREATE})${Boff}" 2
      ;;
    "-"[dD] | "--destroy"    )
      # destroy
      export DESTROY=${TRUE};
      stopping_step=0 ;
      d_message "${BYon}setting DESTROY: $(status_color ${DESTROY})$(TrueFalse ${DESTROY})${Boff}" 2
      ;;
    "-"[nN] | "--noninteractive" )
      # non-interactive
      export INTERACTIVE=${FALSE}
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[qQ] | "--quiet"          )
      # decrease verbosity
      [[ ${verbosity} -gt 0 ]] && let verbosity--
      [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
      d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
      ;;
    "-"[vV] | "--verbose"          )
      # increase verbosity
      [[ ${verbosity} -lt 6 ]] && let verbosity++
      export VERBOSE=${TRUE}
      d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
      ;;       # note: "numeric" args like -4 should fall through to this default
    "-"[tT] | "--target"         )
      # specify TARGET (next arg in $@ set)
      export TARGET=$2
      d_message "${BYon}set TARGET = ${TARGET}" 2
      ;;
    "-"[bB] | "--board"         )
      # specify BOARD (next arg in $@ set)
      export BOARD=$2
      d_message "${BYon}set BOARD = ${BOARD}" 2
      ;;
    "-"[oO] | "--outputdevice"         )
      # specify output device to be flashed (next arg in $@ set)
      export OUTPUTDEVICE=$2
      d_message "${BYon}set OUTPUTDEVICE = ${OUTPUTDEVICE}" 2
      ;;
    *                            )
    process_compound_arg $1
      ;;
  esac
  d_message "done with process_argument" 3
  return 0
}

process_compound_arg()  {
    d_message "about to process compound [ $* ]" 2
    # must begin with a single dash
    [ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
    # must not begin with two dashes (would have been picked in process_argument)
    [ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
    # strip leading dash(es)
    myargs=${1##-}
    # handle remaining characters in sequence
    while [ -n "${myargs}" ]
    do
        #handle one character at at time, from the left
        case ${myargs:0:1} in
            [sS] )
                # display status
                d_message "${BYon}reading status file: [ ${BWon}${mkenvstatusfile}${BYon}  ]${Boff}" 2
                read starting_step < ${mkenvstatusfile};
                msg="${BWon}Status: Step $(($starting_step - 1)) complete;"
                msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
                msg+=" [ ${BGon}${command_sequence[${starting_step}]} ${BWon}]${Boff}"
                d_message "${msg}" 2
                exit;
                ;;
            [rR] )
                # resume at stored step unless that is overridden by a new start # (below)
                d_message "${BYon}reading status file: [ ${BWon}${mkenvstatusfile}${BYon}  ]${Boff}" 2
                export RESUME=${TRUE}
                read starting_step < ${mkenvstatusfile};
                msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
                msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                d_message "${msg}" 2
                ;;
            [0-9] )
                # currently there are double-digit steps; if the next char is also numeric, append it and "shift"
                export RESUME=${TRUE}
                starting_step="${myargs:0:1}";
                if [[ "${myargs:1:1}" == [0-9] ]] ; then
                    export starting_step="${myargs:0:2}";
                    myargs=${myargs:1}
                fi
                if [ $starting_step -gt ${#command_sequence[@]} ] ; then
                    E_message "invalid starting_step [${starting_step}]"
                    usage
                else
                    msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
                    msg+=" to status file [${Boff}${mkenvstatusfile}${BYon}]${Boff}"
                    d_message "${msg}" 2
                    echo ${starting_step} > ${mkenvstatusfile};
                    msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
                    msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                    d_message "${msg}" 2
                fi
                ;;
            [iI] )
                # interactive
                export INTERACTIVE=${TRUE};
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [cC] )
                # create
                export CREATE=${TRUE};
                export stopping_step=$(linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}")
                d_message "${BYon}setting CREATE: $(status_color ${CREATE})$(TrueFalse ${CREATE})${Boff}" 2
                ;;
            [dD] )
                # destroy
                export DESTROY=${TRUE};
                export stopping_step=0 ;
                d_message "${BYon}setting DESTROY: $(status_color ${DESTROY})$(TrueFalse ${DESTROY})${Boff}" 2
                ;;
            [nN] )
                # non-interactive
                export INTERACTIVE=${FALSE}
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [qQ] )
                # decrease verbosity
                [[ ${verbosity} -gt 0 ]] && let verbosity--
                [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
                d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
                ;;
            [vV] )
                # increase verbosity
                [[ ${verbosity} -lt 6 ]] && let verbosity++
                export VERBOSE=${TRUE}
                d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
                ;;       # note: "numeric" args like -4 should fall through to this default
            [oO] )
                # specify output device to be flashed (next arg in $@ set)
                export OUTPUTDEVICE=$2
                d_message "${BYon}set OUTPUTDEVICE = ${OUTPUTDEVICE}" 2
                ;;
            *   ) E_message "${E_BAD_ARGS}" && usage && exit 1
        esac
        #strip first char from myargs (i.e. "shift" one character)
        myargs=${myargs:1}
    done
    d_message "done with process_compount_arg" 3
    return 0
}

format_warning() {
    separator "(format warning)" ${PN}
    answer=""
    msg="${BYon}Warning:${BRon} this process will destroy all data on device [ ${OUTPUTDEVICE} ]\n"
    msg+="${BWon}Are you sure you want to continue?"
    prompt "${msg}"
    case ${answer:0:1} in
        [yY] ) message "Affirmative response from user; continuing" ;;
        [nN] ) E_message "Negative response from user; quitting"; exit 1 ;;
        * ) E_message "invalid response to format_warning"; exit 1 ;;
    esac
    return 0
}

confirm_continue_or_exit() {
    answer=""
    msg="${BYon}Do you want to continue?"
    prompt "${msg}"
    case ${answer:0:1} in
        [yY] ) message "Affirmative response from user; continuing" ;;
        [nN] ) E_message "Negative response from user; quitting"; exit 1 ;;
        * ) E_message "invalid response to confirm_continue_or_exit"; exit 1 ;;
    esac
    return 0

}

die() {
    msg="${1}"
    E_message "${msg}"
    exit 1
}

get_luks_keyfile() {
    # use info in arg1 (crypt_keydev) to identify keyfile
    # determine keydev type
    # if it starts with "/" it is a device name
    # if it contains "-" it may be a UUID
    # if it does not, it may be a LABEL
    message_n "examining crypt_keydev [ ${crypt_keydev} ] ..."
    if [ -b ${crypt_keydev} ] ; then
        crypt_keydev_type=devicename
    elif echo ${crypt_keydev} | grep "-" ; then
        crypt_keydev_type=UUID
    else
        crypt_keydev_type=LABEL
    fi
    # if it is not mounted, try to mount it
    if [[ ! -z "$( mount | grep ${crypt_keydev_mountpoint%/} )" ]] ; then
        echo -en " ${BGon}(mounted)${Boff}"
        right_status $TRUE
    else
        echo -en " trying to mount (${crypt_keydev_type}) [${crypt_keydev}] ..."
        case $crypt_keydev_type in
             "devicename" ) mount ${crypt_keydev} ${crypt_keydev_mountpoint} && right_status $? || \
                  ( right_status $? && die "could not mount crypt_keydev ($crypt_keydev_type)") ;;
             "UUID"       ) mount UUID=${crypt_keydev} ${crypt_keydev_mountpoint} && right_status $? || \
                  ( right_status $? && die "could not mount crypt_keydev ($crypt_keydev_type)") ;;

             "LABEL"      ) mount LABEL=${crypt_keydev} ${crypt_keydev_mountpoint} && right_status $? || \
                  ( right_status $? && die "could not mount crypt_keydev ($crypt_keydev_type)") ;;
             * )  right_status 1 ; die "invalid crypt_keydev" ;;
        esac
    fi
    # set keyfile pathname
    export keyfile=${crypt_keydev_mountpoint%/}/crypt/dat
    return 0
}

get_luks_edev_name() {
    # determine an edev name to use with this device
    # ( e.g. sda2->eda2 nvme0n1p2->ev012 mmcblk0p2->em02 )
    message_n "determining edev name ..."
    bn=$(basename ${luks_partition_device})
    case ${bn:0:2} in
      "sd" ) # scsi device
        myedev=$(echo ${bn} | sed 's/^s/e/')
        ;;
      "nv" ) # nvme device
        myedev=$(echo ${bn} | sed 's/^nvme/ev/' | sed 's/[np]//g')
        ;;
      "mm" ) # mmc device
        myedev=$(echo ${bn} | sed 's/^mmcblk/em/' | sed 's/p//g')
        ;;
      *    ) # tbd
        echo "Error: bad luks device name [${OUTPUTDEVICE}]"
        ;;
    esac ; result=$?
    export edev=${myedev}
    return $result
}

