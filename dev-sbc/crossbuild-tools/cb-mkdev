#!/bin/bash
#
# mkdev   (c) joe.brendler  2025-2072
# copy appropriate template files into crossbuild target filesystem
#

    # pre-requisite: cb-mkenv and cb-mkimg have been fully completed, with possible exception of its chroot step
    # this script expects --
    #    a working, nearly bootable image file is set up and mounted on the appropriate target directory (cb-setup)
    #    the image file is ready to be transferred to a real block device, finalized, and deployed

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

#-----[ variables ]-----------------------------------------------------

VERBOSE=$TRUE
#verbosity=2
verbosity=3
PN=$(basename $0)

response=""

varlist="PN BPN BUILD OUTPUTDEVICE BOARD TARGET TARGET_ARCH QEMU_ARCH"
varlist+=" layout_number"
varlist+=" starting_step stopping_step mkdevstatusfile"
varlist+=" bool.RESUME bool.INTERACTIVE"
varlist+=" BREAK bool.VERBOSE verbosity old_dir"

# Note: much of the workflow is accopmlished by the finalize-chroot-image
#    script that will run once in the chroot (after replacing the
#    basic finalize-chroot script provided for cb-mkenv)

command_sequence=(
'cb-mount ${BOARD}'
'validate-image'
'eselect-layout'
'cb-layout-device -b ${BOARD} -o ${OUTPUTDEVICE}'
'cb-flash-device ${OUTPUTDEVICE} ${BOARD}'
'post-flash-cleanup'
)

msg1_sequence=(
'mount BOARD image on TARGET'
'validate source (crossbuilt BOARD and TARGET)'
'eselect cb-layout-device.conf'
'layout ${OUTPUTDEVICE} for ${BOARD}'
'flash ${OUTPUTDEVICE} for ${BOARD}'
'conduct post-flash cleanup'
)

msg2_sequence=(
'mounting BOARD image on TARGET'
'validating source (crossbuilt BOARD and TARGET)'
'selecting cb-layout-device.conf'
'laying out ${OUTPUTDEVICE} for ${BOARD}'
'flashing ${OUTPUTDEVICE} for ${BOARD}'
'conducting post-flash cleanup')

#-----[ functions ]-----------------------------------------------------

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?

# usage moved to script_header_joetoo_extended, which will source /etc/${BPN}/local.usage

initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."
    initialize_vars ${varlist}

    # set default values
    FLAGGED=$FALSE
    d_message_n "sourcing BUILD ..." 2
    source /etc/crossbuild-tools/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing BPN ..." 2
    source /etc/crossbuild-tools/BPN && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting old_dir = $(pwd)" 2
    export old_dir=$(pwd) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default starting_step = 0" 2
    export starting_step=0 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default stopping_step = $(( ${#command_sequence[@]} - 1 ))" 2
    export stopping_step=$(( ${#command_sequence[@]} - 1 )) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default mkdevstatusfile = /root/bin/mkcrossbuilddev_status" 2
    export mkdevstatusfile="/root/bin/mkcrossbuilddev_status" && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default layout_number = 1" 2
    layout_number=1 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default INTERACTIVE true" 2
    export INTERACTIVE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE true" 2
    export VERBOSE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = 3" 2
    export verbosity=3 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
}

validate-image() {
    separator "(validate-image)" ${PN}
    FLAGGED=$FALSE
    # validate target mountpoint directory
    if [ ! -d /usr/${TARGET} ] ; then
        E_message "target directory /usr/${TARGET} does not exist"
        FLAGGED=$TRUE
    fi
    # validate board image file exists
    if [ ! -f /usr/${BOARD}.img ] ; then
        E_message "image file target /usr/${BOARD}.img does not exist"
        FLAGGED=$TRUE
    fi
    # verify loop device is active
    message "the following loop devices are active for image file(s) --"
    losetup -a
    loop_dev=$(losetup -a | grep "/usr/${BOARD}.img" | cut -d':' -f1)
    if [ -z "${loop_dev}" ] ; then
        E_message "no loop device is active for /usr/${BOARD}"
        FLAGGED=$TRUE
    fi
    # verify the loop device is mounted on the target
    mountpoint=$(mount | grep "${loop_dev}p2" | awk '{print $3}')
    [[ ! "${mountpoint}" == "/usr/${TARGET}" ]] && E_message "no rootfs (loop_dev p2) is mounted on target /usr/${TARGET}" && FLAGGED=$TRUE
    mountpoint=$(mount | grep "${loop_dev}p1" | awk '{print $3}')
    if [[ ! "${mountpoint}" == "/usr/${TARGET}/boot" ]] ; then
        E_message "no bootfs (loop_dev p1) is mounted on target /usr/${TARGET}/boot"
        FLAGGED=$TRUE
    fi
    if [ -z "$(mount | grep loop)" ] ; then
        E_message "no loop device is mounted at all"
        FLAGGED=$TRUE
    fi
    # verify other loop device(s) are not active
    if [ ! -z "$(mount | grep loop | grep -v ${loop_dev})" ] ; then
        E_message "other loop devices are also already active"
        FLAGGED=$TRUE
    fi
    if [[ $FLAGGED ]] ; then
        E_message "${BYon}Note red flags above${Boff}"
        E_message "${BWon}You should consider whether you need to correct issues before continuing${Boff}"
        d_message "INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}" 3
        if [[ $INTERACTIVE ]] ; then
            msg="${BWon}Do you really want to continue?\n"
            mst+="    y|s: yes; continue | n: no; exit"
            response="" ; new_prompt "${msg}"
        else
            response="n"    ## take the safe course (do not non-interactively destroy stuff)
        fi
        case ${response:0:1} in
            [yYsS] ) message "OK; continuing" ;;
            [nN] ) E_message "Exiting as instructed [ ${response} ]" ; return 1 ;;
            * ) E_message "Invalid response; exiting" ; return 1 ;;
        esac
    else
        message "No red flags noted"
    fi
    return 0
}

get-max-layout-number() {
    cmd=" eselect cb-layout-device list |"
    cmd+=" grep '\[[0-9]\+\]' |"
    cmd+=" awk '{print \$1}' |"
    cmd+=" sed 's/\[//' |"
    cmd+=" sed 's/\]//' |"
    cmd+=" sort -n |"
    cmd+=" tail -n 1"
    result=$(eval ${cmd})
    echo $result
    return $result
}

layout_number_prompt()  {
    ps=$1; echo; echo; CUU; SCP;
    get-max-layout-number >/dev/null ; max_num=$?
    message_n "$ps [0-${max_num}]: " && read layout_number;
    isnumber $layout_number ; result=$?
    while [ $result -ne 0 ] || [ $layout_number -lt 0 ] || [ $layout_number -gt ${max_num} ] ; do
        RCP; echo -en "$( repeat ' ' $( termwidth ) )"; RCP;
        message_n "$ps [0-${max_num}]: " && read layout_number;
        isnumber $layout_number ; result=$? ; done
}

eselect-layout() {
    separator "(eselect-layout)" ${PN}
    # default to layout specified in config file
    # or suggest one based on board image type (straight SD card, luks-encrypted NVMe stick, etc)
    # export layout variables (partition1_size_mb, DEV_HOSTNAME, root_vg, crypt_keydev, etc.)
    message "setting default layout ..."
    eselect cb-layout-device list | grep '\*'
    message_n "getting current layout number"
    layout_number=$(eselect cb-layout-device list | grep '\*' | cut -d'[' -f2 | cut -d ']' -f1)
    result=$?
    if [ $result -eq 0 ] ; then
        echo -en " (${layout_number})"
    else
        echo -en " (${BRon}failed${Boff})"
    fi
    right_status $result

    d_message "INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}" 3
    if [[ $INTERACTIVE ]] ; then
        msg="${BYon}Would you like to select a different layout?\n"
        msg+="${BWon}  ( y: yes select new | s: no; continue with default | n: no; exit )${Boff}"
        response="" ; new_prompt "${msg}"
    else
        response="s"  # keep default profile and continue
    fi
    case ${response:0:1} in
        [yY] )
            message "${BMon}Available layouts --${Boff}"
            eselect cb-layout-device list
            layout_number_prompt "${BYon}Select profile: ${Boff}"
            eselect cb-layout-device set ${layout_number}
            eselect cb-layout-device list
            ;;
        [nN] ) E_message "exiting as instructed"; return 0;;
        [sS] ) E_message "skipping; layout remains ${layout_number}" ;;
        * ) E_message "invalid response [ ${response} ]"; exit 1 ;;
    esac
    return 0
}

post-flash-cleanup() {
    separator "(post-flash-cleanup)" ${PN}
    message "${BYon}post-flash-cleanup is not implemented yet${Boff}"
    # umount outputdevice
    # umount BOARD/TARGET
    # provide parting instructions
}

#-----[ main script ]---------------------------------------------
checkroot
separator ${PN} $(hostname)
# option s (status) is the only one that can appear alone on the command line
# - otherwise it should be at least 4: -b <BOARD> -o <OUTPUTDEVICE>
arglist="$@"
[ $# -eq 0 ] && E_message "null command line arguments" && usage
[ $# -eq 1 ] && [[ "$1" != "-"*"s"* ]] && [[ "$1" != "--status" ]] && E_message "invalid argument(s) [$arglist]" && usage
[ $# -lt 4 ] && E_message "invalid argument(s) [$arglist]" && usagearglist="$@"

# basic common approach -
# initialize variables (local function)
# validate_status_file  (script_header_joetoo_extended)
# process_cmdline (script_header_joetoo_extended)
# validate_target which must follow process_cmdline (cb-common-functions)
# display_configuration so we can see what's what if insane (script_header_joetoo_extended)
# sanity_check (cb-common-functions)
# run_sequence (script_header_joetoo_extended)

# initialize variables and set default values
initialize_variables || die "Failed to initialize_variables"

validate_status_file ${mkdevstatusfile} || die "failed validate_status_file ${mkdevstatusfile}"

d_echo "cmdline: $*" 5
d_echo "processing cmdline args: $@" 5

# over-ride configuration with commandline input
separator ${PN} "(process_cmdline)"
process_cmdline ${@} || die "Failed to process_cmdline"

validate_target ${BOARD} || die "failed to validate_target [${BOARD}]"

display_configuration || die "failed to display_configuration"
sanity_check || die "failed sanity_check"
run_sequence ${mkdevstatusfile} || die "failed to run_sequence"

echo
cd $old_dir
d_message "now working in previous directory: [${Mon}$(pwd)${Boff}]" 1
exit 0
