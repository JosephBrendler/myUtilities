#!/bin/bash
#
# cb-flach-device   (c) joe.brendler  2025-2072
# copy appropriate content froma crossbuild target filesystem into an operational block device
#

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
#verbosity=2
verbosity=3

#-----[ variables ]-------------------------------------------------------------------------

PN=$(basename $0)

# NOTEs:
#  (1) Crossbuild TARGET, BOARD, which function as SOURCES here,
#      are expected to be set in the environment
#  (2) OUTPUTDEVICE functions as a defacto target here, and it is
#      expected to already be formatted, (if luks, unlocked) and
#      ready to be mounted for flashing
#  (3) OUTPUTDEVICE's boolloader (grub menu, config.txt, joetooEnv.txt, etc)
#      and /etc/fstab will need to be updated after the image is flashed to this new block device

varlist="OUTPUTDEVICE root_dev newroot_mountpoint"
varlist+=" BREAK configfile disklabel_type DEV_HOSTNAME bool.LUKS"
varlist+=" crypt_keydev crypt_keydev_type crypt_keydev_mountpoint keyfile"

hidden_varlist="crypt_passphrase luks_partition_device"

#-----[ functions ]-------------------------------------------------------------------------

initialize_variables() {

    message_n "sourcing cb-common-functions ..."
    source /usr/sbin/cb-common-functions ; right_status $?

    initialize_vars ${varlist}
    initialize_vars ${hidden_varlist}

    message_n "sourcing BUILD ..."
    source /etc/crossbuild-tools/BUILD ; right_status $?

    message_n "sourcing BPN ..."
    source /etc/crossbuild-tools/BPN ; right_status $?

    message_n "re-initializing VERBOSE = TRUE ..."
    VERBOSE=$TRUE ; right_status $?
    message_n "re-initializing verbosity = 3 ..."
    verbosity=3 ;  right_status $?

    message_n "initializing configfile = /etc/crossbuild-tools/cb-layout-device.conf"
    configfile=/etc/crossbuild-tools/cb-layout-device.conf  ; right_status $?

    message_n "sourcing cb-layout-device.conf ..."
    if [ -e ${configfile} ] ; then
        source ${configfile} ; result=$?
        if [ $result -eq 0 ] ; then
            right_status $TRUE
        else
            right_status 1
            die "failed to source ${configfile}"
        fi
    else
        right_status 1
        die "${configfile} does not exist"
    fi

    message_n "initializing crypt_keydev_mountpoint = /mnt/key ..."
    crypt_keydev_mountpoint=/mnt/key ; right_status $?

    message_n "initializing newroot_mountpoint = /mnt/gentoo ..."
    newroot_mountpoint="/mnt/gentoo" ; right_status $?

    message_n "initializing default LUKS = FALSE ..."
    LUKS=$FALSE ; right_status $?

    message_n "initializing default root_dev = TBD ..."
    root_dev="TBD" ; right_status $?

    message_n "initializing default OUTPUTDEVICE NULL ..."
    OUTPUTDEVICE="" ; right_status $?

    message_n "initializing partition_count = 0..."
    partition_count=0 ; right_status $?

    return 0
}

usage() {
    message "${BRon}usage: ${BGon}${PN} <OUTPUTDEVICE>${Boff}"
    smaller_script_common_usage_message
    exit
}

check-target-board-loopmount() {
    separator ${PN} "(${FUNCNAME[0]})"
    d_message "in ${FUNCNAME[0]}" 5

    FLAGGED=$FALSE
    # inspect target (mount point) - verify that BOARD is mounted and get its loop_dev
    if [[ ! -z $(findmnt -ln | grep "/usr/${TARGET}") ]] ; then
        # something is mounted - look for loop_dev
        E_message "${BYon}the following devices are mounted on /usr/${TARGET} --${Boff}"
        findmnt -ln | grep "/usr/${TARGET}" | cut -c1-86 | sed 's|$| ...|' | sed 's|^|    |'
        # note: this will fail if there are more than 99 partitions on this loop device
        target_loop_dev=$(findmnt -ln | grep /usr/${TARGET} | grep 'loop' | head -n1 | awk '{print $2}' | \
               sed 's|[0-9]$||' | sed 's|[0-9]$||' | sed 's|p$||')
        d_message "target_loop_dev: $target_loop_dev" 5
    else
        FLAGGED=$TRUE
        E_message "nothing is mounted on /usr/${TARGET}"
    fi
    # inspect for loop devices attached to BOARD image file
    message "${BYon}the following loop devices are attached to /usr/${BOARD}.img ...${Boff}"
    d_message "about to run losetup -a | grep /usr/${BOARD}.img" 5
    losetup -a | grep "/usr/${BOARD}.img" | sed 's|^|    |'
    board_loop_dev=$(losetup -a | grep "/usr/${BOARD}.img" | cut -d':' -f1)
    if [[ ! -z "${board_loop_dev}" ]] ; then
        # confirm BOARD and TARGET are the same loop device
        message_n "confirming BOARD.img loop_dev is the same one mounted on TARGET ..."
        if [[ "${board_loop_dev}" == "${target_loop_dev}" ]] ; then
            echo -en "${BGon} (confirmed)${Boff}"
            right_status $TRUE
            message_n "exporting loop_dev = $board_loop_dev ..."
            export loop_dev=${board_loop_dev} ; right_status $?
        else
            echo -en "${BRon} (different)${Boff}"
            right_status 1
            FLAGGED=$TRUE
        fi
    else
        FLAGGED=$TRUE
        E_message "no loop device is attached to /usr/${BOARD}.img"
    fi

    [ $FLAGGED ] && return 1 || return 0
}

prep-newroot() {
    separator ${PN} "(${FUNCNAME[0]})"
    d_message "in ${FUNCNAME[0]}" 5

    # examine OUTPUTDEVICE expected to be o(if luks, pen and) ready for mounting
    message_n "is newroot mounted?"
    if [[ -z "$(findmnt -ln | grep ${newroot_mountpoint})" ]] ; then
        root_dev="nothingmounted"
        echo -e " ${BRon}no${Boff}, mounting"
        # if there's a luks device, mount its "-root" lv on newroot_mountpoint
        if [[ ! -z "$(blkid ${OUTPUTDEVICE}* | grep -i luks)" ]] ; then
            echo -en " ${BMon}(luks)${Boff}"
            export LUKS=$TRUE
            # if the luks device isn't unlocked, unlock it
            luks_partition_device=$(blkid ${OUTPUTDEVICE}* | grep -i luks | cut -d':' -f1)
            echo -en " (${luks_partition_device})"
            if [[ -z $(lsblk -l ${luks_partition_device} | grep crypt) ]] ; then
                # use crypt_keydev info from configfile to get keyfile
                get_luks_keyfile ${crypt_keydev}
                d_message "get_luks_keyfile() returned keyfile: [${keyfile}]" 5
                # use luks_partition_device name to derive edev name
                get_luks_edev_name && result=$? || die "failed to get_luks_edev_name"
                echo -en " ${BGon} (${edev})${Boff}"
                # open (unlock) the device
                cryptsetup luksOpen -d ${keyfile} ${luks_partition_device} ${edev} && \
                    echo -en " ${BGon}(unlocked)${Boff}" || \
                    die "failed to cryptsetup luksOpen -d ${keyfile} ${luks_partition_device} ${edev}"
            else
                edev=$(lsblk -l ${luks_partition_device} | grep crypt | awk '{print $1}')
                echo -en " ${BGon}([${edev}] already unlocked)${Boff}"
            fi
            # use vgscan and vgchange to activate LVs, if not yet active
            if [[ -z $(lsblk -l ${luks_partition_device} | grep lvm) ]]  ; then
                echo -en " vgscan/change"
                vgscan --quiet --devices /dev/mapper/${edev} >/dev/null || \
                    die "failed to vgscan --quiet --devices /dev/mapper/${edev} >/dev/null"
                vgchange -ay --quiet --devices /dev/mapper/${edev} >/dev/null || \
                    die "failed to vgchange -ay --quiet --devices /dev/mapper/${edev} >/dev/null"
                [[ ! -z $(lsblk -l ${luks_partition_device} | grep lvm) ]] && \
                    echo -en " ${BGon}lvm ok${Boff}" || die "vgscan/vgchange done but no LVs found"
            else
                echo -en " ${BGon}lvm ok${Boff}"
            fi
            # use lsblk data to look up the lvm volume used for rootfs (e.g. vg_raspicm56402-root)
            root_lv=$(lsblk -l ${luks_partition_device} | grep lvm | grep root | awk '{print $1}')
            root_dev="/dev/mapper/${root_lv}"
            echo -en " ${BMon}${root_dev}"${Boff}
            mount ${root_dev} ${newroot_mountpoint} && right_status $? || \
                die "failed to mount /dev/mapper/${root_lv}"
        # otherwise, identify the rootdev and mount it on newroot_mountpoint
        else
            # identify the name and UUID of the root device (LV if LUKS, part if not)
           identify_root_device || die "failed to identify_root_device for ${PN}"
           d_message "(${PN}) ROOT_DEVICE: $ROOT_DEVICE   ROOT_UUID: $ROOT_UUID" 5

            # use blkid data to idendify root_fs device (e.g. /dev/sdb)
            echo -en " ${LBon}${ROOT_DEVICE}${Boff}"
            mount ${ROOT_DEVICE} ${newroot_mountpoint} || die "failed to mount ${ROOT_DEVICE} ${newroot_mountpoint}"
            right_status $TRUE
        fi
        # if we get here, it should be successfully mounted
        right_status $TRUE
    else
        # use findmnt data to set root_dev
        eval $(findmnt -o TARGET,SOURCE -P | grep ${newroot_mountpoint})
        root_dev=${SOURCE}
        echo -e " ${BGon}yes${Boff}" ; right_status $TRUE
    fi
    # whether already mounted or just mounted, we can now go to newroot_mountpoint
    #   and if there is a mount-the-rest script, run it ( mount-the-rest-on-newroot() )
    return 0
}

mount-the-rest-on-newroot() {
    separator ${PN} "(${FUNCNAME[0]})"
    d_message "in ${FUNCNAME[0]}" 5

    old_dir=$(pwd)
    message_n "moving from $(pwd) to ${newroot_mountpoint} ..."
    cd ${newroot_mountpoint} && right_status $? || die "failed to cd ${newroot_mountpoint}"
    message "now working in $(pwd)"
    message_n "looking for mount-the-rest script"
    mount_the_rest_script="$(find ./ -iname 'mount-the-rest*' -type f -executable)" && right_status $? || \
        die "failed to find ./ -iname 'mount-the-rest*' -type f -executable"

    # "DANGER Will Robinson" - check the resulting script builds reliably, before sourcing it
#    exec ${mount_the_rest_script}
    source ${mount_the_rest_script}
    return 0
}

copy-content() {
    separator ${PN} "(${FUNCNAME[0]})"
    d_message "in ${FUNCNAME[0]}" 5

    # ok - now copy content
    msg="about to run cp -av /usr/${TARGET}/* ${newroot_mountpoint}/ \n"
    msg+="are you sure you want to continue"
    response="" ; new_prompt "${msg}"
    case ${response:0:1} in
        [yY] ) message "affirmative response [${response}] from user; continuing" ;;
        [sSnN] ) E_message "negative response [${response}] from user; quitting" ; exit 1 ;;
        * )  die "invalid response to run copy content prompt" ;;
    esac
    cp -av /usr/${TARGET}/* ${newroot_mountpoint}/ && \
        message "successfully ran cp -av /usr/${TARGET}/* ${newroot_mountpoint}/" || \
        die "failed to run cp -av /usr/${TARGET}/* ${newroot_mountpoint}/"

    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator "$(hostname)" "${PN}"
initialize_variables || die "failed to initialize variables"
[ $# -ne 2 ] && usage
OUTPUTDEVICE=$1
BOARD=$2
# board must be set in environment by calling script or manually
d_message "about to run validate_target ${BOARD}" 3
validate_target ${BOARD} || die "failed to validate_target [${BOARD}]"
validate_device ${OUTPUTDEVICE} || die "failed to validate_device [${OUTPUTDEVICE}]"

message "confirming BOARD is mounted on crossbuild TARGET ..."
check-target-board-loopmount ; result=$?
if [ $result -ne 0 ] ; then
    E_message "note red flags; consider correcting any issues before proceeding"
    confirm_continue_or_exit
else
    d_message "check-target-board-loopmount returned OK; continuing" 3
fi

# now that we are past initialization, add persistent external variables to varlist
varlist+=" BREAK BOARD TARGET partition_count loop_dev"
varlist+=" BREAK bool.VERBOSE verbosity bool.FLAGGED bool.ERROR"

# cb-layout-device gets bool.LUKS and keyfile during finalize_config
# it can't get edev until it creates one, be we can get both now
prep-newroot || die "failed to prep-newroot"

display_configuration || die "failed to display_configuration"
echo
format_warning || die "failed format warning somehow, oddly"
partition_count=$(lsblk -n -o TYPE,KNAME ${OUTPUTDEVICE} | grep "part" | wc -l)
d_message "partition_count: $partition_count" 2
if [ ${partition_count} -gt 1 ] ; then
    mount-the-rest-on-newroot || die "failed to mount-the-rest-on-newroot"
else
    message "partition_count is [${partition_count}] so mount-the-rest is N/A; skipping"
fi

copy-content || die "failed to copy-content"

separator "(wrapping up)" ${PN}
message_n "moving from $(pwd) to ${old_dir} ..."
cd ${old_dir} && right_status $? || die "failed to cd ${old_dir}"
message "now working in $(pwd)"

exit 0
