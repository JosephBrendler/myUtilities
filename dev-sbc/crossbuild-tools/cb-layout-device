#!/bin/bash
#
# umount   (c) joe.brendler  2025-2072
# copy appropriate template files into crossbuild target filesystem
#

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
#verbosity=2
verbosity=3

#-----[ variables ]-------------------------------------------------------------------------

PN=$(basename $0)

varlist="OUTPUTDEVICE"
varlist+=" outputdevice_sector_size_bytes MiB disklabel_type"
varlist+=" configfile DEV_HOSTNAME bool.LUKS"
varlist+=" crypt_keydev crypt_keydev_type crypt_keydev_mountpoint keyfile"
varlist+=" root_vg root_dev_mountpoint mounttherestscript chrootprepscript chrootcommandsfile"
varlist+=" BREAK bool.VERBOSE verbosity bool.FLAGGED bool.ERROR"

hidden_varlist="crypt_passphrase partition_device luks_partition_device"
#-----[ functions ]-------------------------------------------------------------------------

initialize_variables() {

    message_n "sourcing cb-common-functions ..."
    source /usr/sbin/cb-common-functions ; right_status $?

    initialize_vars ${varlist}
    initialize_vars ${hidden_varlist}

    message_n "sourcing BUILD ..."
    source /etc/crossbuild-tools/BUILD ; right_status $?

    message_n "sourcing BPN ..."
    source /etc/crossbuild-tools/BPN ; right_status $?

    message_n "re-initializing VERBOSE = TRUE ..."
    VERBOSE=$TRUE ; right_status $?
    message_n "re-initializing verbosity = 3 ..."
    verbosity=3 ;  right_status $?

    message_n "initializing configfile = /etc/crossbuild-tools/cb-layout-device.conf"
    configfile=/etc/crossbuild-tools/cb-layout-device.conf  ; right_status $?

    message_n "sourcing cb-layout-device.conf ..."
    if [ -e ${configfile} ] ; then
        source ${configfile} ; result=$?
        if [ $result -eq 0 ] ; then
            right_status $TRUE
        else
            right_status 1
            die "failed to source ${configfile}"
        fi
    else
        right_status 1
        die "${configfile} does not exist"
    fi

    message_n "initializing MiB = \$((1024 * 1024)) ..."
    MiB=$((1024 * 1024)) ; right_status $?
    message_n "initializing outputdevice_sector_size_bytes = 512 ..."
    outputdevice_sector_size_bytes=512 ; right_status $?

    message_n "initializing crypt_keydev_mountpoint = /mnt/key ..."
    crypt_keydev_mountpoint=/mnt/key ; right_status $?

    message_n "initializing root_dev_mountpoint = /mnt/gentoo ..."
    root_dev_mountpoint="/mnt/gentoo" ; right_status $?

    message_n "initializing mounttherestscript = ${root_dev_mountpoint%/}/mount-the-rest.${DEV_HOSTNAME} ..."
    mounttherestscript="${root_dev_mountpoint%/}/mount-the-rest.${DEV_HOSTNAME}" ; right_status $?

    message_n "initializing chrootprepscript = ${root_dev_mountpoint%/}/chroot-prep ..."
    chrootprepscript="${root_dev_mountpoint%/}/chroot-prep" ; right_status $?

    message_n "initializing chrootcommandsfile = ${root_dev_mountpoint%/}/chroot-commands ..."
    chrootcommandsfile="${root_dev_mountpoint%/}/chroot-commands" ; right_status $?

    message_n "initializing default LUKS = FALSE ..."
    LUKS=$FALSE ; right_status $?

    message_n "initializing default OUTPUTDEVICE NULL ..."
    OUTPUTDEVICE="" ; right_status $?

    return 0
}

usage() {
    E_message "${BRon}usage: ${BGon}${PN} <OUTPUTDEVICE>${Boff}"
    echo
    message "${PN} requires exactly one valid device name as its only argument"
    message "these candidate devices are present in your system but not mounted"
    echo
    list_unused_disks
    echo
    source /etc/${BPN}/local.usage
    exit 1
}

# non-stty-separator() ...... moved to /usr/sbin/script_header_joetoo_extended
# non-stty-right_status () ..  moved to /usr/sbin/script_header_joetoo_extended

list_unused_disks() {
    # set this now because doing so will be an inappropriate use of io control for stdin during while loop's redirection for "read line"
    TERMWIDTH=$(termwidth)
    # read every line of lsblk (NAME, TYPE, MOUNTPOINT columns)
    while read line ; do
        # use eval to interpret the -P pairs as variable assignments
        eval ${line}
        if [[ "${TYPE}" == "disk" ]] ; then
            # look for disks with no children (TYPE crypt, part, lvm) mounted
            candidate_name=$NAME ; candidate_type=$TYPE
            INUSE=$FALSE
            message_n "checking ${candidate_type} ${candidate_name} ..."
            while read innerline; do
                eval ${innerline}
                if [[ ! -z ${MOUNTPOINTS} ]] || [[ ! -z "$(findmnt | grep ${NAME})" ]] ; then
                    INUSE=$TRUE
                fi
            done <<<$(lsblk -P -o NAME,TYPE,MOUNTPOINTS /dev/${candidate_name})
            if [[ ! $INUSE ]] ; then
                echo -en "${BGon}(not in use) ${BMon}/dev/${candidate_name}${Boff}"
                non-stty-right_status $TRUE
                lsblk /dev/${candidate_name} | sed 's|^|    |'
            else
                echo -en "${BRon}(in use)${Boff}"
                non-stty-right_status 1
            fi
        fi
    done <<<$(lsblk -P -o NAME,TYPE,MOUNTPOINTS)
    return 0
}

validate_config() {
    # if we got here, the config was successfully sourced - so examine what was assigned
    # examine outputdevice_sector_size_bytes [ number ]
    separator "(validate_config)" ${PN}
    message_n "examining outputdevice_sector_size_bytes ..."
    isnumber $outputdevice_sector_size_bytes ; result=$?
    if [ $result -eq 0 ] ; then
        right_status $TRUE
    else
        right_status 1
        die "invalid outputdevice_sector_size_bytes [${outputdevice_sector_size_bytes}]"
    fi

    # examine disklabel_type [ dos or gpt ]
#    message_n "examining disklabel_type [ dos or gpt ] ..."
    message_n "examining disklabel_type [${disklabel_type}] ..."
    case ${disklabel_type} in
        "dos"|"gpt" ) right_status $TRUE ;;
        * ) right_status 1; die "invalid disklabel_type [${disklabel_type}]" ;;
    esac

    # examine partition_list
    ERROR=$FALSE
    LUKS=$FALSE
    message "examining partition_list ..."
    for ((i=0; i<${#partition_list[@]}; i++)); do
        d_message "partition_list[${i}]: ${partition_list[${i}]}" 5
        partnum=$(($i + 1))
        start_sector=$(echo ${partition_list[${i}]} | cut -d',' -f1)
        size_mb=$(echo ${partition_list[${i}]} | cut -d',' -f2)
        format=$(echo ${partition_list[${i}]} | cut -d',' -f3)
        d_message "partnum: ${partnum};   start_sector: ${start_sector};   size_mb: $size_mb;   format: $format" 5
        # examine start_sector for partition 1 only [ number ]
        message_n "  part $i"
        if [ ${partnum} -eq 1 ] ; then
            isnumber $start_sector; result=$?
            if [ $result -eq 0 ] ; then
#                echo -en " start_sector [num] [${start_sector}] ${BGon}ok${Boff}"
                echo -en " start_sector [${start_sector}] ${BGon}ok${Boff}"
            else
#                echo -en " start_sector [num] [${start_sector}] ${BRon}invalid${Boff}"
                echo -en " start_sector [${start_sector}] ${BRon}invalid${Boff}"
                ERROR=$TRUE
            fi
        else
            echo -en " start_sector ${BGon}NA${Boff}"
        fi
        # examine size_mb for partitions other than the last [ number ]
        if [ ${partnum} -ne ${#partition_list[@]} ] ; then
            isnumber $size_mb; result=$?
            if [ $result -eq 0 ] ; then
#                echo -en "; size_mb [num] [${size_mb}] ${BGon}ok${Boff}"
                echo -en "; size_mb [${size_mb}] ${BGon}ok${Boff}"
            else
#                echo -en "; size_mb [num] [${size_mb}] ${BRon}invalid${Boff}"
                echo -en "; size_mb [${size_mb}] ${BRon}invalid${Boff}"
                ERROR=$TRUE
            fi
        else
            echo -en "; size_mb ${BGon}NA${Boff}"
        fi
        # examine format for all partitions [ bios, vfat, ext4, or luks ]
#        echo -en "; format [bios|vfat|ext4|luks] [${format}]"
        echo -en "; format [${format}]"
        case $format in
            "bios"|"vfat"|"ext4" ) echo -en " ${BGon}ok${Boff}" ;;
            "luks" ) echo -en " ${BGon}ok${Boff}" ; LUKS=$TRUE ;;
            * ) echo -en " ${BRon}invalid${Boff}"; ERROR=$TRUE ;;
        esac
        echo
    done
    [ $ERROR ] && die "Error(s) in configuration of partition_list"

    # examine the rest only if there is a luks-formatted partition
    if [ $LUKS ] ; then
        # ignore DEV_HOSTNAME for now - verify explicitly later
        # examine crypt_keydev [ block device ]
        get_luks_keyfile ${crypt_keydev}
        d_message "get_luks_keyfile() returned keyfile: [${keyfile}]" 5
        # examine crypt_keydev_mountpoint [ directory ]
        # ignore crypt_passphrase for now - verify explicitly later

        # examine lv_list
        ERROR=$FALSE
        message "examining lv_list ..."
        for ((i=0; i<${#lv_list[@]}; i++)); do
            d_message "lv_list[${i}]: ${lv_list[${i}]}" 5
            lvnum=$(($i + 1))
            name=$(echo ${lv_list[${i}]} | cut -d',' -f1)
            size_gb=$(echo ${lv_list[${i}]} | cut -d',' -f2)
            format=$(echo ${lv_list[${i}]} | cut -d',' -f3)
            d_message "lvnum: ${lvnum};   name: ${name};   size_gb: $size_gb;   format: $format" 5
            message_n "lvnum: ${lvnum}"
            # examine name [ non-zero string ]
#            echo -en "; name [ string ] [${name}]"
            echo -en "; name [${name}]"
            [ -n "${name}" ] && echo -en " ${BGon}ok${Boff}" || (echo -en " ${BGon}ok${Boff}" && ERROR=$TRUE)
            # examine size_gb [ number ]
#            echo -en "; size_gb [num] [${size_gb}]"
            echo -en "; size_gb [${size_gb}]"
            isnumber $size_gb; result=$?
            [ $result -eq 0 ] && echo -en " ${BGon}ok${Boff}" || (echo -en " ${BRon}invalid${Boff}" && ERROR=$TRUE)
            # examine format [ ext4, swap ]
#            echo -en "; format [swap|ext4] [${format}]"
            echo -en "; format [${format}]"
            case $format in
                "swap"|"ext4" ) echo -en " ${BGon}ok${Boff}" ;;
                * ) echo -en " ${BRon}invalid${Boff}"; ERROR=$TRUE ;;
            esac
            echo
        done
        [ $ERROR ] && die "Error(s) in configuration of lv_list"
    fi
    return 0
}

set-crypt_passphrase() {
#  set crypt_passphrase
    response=""
    message "${BYon}Please provide the crypt_passphrase for this system${Boff}"
    message "${BMon}This will be used in formatting luks-encrypted partition(s)${Boff}"
    echo
    echo -en " ${BGon}*${Boff} Enter crypt_passphrase: "
    read -s candidate1 ; echo
    echo -en " ${BGon}*${Boff} re-enter to confirm crypt_passphrase: "
    read -s candidate2 ; echo
    if [[ "${candidate1}" == "${candidate2}" ]] ; then
        message_n "setting crypt_passphrase ..."
        export crypt_passphrase="${candidate1}" ; result=$? && \
        ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
        ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && return 1 )
    else
        die "candidate crypt_passphrases did not match"
    fi
    return 0
}

set-DEV_HOSTNAME() {
#  set DEV_HOSTNAME
    response=""
    message "${BYon}Please provide the hostname for this system${Boff}"
    message "${BMon}This will be used in naming volume groups used in cryptsetup layout${Boff}"
    echo
    while [[ ! "${response}" == [yYsS] ]] ; do
        echo -en "${BGon}*${Boff} set hostname for this system: "
        read candidate
        message "you responded [ ${candidate} ]"
        new_prompt "is this correct?"
    done
    if [[ "${response}" == [yY] ]] ; then
        message_n "setting DEV_HOSTNAME: ${candidate}"
        export DEV_HOSTNAME="${candidate}" ; result=$? && \
        ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
        ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && return 1 )
    else
        die "candidate hostname provided, then rejected"
    fi
    return 0
}

finalize_config() {
    separator "(finalize_config)" ${PN}
    # this function only runs for LUKS, so sanity check that
    if [ ${#partition_list[@]} -eq 1 ] ; then
        E_message "luks format is requested, but there is only 1 partition defined"
        die "invalid partition configuration for luks"
    else
        d_message "luks format requested; and more than 1 partition: ok" 3
    fi
    # check/get DEV_HOSTNAME
    if [ -z $DEV_HOSTNAME ] ; then
        msg="DEV_HOSTNAME is unset; please provide one"
        set-DEV_HOSTNAME
        d_message "DEV_HOSTNAME: $DEV_HOSTNAME" 3
    else
        d_message "DEV_HOSTNAME already assigned" 3
    fi
    # now that it has been checked, use DEV_HOSTNAME to set root_vg
    export root_vg="vg_${DEV_HOSTNAME}"

    # check/get luks passphrase
    if [ -z $crypt_passphrase ] ; then
        msg="crypt_passphrase is unset; please provide one"
        set-crypt_passphrase
###        d_message "crypt_passphrase: $crypt_passphrase"
    else
        d_message "crypt_passphrase already set" 3
    fi
}

layout_partitions() {
    separator "(layout_partitions)" ${PN}
    d_message "in layout_partitions" 3
    # calculate disk size in MiB
    #  (to-do: use this for relative layout sizing on device or arbitrary size)
    disksize_bytes=$(fdisk -l ${OUTPUTDEVICE} | head -n1 | awk '{print $5}')
    d_message "disksize_bytes: $disksize_bytes" 3
    disksize_mb=$(( $disksize_bytes / $((1024 * 1024)) ))
    d_message "disksize_mb: $disksize_mb" 3
    # Create partition table
    message_n "making disk label ..."
    case ${disklabel_type} in
        "dos" ) parted -s "${OUTPUTDEVICE}" mklabel msdos ; right_status $? ;;
        "gpt" ) parted -s "${OUTPUTDEVICE}" mklabel gpt ; right_status $? ;;
        *     ) die "invalid disklabel_type [${disklabel_type}]"
    esac
    # for each partition, calculate start, end and use parted to create/set according to disk label type and format
    for ((i=0; i<${#partition_list[@]}; i++)); do
        partnum=$(($i + 1))
        # for partition 1 calculate the start in MiB, for others, use the previous end
        if [ ${partnum} -eq 1 ] ; then
            # caclulate partition 1 - 2 breakpoint in MiB
            start_sector=$(echo ${partition_list[${i}]} | cut -d',' -f1)
            start_byte=$(($outputdevice_sector_size_bytes * $start_sector));
            d_message "partnum ${partnum} start_byte: $start_byte" 3
            start_mb=$(($start_byte / $MiB))
            d_message "partnum ${partnum} start_mb: $start_mb" 3
        else
            start_mb=${previous_end_mb}
        fi
        # read size from partition list
        size_mb=$(echo ${partition_list[${i}]} | cut -d',' -f2)
        end_mb=$(($start_mb + $size_mb))
        # create partition
        message_n "creating partition ${partnum} ..."
        # for all but the last partition, use size read from partition list; for last, use the rest of the device
        if [ ${partnum} -eq ${#partition_list[@]} ] ; then
            parted -s "${OUTPUTDEVICE}" mkpart primary ${start_mb}MiB 100%; right_status $?
        else
            parted -s "${OUTPUTDEVICE}" mkpart primary ${start_mb}MiB ${end_mb}MiB; right_status $?
        fi
        # set partition type ( according to format bios|vfat|ext4|luks )
        format=$(echo ${partition_list[${i}]} | cut -d',' -f3)
        message_n "setting partition ${partnum} type for [${disklabel_type}] label, format: [${format}] "
        case ${format} in
            "bios" ) # on dos NA; on gpt for bios-boot partition (not formatted)
                case ${disklabel_type} in
                    "dos" ) part_type_id="0c" ;;
#                    "gpt" ) part_type_id="21686148-6449-6E6F-744E-656564454649" ;;  # 4
                    "gpt" ) part_type_id="ef02" ;;  # 4 (see admin_files/gdisk_menu_and_partition_type_codes)
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac  ;;
            "vfat" ) # on dos for boot_fs; on gpt for efi_fs
                case ${disklabel_type} in
                    "dos" ) part_type_id="0c" ;;
                    "gpt" ) part_type_id="C12A7328-F81F-11D2-BA4B-00A0C93EC93B" ;;  # 1
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac  ;;
            "ext4" ) # on dos for root_fs; on gpt for boot_fs
                case ${disklabel_type} in
                    "dos" ) part_type_id="83" ;;
                    "gpt" ) part_type_id="0FC63DAF-8483-4772-8E79-3D69D8477DE4" ;;  # 20
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac  ;;
            "luks" ) # on dos, gpt for partitions mountable on directories in root
                # set lvm flag on
                case ${disklabel_type} in
                    "dos" ) part_type_id="8e" ;;
                    "gpt" ) part_type_id="E6D6D379-F507-44C2-A23C-238F2A3DF928" ;;  # 44
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac  ;;
            * ) die "invalid format [${format}]" ;;
        esac
        # now actually set the type for the paqrtition
        # (man parted)  parted -s /dev/device type <partnum> <id/uuid>
        # (man sgdisk)  sgdisk -t 1:<type-code> /dev/device (see admin_files/gdisk_menu_and_partition_type_codes)
        # NOTE: both sgdisk and fdisk (specifically in its GPT mode) automatically designate
        # the first partition of a GPT disk as an EFI System Partition (ESP)
        d_message "\nabout to run parted -s \"${OUTPUTDEVICE}\" type ${partnum} \"${part_type_id}\"" 5
        parted -s "${OUTPUTDEVICE}" type ${partnum} "${part_type_id}" ; result=$?

# leave this for now as example sgdisk alternative to parted (both should work with both dos/gpt now)
#        case ${disklabel_type} in
#            "dos" )
#                d_message "\nabout to run parted -s \"${OUTPUTDEVICE}\" type ${partnum} \"${part_type_id}\"" 5
#                parted -s "${OUTPUTDEVICE}" type ${partnum} "${part_type_id}" ; result=$?
#                ;;
#            "gpt" )
#                d_message "\nabout to run sgdisk -t ${partnum}:${part_type_id} ${OUTPUTDEVICE}" 5
#                sgdisk -t ${partnum}:${part_type_id} ${OUTPUTDEVICE} ; result=$?
#                ;;
 #           * ) die "invalid disklabel_type [${disklabel_type}]" ;;
 #       esac
        [ $result -eq 0 ] && ( echo -en " ${BGon}(${part_type_id} set)${Boff}"; right_status $result) || \
            ( echo -en " ${BRon}(error)${Boff}"; right_status $result)
        if [ $partnum -eq 1 ] ; then
            # set partition 1 bootable flag on
            message_n "setting partition 1 bootable flag on ..."
            parted -s "${OUTPUTDEVICE}" set 1 boot on ; right_status $?
        fi
        if [ $partnum -eq ${#partition_list[@]} ] && [[ "${format}" == "luks" ]] ; then
            # set last partition lvm flag on, if format was luks
                message_n "setting partition ${partnum} lvm flag on ..."
                parted -s "${OUTPUTDEVICE}" set ${partnum} lvm on ; right_status $?
        fi
        # set up "previous" end for next partition
        previous_end_mb=${end_mb}
    done

    return 0
}

format_partitions() {
    separator "(format_partitions)" ${PN}
    d_message "in format_partitions" 3
    # for each partition, format accordingly
    for ((i=0; i<${#partition_list[@]}; i++)); do
        partnum=$(($i + 1))
        # get the device name for this partition
        message_n "getting device name for partition ${partnum} ..."
        partition_device=$(fdisk -l ${OUTPUTDEVICE} | grep -E "^${OUTPUTDEVICE}p?${partnum}" | awk '{print $1}') ; result=$?
        echo -n " (${partition_device})" ;  right_status ${result}
        # format partition according to layout (disklabel)  type and according to format (bios|vfat|ext4|luks )
        format=$(echo ${partition_list[${i}]} | cut -d',' -f3)
        message_n "formatting partition ${partnum} [${format}] ..."
        case ${format} in
            "bios" ) # on dos NA; on gpt for bios-boot partition (not formatted)
                echo -en " (no formatting for bios-boot)" ; right_status $? ;;
            "vfat" ) # on dos for boot_fs; on gpt for efi_fs
                case ${disklabel_type} in
                    "dos" ) mkfs.vfat -F 32 -n boot_fs "${partition_device}" ; right_status $? ;;
                    "gpt" ) mkfs.vfat -F 32 -n efi_fs "${partition_device}" ; right_status $? ;;
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac ;;
            "ext4" ) # on dos for root_fs; on gpt for boot_fs
                case ${disklabel_type} in
                    "dos" ) mkfs.ext4 -L root_fs "${partition_device}" ; right_status $? ;;
                    "gpt" ) mkfs.ext4 -L boot_fs "${partition_device}" ; right_status $? ;;
                    * ) die "invalid disklabel_type [${disklabel_type}]" ;;
                esac ;;
            "luks" ) # on dos, gpt for partitions mountable on directories in root
                # add control-wrapper for dd (aka disk-destroyer)
                echo -e " (${format})"
                export luks_partition_device=${partition_device}
                message "${BYon}about to run dd if=/dev/urandom of=${partition_device} bs=4M status=progress${Boff}" ;
                msg="${BYon}Caution:${BWon} this will ${BRon}destroy ${BMon}all data${BWon} on ${partition_device}${Boff}, and ${BYon}it will take a while${Boff}\n" ;
                msg+="${BWon}Are you sure you want to continue? ${LBon}(y: run dd | s: skip & continue | n: quit)${Boff}" ;
                response="" ; new_prompt "${msg}" ;
                case ${response:0:1} in
                    [yY] ) dd if=/dev/urandom of="${partition_device}" bs=4M status=progress ;;
                    [sS] ) message "skip response [${response}] from user; continuing" ;;
                    [nN] ) E_message "negative response [${response}] from user; quitting"; return 1 ;;
                    * ) die "invalid response" ;;
                esac ;;
            * ) die "invalid format [${format}]" ;;
        esac
        # set up "previous" end for next partition
        previous_end_mb=$((${start_mb} + ${size_mb}))
    done
    return 0

}

layout_cryptsetup() {
    ERROR=$FALSE
    separator "(layout_cryptsetup)" ${PN}
    d_message "in layout_cryptsetup" 3
    # run cryptsetup luksFormat (provide passphrase it will ask for)
    d_message "about to use passphrase to run cryptsetup -q luksFormat ${luks_partition_device}" 3
    message_n "formatting luks_partition_device [${luks_partition_device}] ..."
    eval "echo -n ${crypt_passphrase} | cryptsetup -q luksFormat ${luks_partition_device}"
    result=$? ; right_status $result ; [ $result -eq 0 ] || die "cryptsetup failed to luksFormat ${luks_partition_device}"
    # run cryptsetup luksAddKey (should already be mounted) (provide passphrase it will ask for)
    message_n "about to use passphrase to add keyfile with cryptsetup luksAddKey ${luks_partition_device} ${keyfile} ..."
    eval "echo -n ${crypt_passphrase} | cryptsetup luksAddKey ${luks_partition_device} ${keyfile}"
    result=$? ; right_status $result ; [ $result -eq 0 ] || die "cryptsetup failed to luksAddKey ${luks_partition_device} ${keyfile}"
    get_luks_edev_name && result=$? || die "failed to get_luks_edev_name"
    echo -en " ${BGon} (${edev})${Boff}"
    right_status $result ; [ $result -eq 0 ] || ERROR=$TRUE
    # open (unlock) the device
    cryptsetup luksOpen -d ${keyfile} ${luks_partition_device} ${edev} : result=$?
    right_status $result ; [ $result -eq 0 ] || ERROR=$TRUE
    # create PV
    message_n "creating PV /dev/mapper/${edev} ..."
    pvcreate /dev/mapper/${edev} >/dev/null && right_status $? || \
        die "failed to pvcreate /dev/mapper/${edev} >/dev/null"
    # create VG
    message_n "creating VG vg_${DEV_HOSTNAME} ..."
    vgcreate vg_${DEV_HOSTNAME} /dev/mapper/${edev} >/dev/null && right_status $? || \
        die "failed to vgcreate vg_${DEV_HOSTNAME} /dev/mapper/${edev} >/dev/null"
    # create LVs (todo: automate with relative sizing)
    for ((i=0; i<${#lv_list[@]}; i++)) ; do
        d_message "lv_list[${i}]: ${lv_list[${i}]}" 5
        # read settings in this lv_list entry
        lv_name=$(echo ${lv_list[${i}]} | cut -d',' -f1)
        lv_size_gb=$(echo ${lv_list[${i}]} | cut -d',' -f2)
        lv_format=$(echo ${lv_list[${i}]} | cut -d',' -f3)
        # sanity check settings in this lv_list entry
        result=0
        message_n "sanity check:"
        echo -en " lv_name [$lv_name]"; [[ ! -z "${lv_name}" ]] ; result=$?
            [ $result -eq 0 ] && echo -en " ${BGon}ok${Boff}" || ( echo -en " ${BRon}error${Boff}" && ERROR=$TRUE )
        echo -en "; lv_size_gb [$lv_size_gb]" ; isnumber $lv_size_gb ; result=$?
            [ $result -eq 0 ] && echo -en " ${BGon}ok${Boff}" || ( echo -en " ${BRon}error${Boff}" && ERROR=$TRUE )
        echo -en "; lv_format [$lv_format]" ; [[ "$lv_format" == @(ext4|swap) ]] ; result=$?
            [ $result -eq 0 ] && echo -en " ${BGon}ok${Boff}" || ( echo -en " ${BRon}error${Boff}" && ERROR=$TRUE )
        right_status $result
        [ $result -eq 0 ] || die "error in LV configuration"
        # now create the LV
        message_n "running lvcreate -n \"${lv_name}\" -L ${lv_size_gb}G ${root_vg} ..."
        lvcreate -n "${lv_name}" -L ${lv_size_gb}G ${root_vg} >/dev/null && right_status $? || \
            die "failed to lvcreate -n "${lv_name}" -L ${lv_size_gb}G ${root_vg} >/dev/null"
    done
    # format all as ext4; then redo swap
    message "formatting new LVs ..."
    yes | for x in /dev/mapper/vg_${DEV_HOSTNAME}-* ; do
        myfs=$(echo $x | sed "s|/dev/mapper/vg_${DEV_HOSTNAME}-||") ;
        mkfs.ext4 -L "${myfs}_fs" $x >/dev/null 2>/dev/null && \
            message "successfully ran mkfs.ext4 -L "${myfs}_fs" $x >/dev/null" || \
            die "failed to mkfs.ext4 -L "${myfs}_fs" $x >/dev/null"
    done
    message_n "reformatting /dev/mapper/vg_${DEV_HOSTNAME}-swap as swap ..."
    mkswap /dev/mapper/vg_${DEV_HOSTNAME}-swap >/dev/null 2>/dev/null && right_status $? || \
        die "failed to mkswap /dev/mapper/vg_${DEV_HOSTNAME}-swap >/dev/null"
    # mount the new root device
    message_n "mounting new root dev [ /dev/mapper/vg_${DEV_HOSTNAME}-root ] ..."
    mount /dev/mapper/vg_${DEV_HOSTNAME}-root ${root_dev_mountpoint} ; right_status
    cd ${root_dev_mountpoint}
    # determine the UUID of the boot device
    boot_device="$(blkid | grep ${OUTPUTDEVICE} | grep boot_fs | cut -d':' -f1)"
    message_n "determining UUID of boot device [ $boot_device ] ..."
#    BOOT_UUID=$(blkid $boot_device -o export | grep '^UUID' | cut -d'=' -f2)
#    eval $(blkid --probe $boot_device | sed "s|^${boot_device}: ||")
#    BOOT_UUID=${UUID}
    BOOT_UUID="$(blkid -o value -s UUID ${boot_device})"
    result=$?
    echo -en "( $BOOT_UUID )"
    right_status $result
    # capture the rest of boot_device blkid data
    message_n "capturing the rest of boot_device blkid data ..."
    boot_dev_blkid_data="$(blkid | grep $boot_device | sed 's|^|#|')" ; right_status $?

    # create mount-the-rest script
    message_n "creating ${mounttherestscript} ..."
    echo "#!/bin/bash" > ${mounttherestscript}
    echo "root_vg=vg_${DEV_HOSTNAME}" >> ${mounttherestscript}
    echo "boot_uuid=${BOOT_UUID}" >> ${mounttherestscript}
    echo "mountpoint=${root_dev_mountpoint}" >> ${mounttherestscript}
    echo "# (create and/or) mount LVs" >> ${mounttherestscript}
    echo -n 'for x in $(lvs | grep ${root_vg} | grep -v "root\|swap\|extra" | awk '  >> ${mounttherestscript}
    echo -n "'" >> ${mounttherestscript}
    echo -n "{print \$1}" >> ${mounttherestscript}
    echo -n "'" >> ${mounttherestscript}
    echo  ') ; do' >> ${mounttherestscript}
    echo '    [ ! -d ${mountpoint%/}/$x ] && echo "mkdir ${mountpoint%/}/$x..." && mkdir ${mountpoint%/}/$x' >> ${mounttherestscript}
    echo '    mount /dev/mapper/${root_vg}-$x ${mountpoint%/}/$x' >> ${mounttherestscript}
    echo 'done' >> ${mounttherestscript}
    echo '# display results' >> ${mounttherestscript}
    echo 'echo "here is what I mounted..."' >> ${mounttherestscript}
    echo 'mount | grep ${mountpoint}' >> ${mounttherestscript}
    echo 'echo' >> ${mounttherestscript}
    echo '# explain how to mount boot' >> ${mounttherestscript}
    echo '[ ! -d ${mountpoint%/}/boot ] && echo "mkdir ${mountpoint%/}/boot ..." && mkdir ${mountpoint%/}/boot' >> ${mounttherestscript}
    echo "echo \"mount "'${mountpoint%/}'"/boot as below now, or at /boot AFTER chroot (see fstab)\"" >> ${mounttherestscript}
    echo "echo \"# mount UUID=${BOOT_UUID} "'${mountpoint%/}'"/boot\"" >> ${mounttherestscript}
    echo "echo \"# doing so now for cb-flash-device (comment out below if not needed)\"" >> ${mounttherestscript}
    echo "" >> ${mounttherestscript}
    echo "mount UUID=${BOOT_UUID} ${root_dev_mountpoint}/boot" >> ${mounttherestscript}
    echo "" >> ${mounttherestscript}
    echo "# ${boot_dev_blkid_data}" >> ${mounttherestscript}
    chmod +x ${mounttherestscript}
    right_status $?

    # create chroot-prep
    message_n "creating ${chrootprepscript} ..."
    echo '[ ! -d /mnt/gentoo/run ] && mkdir /mnt/gentoo/run' > ${chrootprepscript}
    echo 'mount --types proc proc /mnt/gentoo/proc' >> ${chrootprepscript}
    echo 'mount --rbind /sys /mnt/gentoo/sys' >> ${chrootprepscript}
    echo 'mount --make-rslave /mnt/gentoo/sys' >> ${chrootprepscript}
    echo 'mount --rbind /dev /mnt/gentoo/dev' >> ${chrootprepscript}
    echo 'mount --make-rslave /mnt/gentoo/dev' >> ${chrootprepscript}
    echo 'mount --bind /run /mnt/gentoo/run' >> ${chrootprepscript}
    echo 'mount --make-rslave /mnt/gentoo/run' >> ${chrootprepscript}
    echo '' >> ${chrootprepscript}
    echo 'test -L /dev/shm && rm /dev/shm && mkdir /dev/shm' >> ${chrootprepscript}
    echo 'mount --types tmpfs --options nosuid,nodev,noexec shm /dev/shm' >> ${chrootprepscript}
    echo 'chmod 1777 /dev/shm' >> ${chrootprepscript}
    chmod +x ${chrootprepscript}
    right_status $?

    # create chroot-commands file
    message_n "creating ${chrootcommandsfile} ..."
    echo 'chroot /mnt/gentoo /bin/bash' > ${chrootcommandsfile}
    echo 'env-update' >> ${chrootcommandsfile}
    echo 'source /etc/profile' >> ${chrootcommandsfile}
    echo 'export PS1="(chroot) $PS1"' >> ${chrootcommandsfile}
    right_status $?

    [ $ERROR ] && return 1
    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator "$(hostname)" "${PN}"
initialize_variables || die "failed to initialize variables"
[ $# -ne 1 ] && usage
OUTPUTDEVICE=$1
validate_device ${OUTPUTDEVICE} || die "failed to validate device [ ${OUTPUTDEVICE} ]"
validate_config || die "failed to validate config"

if [ $LUKS ] ; then
    finalize_config || die "failed to finalize config"
fi

display_configuration || die "failed to display_configuration"

format_warning || die "failed format warning somehow, oddly"

layout_partitions || die "failed to layout partitions"
# re-validate device (really just to get the fdisk -l print out
# for visual confirmation prior to starting format
validate_device ${OUTPUTDEVICE} || die "failed to validate device [ ${OUTPUTDEVICE} ]"

format_partitions || die "failed to format partitions"

[ $LUKS ] && layout_cryptsetup || message "no luks layout requested; skipping"

message "layout complete"
message "${BYon}Hint:  use ${BGon}cb-flash-device <OUTPUTDEVICE>${Boff}"
message "        to populate the new device with data from a"
message "        mounted crossbuild target image file"

exit 0
