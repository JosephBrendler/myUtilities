#!/bin/bash
#
# cb-umount-binhost   (c) joe.brendler  2025-2072
# un-mount a crossbuild environment binhost image file from its associated MOUNTPOINT
#
# update 20251014 - use BACKING_FILE rather than BOARD as arg $1
#
source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
# set default verbosity only if it is not already set
[ -z $verbosity ] && verbosity=3

PN=$(basename $0)

user="joe"
stockpile_dir="/home/${user}/sbc-stockpile"

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?
TARGET=""

usage() {
    message "${BRon}usage: ${BGon}${PN} <BACKING_FILE>${Boff}"
    echo
    message "  ${LBon}<BACKING_FILE> must be a stockpiled SBC crossbuild image or environment file.${Boff}"
    message "  ${LBon}These are currently available --${Boff}"
    # set shell globbing options to count files in the mountpoint directory
    # nullglob ensures that a pattern matching no files expands to nothing
    # (rather than the pattern itself), and dotglob includes dotfiles (hidden files)
    # The files array will be empty if the directory is empty
    shopt -s nullglob dotglob
    images=("${stockpile_dir%/}"/*.env "${stockpile_dir%/}"/*.img)
    [ ${#images[@]} -eq 0 ] && die "There are no stockpiled crossbuild .env or .img files available"
    for image in ${images[@]}; do echo "         $(basename ${image})" ; done
    shopt -u nullglob dotglob # Unset the options after use
    echo
    message "${BMon}find additionl information at /etc/crossbuild-tools/README"
    exit 1
}


validate_stockpile_image() {
    # return 0 if properly named image file exists in the stockpile directory
    [ ! -f ${stockpile_dir%/}/${BACKING_FILE} ] && die "stockpile image file [${stockpile_dir%/}/${BACKING_FILE}] does not exist"
    return 0
}

get_mountpoint() {
    # inspect for loop devices attached to BACKING_FILE
    message_n "identifying loop_dev attached to ${stockpile_dir%/}/${BACKING_FILE} ..."
    export loop_dev=$(losetup -a | grep "${stockpile_dir%/}/${BACKING_FILE}" | cut -d':' -f1) && \
        echo -en " (${LBon}${loop_dev}${Boff})" || die "Failed to determine loop_dev"
    right_status $TRUE
    message_n "identifying mountpoint for loop_dev ..."
#    export MOUNTPOINT=$(mount | grep $loop_dev | head -n1 | awk '{print $3}') && \
    export MOUNTPOINT=$(findmnt -n -S ${loop_dev}p2 -o TARGET) && \
        echo -en " (${LBon}${MOUNTPOINT}${Boff})" || die "Failed to determine MOUNTPOINT"
    right_status $TRUE
    return 0
}

umount-binhost-board-from-mountpoint() {
    # inspect target (mount point) - is anything mounted? (un-mount)
    if [ ! -z "$(findmnt -n -M ${MOUNTPOINT})" ] ; then
        # something is mounted - un-mount it
        E_message "${BYon}the following devices are mounted on ${MOUNTPOINT} --${Boff}"
        mount | grep "on ${MOUNTPOINT}" | sed 's|^|    |'
        message_n "running umount -R ${MOUNTPOINT} ..."
        umount -R ${MOUNTPOINT} && right_status $? || die "failed to umount -R ${MOUNTPOINT}"
    else
        message "nothing is mounted on ${MOUNTPOINT} ; continuing"
    fi
    # detach the loop device from image file
    if [ -n "${loop_dev}" ] ; then
        message_n "detaching ${loop_dev} ..."
        losetup -d ${loop_dev} && right_status $? || die "failed to losetup -d ${loop_dev}"
    else
        message "no loop device is attached to /usr/${BOARD}.img ; continuing"
    fi
    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
[ $# -ne 1 ] && usage
BACKING_FILE=$1
separator "${PN}" "(${BACKING_FILE})"
# get BOARD from BACKING_FILE filename
# (remove the extension) (then remove the text from the first underscore onwards)
BOARD="${BACKING_FILE%.*}";  BOARD="${BOARD%%_*}"
d_message "BACKING_FILE: $BACKING_FILE" 3
d_message "BOARD: $BOARD" 3
validate_target ${BOARD} || die "Failed to validate_target [${BOARD}]"
validate_stockpile_image ${BACKING_FILE} || die "Failed to validate_stockpile_image ${BACKING_FILE}"
validate_target ${BOARD} || die "Failed to validate_target [${BOARD}]"
get_mountpoint ${BOARD} || die "Failed to get_mountpoint ${BOARD}"

old_dir="$(pwd)"
cd $(dirname ${MOUNTPOINT}) || die "Failed to change director to parent of mountpoint [${MOUNTPOINT}]"
message "now working in parent of crossbuild binhost MOUNTPOINT directory: [${Mon}$(pwd)${Boff}]"

umount-binhost-board-from-mountpoint

echo
cd $old_dir
message "now working in previous directory: [${Mon}$(pwd)${Boff}]"
exit 0
