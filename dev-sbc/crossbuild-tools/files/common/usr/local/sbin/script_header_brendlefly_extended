#!/bin/bash
#   script header with basic functions
# Author: brendlefly 26 Jan 2017
#
# NOTE: to use this header, you must first source the basic script_header_brendlefly
#

myBOX()     # draw an esc-seq single-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  local FG; local BG; local B
  # default position to centered, upper 1/3
  [[ -z $3 ]] && WT=50 || WT=$3; [[ -z $4 ]] && HT=15 || HT=$4
  [[ -z $1 ]] && ULrow=$(( $(termheight)/3 - $HT/2 )) || ULrow=$1
  [[ -z $2 ]] && ULcol=$(( $(termwidth)/2 - $WT/2 )) || ULcol=$2
  [[ -z $5 ]] && FG=${WHITE} || FG=$5; [[ -z $6 ]] && BG=${BACKoff} || BG=$6
  [[ -z $7 ]] && B=${SGRoff} || B=$7
  myBOX=${myBOX}${ESCon}
  myBOX=${myBOX}${Boff}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${UL_wall}$(repeat ${H_wall} ${WT})${UR_wall}${Boff}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${V_wall}$(repeat " " ${WT})${V_wall}${Boff}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})$(color ${FG} ${BG} ${B})${LL_wall}$(repeat ${H_wall} ${WT})${LR_wall}${Boff}"\n"
  myBOX=${myBOX}${ESCoff}
  CLR; CUP ${ULrow} 1
  printf "${myBOX}"
  CUP $(termheight) 1
  return 0
}

msgBOX()    # draw an esc-seq single-line message box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  local FG; local BG; local B; local TITLE; local MSG; local LINE
  # default position to centered, upper 1/3
  [[ -z $3 ]] && WT=50 || WT=$3; [[ -z $4 ]] && HT=15 || HT=$4
  [[ -z $1 ]] && ULrow=$(( $(termheight)/3 - $HT/2 )) || ULrow=$1
  [[ -z $2 ]] && ULcol=$(( $(termwidth)/2 - $WT/2 )) || ULcol=$2
  [[ -z $5 ]] && FG=${WHITE} || FG=$5; [[ -z $6 ]] && BG=${BACKoff} || BG=$6
  [[ -z $7 ]] && B=${SGRoff} || B=$7
  [[ -z $8 ]] && TITLE="Brendlefly MessageBox" || TITLE="$8"
  [[ -z $9 ]] && MSG="Message goes here..." || MSG="$9"

  myBOX "$ULrow" "$ULcol" "$WT" "$HT" "$FG" "$BG" "$B"
  LINE="${MSG:$(($WT - 4))}"
  # break message up into appropriate width chuncks, using a 2-space margin inside the box
  
  CUP $(termheight) 1
  return 0
}

my_u_BOX()  # draw a unicode single-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  [[ -z $1 ]] && ULrow=1 || ULrow=$1; [[ -z $2 ]] && ULcol=1 || ULcol=$2
  [[ -z $3 ]] && WT=50 || WT=$3;      [[ -z $4 ]] && HT=15 || HT=$4
  myBOX=${myBOX}$(repeat " " ${ULcol})${uUL_wall}$(repeat ${uH_wall} ${WT})${uUR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uV_wall}$(repeat " " ${WT})${uV_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uLL_wall}$(repeat ${uH_wall} ${WT})${uLR_wall}"\n"
  CLR; CUP ${ULrow} ${ULcol}
  printf "${myBOX}"
  return 0
}

my_uD_BOX() # draw a unicode double-line box
{
  local i; local ULrow; local ULcol; local WT; local HT; local myBOX=""
  [[ -z $1 ]] && ULrow=1 || ULrow=$1; [[ -z $2 ]] && ULcol=1 || ULcol=$2
  [[ -z $3 ]] && WT=50 || WT=$3;      [[ -z $4 ]] && HT=15 || HT=$4
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_UL_wall}$(repeat ${uD_H_wall} ${WT})${uD_UR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uD_V_wall}$(repeat " " ${WT})${uD_V_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_LL_wall}$(repeat ${uD_H_wall} ${WT})${uD_LR_wall}"\n"
  CLR; CUP ${ULrow} ${ULcol}
  printf "${myBOX}"
  return 0
}

#---[ RGB ]--------------------------------------------------------
#ToDo: experiment with rgb methods for color-setting
# NOTE: this might work in a Konsole or Gnome terminal, but not lxterminal!!
# see "well known" triplet values at https://en.wikipedia.org/wiki/ANSI_escape_code
#  RED=(205, 0, 0)
#  ESC[ ... 38;2;<r>;<g>;<b> ... m Select RGB foreground color
#  ESC[ ... 48;2;<r>;<g>;<b> ... m Select RGB background color
RGB_FG()    # echo esc seq color as RGB. (OK in Konsole/Gnome term, but not lxterminal)
{ local FG="38;2"; R=$1; G=$2; B=$3; echo -e "${CSI}${FG};${R};${G};${B}m" ; }
RGB_BG()    # echo esc seq color as RGB. (OK in Konsole/Gnome term, but not lxterminal)
{ local BG="48;2"; R=$1; G=$2; B=$3; echo -e "${CSI}${BG};${R};${G};${B}m" ; }

modular_msg() # Output modular chunks of a message within with a margin
{
[[ $# -gt 1 ]] && E_message "Too many arguments" && exit 1
local WT=0  ## width of box
local WIDTH=0 ## width between box margins
local LENGTH=0 ## length of current line

[[ -z $1 ]] && WT=70 || WT=$1
WIDTH=$(($WT - 4))

d_message "Box width=[${WT}]"
d_message "Available width=[${WIDTH}]"
# Break the message up into appropriate width chunks, with a 2-space margin, by inserting newline character
#   in place of appropriate spaces, or breaking words if the word itself is longer than the available width.
#   Don't split or count length of escape sequences
local i=1              ## line counter
local ESFLAG=$FALSE    ## flag to indicate whether the current character is part of an esc sequence
local c=0              ## character counter
local char=""          ## current character
local w=1              ## word counter
local WORD=("")        ## current word
local EOW=$FALSE       ## End of Word flag
local breakpoint=0     ## pointer to where we might break up a word
local LEFTOVER         ## part of a word that's left over if we have to break it up
local EOL=$FALSE       ## End of Line flag

d_message "MSG=[${MSG}]" 2
echo

MSG=$(echo "$MSG" | sed 's/^[ \t]*//')  # strip leading whitespace
d_message "stripped MSG=[${MSG}]" 2
echo

# fill one line, one character at at time, escape sequences don't have "length" to count
LINE[i]=""; let "LENGTH=0"  ## (re)initialize
d_message "Now working on line $i" 1
WORD[w]=""; let "WLEN=0"
d_message "Now working on word $w"
for ((c=0; c<${#MSG}; c++))
do
  ## fill a word until you get to a space or termination of escape sequence, then if it will fit, add the word
  #    to the current line, if not then if it's not just longer than a whole line, add it to the next, else split
  #    it to finish this and add the rest to the next
  char=${MSG:$c:1}
  d_message "  examining char $c, [${char}]" 3
  case "${char}" in
    '\' ) # escaped char(s) coming (this has no "length" so just keep adding to current word at no "length cost")
      ESFLAG=$TRUE
      d_message "Started escape sequence with special character [${char}]" 3
      ;;
    [tnrm] ) # these char's can terminate an escape sequence if ESFLAG is TRUE, if so they also terminate a word
      # or they can count as length if not part of an esc seq
      if [[ $ESFLAG ]]
      then
        EOW=$TRUE
        ESFLAG=$FALSE
        d_message "Terminated escape sequence and word with special character [${char}]" 3
      else
        let "WLEN+=1"
        d_message "Added (tnrm) character [${char}] to WORD[$w]" 3
      fi
      ;;
    " " )  # a space terminates a word
      EOW=$TRUE
      let  "WLEN+=1"
      d_message "Added space character [${char}] to WORD[$w]" 3
      ;;
    * ) # all other characters, handle depending on status of ESFLAG
      # count the char only if not part of an esc sequence
      if [[ ! $ESFLAG ]]; then let "WLEN+=1"; d_message "Added (non-special) char [${char}] to WORD[$w]" 3;
      else d_message "Added (non-special) char [${char}] to escape sequence WORD[$w]" 3; fi
      ;;
  esac
  WORD[w]+="${char}"  # add char to the current word
  d_message_n "${BYon}>>>${Boff}  " 3 ; [[ $verbosity -ge 3 ]] && d_echo "WORD[$w]=[${WORD[w]}]"
  d_message "ESFLAG=[$(status_color $ESFLAG)$(TrueFalse $ESFLAG)${Boff}]" 3
  d_message "EOW=[$(status_color $EOW)$(TrueFalse $EOW)${Boff}]" 3
  d_message "EOL=[$(status_color $EOL)$(TrueFalse $EOL)${Boff}]" 3

  # if we got to the end of the word, dispose of it and start a new one
  if
 [[ $EOW ]]
  then
    if [[ $((${LENGTH} + ${WLEN})) -lt ${WIDTH} ]]
    then   # its added length will fit, so just add the word to the current line, and count the new length
      LINE[i]+="${WORD[w]}"
      let "LENGTH+=${WLEN}"
      d_message "Disposed of word by adding to current line" 2
    elif [[ ${WLEN} -gt ${WIDTH} ]]
    then   # it is bigger than a whole line, so break it to put what will fit on the current line and put the rest on the next line
      breakpoint=$((${WIDTH} - ${LENGTH}))
      LINE[i]+="${WORD[w]:0:${breakpoint}}"
      LEFTOVER="${WORD[w]:${breakpoint}}"
      let "LENGTH+=${breakpoint}"
      EOL=$TRUE
      d_message "Disposed of word by breaking it at [${breakpoint}] to finish LINE[$i]; LEFTOVER=[${LEFTOVER}]" 2
    else   # close out this line, and add this word to the *next* line
      EOL=$TRUE
      LEFTOVER="${WORD[w]}"
      d_message "Disposed of word WORD[$w], which was too big to fit on LINE[$i] but fits the next, by deferring it; LEFTOVER=[${LEFTOVER}]" 2
    fi
    d_message_n "${BYon}Final word: ${Boff}" 2; d_echo "WORD[$w]=[${WORD[w]}], WLEN=[${WLEN}]"
    d_message_n "${BYon}Current line: ${Boff}" 1; d_echo "LINE[$i]=[${LINE[i]}], LENGTH=[${LENGTH}]"
    let "w+=1"; d_echo; d_message "Now working on word $w" 2
    WORD[w]=""; let "WLEN=0"; EOW=$FALSE  ## (re)initialize
  fi
  # if we filled the line, start a new one
  if [[ $EOL ]]
  then
    d_message_n "${BMon}Final line: ${Boff}" 1; d_echo "LINE[$i]=[${LINE[i]}], LENGTH=[${LENGTH}]"
    let "i+=1"; d_echo; d_message "Now working on line $i" 1
    LINE[i]="${LEFTOVER}"; let "LENGTH=${#LEFTOVER}"; LEFTOVER=""; EOL=$FALSE  ## (re)initialize
    d_message_n "Starting with LINE[$i]=" 1; d_echo "[${LINE[i]}], LENGTH=[${LENGTH}]"
  fi
done

}

bs()            # recursive binary search for $1 target(s) from $2 start(d) to $3 end(d) in search_list $@ (after 3 shifts)
{
  # return the index number of the entry in the list, or -1 if not found
  # expects VERBOSE, verbosity, and initial depth=0 to be set externally before first call to bs
  target="$1"; shift;  start="$1"; shift;  end="$1"; shift; remainder="$@"
  search_list=($(alpha_words ${remainder}))   # alphabetize the list so the binary search can work
  if [ $verbosity -ge 4 ] ; then
    message_n "search_list: ["
    echo -n "${search_list[@]}"
    echo "]"
    message "search_list length is [${#search_list[@]}]"
  fi
  let "result=-1"
  if [[ $depth -gt ${#search_list[@]} ]]
  then
    E_message "Something is wrong here -- depth [$depth] exceeds search_list [${#search_list[@]}]"
    return 1  # can't go deeper than the length of the list
  fi
  diff=$(( $end - $start ))
  middle=$(( $start + $(( $diff / 2 )) ))
  ## guarantee to look at both start and end before giving up
  if [[ ${diff} -eq 1 ]]; then let "middle+=$(( ${depth} % 2 ))"; else DIFF1UPPER=$FALSE; DIFF1LOWER=$FALSE; fi
  d_message " depth=[$depth]" 4;  d_message " start=[$start]" 4;  d_message "   end=[$end]" 4;  d_message "middle=[$middle]" 4
  d_message ">> [${search_list[${middle}]}] <<" 4
  if [[ "${search_list[${middle}]}" == "${target}" ]]
  then
    result=$middle   # equal
  else  # not yet equal, so search either the upper or lower half of the remaining range
    [[ $start -eq $end ]] && return 1
    let "depth+=1"   # increment recursive depth and then recurse
    if [[ "${search_list[${middle}]}" > "${target}" ]]
    then   # found element is greater than target (search lower half next)
      [[ $diff -eq 1 ]] && DIFF1UPPER=$TRUE
      # if we've examined both the even and odd cases of diff=1, and not found it, then return not found
      if [[ $DIFF1UPPER && $DIFF1LOWER ]]; then d_message "both diff=1 cases examined. not found" 3; return 1; else d_message "DIFF1 flags not yet both true" 3; fi
      d_message "candidate [${search_list[${middle}]}] at position [${middle}] is GREATER than target [${target}], DIFF1UPPER is now [$(TrueFalse $DIFF1UPPER)] -- search lower half next" 4
      bs $target $start $middle ${search_list[@]}
    else   # found element is less than target (search upper half next)
      [[ $diff -eq 1 ]] && DIFF1LOWER=$TRUE
      # if we've examined both the even and odd cases of diff=1, and not found it, then return not found
      if [[ $DIFF1UPPER && $DIFF1LOWER ]]; then d_message "both diff=1 cases examined. not found" 3; return 1; else d_message "DIFF1 flags not yet both true" 3; fi
      d_message "candidate [${search_list[${middle}]}] at position [${middle}] is LESS than target [${target}], DIFF1LOWER is now [$(TrueFalse $DIFF1LOWER)] -- search upper half next" 4
      bs $target $middle $end ${search_list[@]}
    fi
  fi
  d_message "about to return from depth [$depth]" 5
  [ $depth -eq 0 ] && d_message "result: [$result]" 5
  let "depth-=1";  return 0
}

countdown()     # output text message (arg $2, optional), and count-down seconds (arg $1)
{
  # special note: use base#number notation with prefix 10# to ensure interpretation as base 10
  # store current minutes and seconds
  min=10#$(date +%M) ; sec=10#$(date +%S)
  wait_time=10#60  #default = 1 minute
  [[ ! -z $1 ]] && wait_time="10#${1}"
  # if wait time is greater than 60 seconds, convert to minutes and seconds, else calculate it
  if [[ "${wait_time}" -ge "60" ]]
  then
    wait_min=$(( ${wait_time} / 60 ))  ;  wait_sec=$(( ${wait_time} % 60 ))
  else
    wait_min=10#0  ;  wait_sec=${wait_time}
  fi
  tgt_min="$(( ${min} + ${wait_min} ))"  ;  tgt_sec="$(( ${sec} + ${wait_sec} ))"
  if [[ "${tgt_sec}" -ge "60" ]]
  then
    tgt_min="$(( ${tgt_min} + 1 ))"  ; tgt_sec="$(( ${tgt_sec} % 60 ))"
  fi
  min="$(date +%M)"  ;  sec="$(date +%S)"
  rem="$(( $(( $(( ${tgt_min} * 60 )) + ${tgt_sec} )) - $(( $(( ${min} * 60 )) + ${sec} )) ))"
  # default message is "Pausing, ", else get from arg $2
  [[ ! -z $2 ]] && wait_msg="$2" || wait_msg="Pausing,"
  while [[ "${rem}" -gt "0" ]]
  do
    echo -en "\r${wait_msg} Time: "$(date +%H:%M:%S)
    sleep 0.1
    min="10#$(date +%M)"  ;  sec="10#$(date +%S)"
    rem="$(( $(( $(( ${tgt_min} * 60 )) + ${tgt_sec} )) - $(( $(( ${min} * 60 )) + ${sec} )) ))"
    echo -n "    $rem seconds left..."
  done
  echo

  return 0
}

#-----[ script ]------------------------
#LINE=("")  ## array of lines the message will be converted to
#modular_message $@
#separator "Here's my output"
#for ((i=0; i<${#LINE[@]}; i++))
#do
#  echo -e ${LINE[i]}
#done

summarize_my_extension()  # Summarize this script header (employ me with "source" or ".")
{
  LINE=("")
  title="$(color ${WHITE} ${BBACK} ${BOLD})script_header_brendlefly_extended$(color ${WHITE} ${BBACK} 0)"
  MSG="$(color ${YELLOW} ${BBACK} ${BOLD})After sourcing $(color ${LBLUE} ${BBACK} ${BOLD})script_header_brendlefly, "
  MSG+="$(color ${GREEN} ${BBACK} ${BOLD})this script $(color ${WHITE} ${BBACK} ${BOLD})may be sourced, in order to "
  MSG+="extend the former's definition of $(color ${MAG} ${BBACK} ${BOLD})useful functions$(color ${WHITE} ${BBACK} ${BOLD}) "
  MSG+="to be subsequently available for use in various scripts, as described below.${Boff}"

  W=70; H=8; R=$(( $(termheight)/3 - $H/2  ));  C=$(( $(termwidth)/2 - $W/2 ))
  verbosity=0
  modular_msg $W

  CLR; myBOX $R $C $W $H ${YELLOW} ${BBACK} ${BOLD}
  CUP $(termheight) 1

  CUP $(($R+1)) $(($C+4))
  SCP; echo -en ${title}; RCP; CUD 3
  for ((i=1; i<${#LINE[@]}; i++))
  do
    SCP; echo -en ${LINE[i]}; RCP; CUD 1
  done
#  CUD 4
#  CUP 6 24; echo -e "${BWon}script_header_brendlefly_extended${Boff}"
#  CUP 8 9; echo -e "${BYon}After sourcing ${BGon}script_header_brendlefly${Boff}, ${BWon}this script ${Boff} may be "
#  CUP 9 9; echo -e "sourced, in order to extend the former's definition of ${BMon}useful${Boff}"
#  CUP 10 9; echo -e "${BMon}functions${Boff} to be subsequently available for use in various"
#  CUP 11 9; echo -e "scripts, as described below.\n"
  CUP $(($R+$H+5)) 1
  grep "()" /usr/local/sbin/script_header_brendlefly_extended | grep -v "grep"; echo
  CUP $(termheight) 1
  return 0
}
