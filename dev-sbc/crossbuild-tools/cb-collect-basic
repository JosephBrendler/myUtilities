#!/bin/bash
#
# collect-basic (for system crossbuildbuild-tools package) (c) joe.brendler  2025-2072
# collect appropriate template files for crossbuild target filesystem
#

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
#message_n "sourcing BPN ..."
#source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

#-----[ variables ]---------------------------------------------------
VERBOSE=$TRUE
verbosity=2
#verbosity=4

PN=$(basename $0)

user=joe
collection_directory="stuff_for_mkenv_$(hostname)"

source_dirs=(
'/etc/portage/binrepos.conf'
'/etc/portage/repos.conf'
'/usr/share/joetoolkit/server_certs'
)

source_files=(
'/var/lib/portage/world'
'/etc/portage/make.conf'
'/etc/portage/package.accept_keywords/joetoo'
'/etc/portage/package.use/joetoo'
'/etc/portage/package.use/00cpu-flags'
'/etc/conf.d/net'
'/etc/conf.d/modules'
'/etc/resolv.conf'
'/etc/cloudsync.conf'
'/etc/distcc/hosts'
'/etc/env.d/02locale'
'/etc/locale.gen'
'/usr/sbin/script_header_joetoo*'
'/usr/sbin/bashrc_aliases_include_joe_brendler'
'/usr/sbin/install_my_local_ca_certificates'
)

#-----[ functions ]---------------------------------------------------

usage() {
    message "${BRon}no arguments allowed${Boff}"
    exit 1
}

maybe_mkdir() {
    # don't flag; die over error
    my_z=$1
    if [ ! -d /home/${user}/${collection_directory%/}/${my_z} ] ; then
        mkdir -p /home/${user}/${collection_directory%/}/${my_z} && \
            echo -en " (${BGon}created${Boff} dir)" || \
            die "failed to mkdir -p /home/${user}/${collection_directory%/}/${my_z}"
    else
        echo -en " (dir ${BGon}exists${Boff})"
    fi
    return 0
}

copy_dirs() {
    # flag, but don't die over error
    for ((i=0; i<${#source_dirs[@]}; i++)); do
        message_n "copying ${BMon}dir${BYon} ${source_dirs[$i]}${Boff} content"
        z=$(echo ${source_dirs[$i]} | sed 's|^/||')
        maybe_mkdir "${z}"
        echo -en " copying ..."
        if [[ ${VERBOSE} ]] && [ ${verbosity} -gt 3 ] ; then
            cp -av ${source_dirs[$i]%/}/* /home/${user}/${collection_directory%/}/${z}/
        else
            cp -a ${source_dirs[$i]%/}/* /home/${user}/${collection_directory%/}/${z}/
        fi
        result=$? ; right_status $result ; [ $result -ne 0 ] && FLAGGED=$TRUE
    done
    return 0
}

copy_files() {
    # flag, but don't die over error
    for source_file in ${source_files[@]}; do
        message_n "copying ${LBon}file${Boff} ${source_file}"
        z=$(dirname ${source_file} | sed 's|^/||')
        maybe_mkdir "${z}"
        echo -en " copying ..."
        if [[ ${VERBOSE} ]] && [ ${verbosity} -gt 3 ] ; then
            cp -av ${source_file} /home/${user}/${collection_directory%/}/${z}/
        else
            cp -a ${source_file} /home/${user}/${collection_directory%/}/${z}/
        fi
        result=$? ; right_status $result ; [ $result -ne 0 ] && FLAGGED=$TRUE
    done
    return 0
}

maybe_create_collection_directory() {
    # don't flag; die over error
    message "maybe creating collection directory"
    message_n "  collection directory: [${collection_directory}]"
    if [ -d /home/${user}/${collection_directory} ] ; then
        echo -en " (${BGon}exists${Boff})"
        right_status $TRUE
    else
        mkdir /home/${user}/${collection_directory} && result=$? && \
            echo -en " (${BGon}created${Boff})" && right_status $result || \
            die "failed to mkdir ${collection_directory} "
    fi
    return 0
}

change_ownership_to_user() {
    message_n "setting ownership of collection_directory to user: ${user} ..."
    chown -R ${user}:${user} /home/${user}/${collection_directory} && \
        right_status $? || \
        die "failed to chown -R ${user}:${user} /home/${user}/${collection_directory}"
}

collect-sensitive() {
    FLAGGED=$FALSE
    message "running collect-sensitive()"

    maybe_create_collection_directory

    copy_dirs

    copy_files

    change_ownership_to_user

    message "please inspect results in /home/${user}/${collection_directory} ..."
    tree -a /home/${user}/${collection_directory}
    echo

    [[ $FLAGGED ]] && return 1 || return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator "${PN}-${BUILD}" "($(hostname))"
[ $# -ne 0 ] && usage

collect-sensitive && \
    message "${PN} ${BGon}complete${Boff}" || \
    die "$PN} finished with errors (see above)"

exit 0
