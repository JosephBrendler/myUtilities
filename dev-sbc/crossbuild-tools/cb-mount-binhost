#!/bin/bash
#
# cb-mount-binhost   (c) joe.brendler  2025-2072
# mount a stockpiled crossbuild environment image file (*.env) for use as a binary package server
#
source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
#verbosity=2
verbosity=3

PN=$(basename $0)

stockpile_dir=/home/joe/sbc-stockpile

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?
TARGET=""
MOUNTPOINT=""

usage() {
    echo
    E_message "${BRon}usage: ${BGon}${PN} <BOARD> <MOUNTPOINT>${Boff}"
    echo
    message "  ${BYon}Exactly one <BOARD> and exactly one <MOUNTPOINT> must be specified"
    echo
    message "  ${LBon}<MOUNTPOINT> must be an empty directory, e.g. --${Boff}"
    echo "         /usr/sweetpotato_binhost"
    echo
    message "  ${LBon}${PN} currently supports these SBCs --${Boff}"
    while read board; do
        echo -e "         ${board}"
    done <<< $(joetoo-sbc-list | awk '{print $1}' | grep -v '\[')
    echo "         generic-armv6j"
    echo "         generic-armv7a"
    echo "         generic-aarch64"
    echo
    message "  ${LBon}These stockpiled SBC crossbuild environment files are available --${Boff}"
    # set shell globbing options to count files in the mountpoint directory
    # nullglob ensures that a pattern matching no files expands to nothing
    # (rather than the pattern itself), and dotglob includes dotfiles (hidden files)
    # The files array will be empty if the directory is empty
    shopt -s nullglob dotglob
    images=("${stockpile_dir%/}"/*.env)
    [ ${#images[@]} -eq 0 ] && die "There are no stockpiled crossbuild env files available"
    for ((i=0; i<${#images[@]}; i++)) ; do
        echo "         $(basename ${images[$i]})"
    done
    shopt -u nullglob dotglob # Unset the options after use
    echo
    message "  ${BYon}Exactly one <TARGET> will be selected automatically. Examples:${Boff}"
    echo "         aarch64-unknown-linux-gnu"
    echo "         armv6j-unknown-linux-gnueabihf"
    echo "         armv7a-unknown-linux-gnueabihf"
    echo
    message "${BMon}find additionl information at /etc/crossbuild-tools/README"
    echo
    exit
}

validate_stockpile_image() {
    # return 0 if properly named image file exists in the stockpile directory
    [ ! -f ${stockpile_dir%/}/${BOARD}.env ] && die "stockpile image file [${stockpile_dir%/}/${BOARD}.env] does not exist"
    return 0
}

validate_mountpoint() {
    # return 0 if valid (directory exists and is empty)
    [ ! -d ${MOUNTPOINT} ] && die "mountpoint [${MOUNTPOINT}] does not exist"
    # set shell globbing options to count files in the mountpoint directory
    # nullglob ensures that a pattern matching no files expands to nothing
    # (rather than the pattern itself), and dotglob includes dotfiles (hidden files)
    # The files array will be empty if the directory is empty
    shopt -s nullglob dotglob
    files=("${MOUNTPOINT%/}"/*)
    [ ${#files[@]} -ne 0 ] && die "mountpoint directory [${MOUNTPOINT}] is not empty."
    shopt -u nullglob dotglob # Unset the options after use
    return 0
}

mount-board-image-as-crossbuild-binhost() {
    # inspect target (mount point) - is anything mounted? (un-mount)
    d_message "MOUNTPOINT ......: ${MOUNTPOINT}" 1
    d_echo 1
    if [ ! -z "$(findmnt -n -M ${MOUNTPOINT})" ] ; then
        E_message "${BYon}the following devices are already mounted on ${MOUNTPOINT} --${Boff}"
        mount | grep "on ${MOUNTPOINT}" | sed 's|^|    |'
        exit 1
    else
        message "nothing is mounted on ${MOUNTPOINT} ; continuing"
    fi
    # inspect for loop devices attached to BOARD stockpile image file
    message "looking for loop device attached to ${stockpile_dir%/}/${BOARD}.env ..."
    loop_dev=$(losetup -a | grep "${stockpile_dir%/}/${BOARD}.env" | cut -d':' -f1)
    if [ ! -z "${loop_dev}" ] ; then
        E_message "${BYon}${loop_dev} is already attached to ${stockpile_dir%/}/${BOARD}.env"
        exit 1
    else
        message "no loop device is yet attached to ${stockpile_dir%/}/${BOARD}.env; continuing"
    fi
    message_n "attaching loop device"
    img_loop_dev=$(losetup --find --show --partscan ${stockpile_dir%/}/${BOARD}.env) && \
        ( echo -n " (${img_loop_dev})" && right_status $? ) || ( right_status $? && exit 1 )
    # Get partition device names
    message_n "getting device name for partition 1 ..."
    img_partition1_dev="${img_loop_dev}p1" && result=$? && \
    echo -n " ( ${img_partition1_dev} )" && \
    right_status ${result} || ( right_status $? && exit 1 )
    message_n "getting device name for partition 2 ..."
    img_partition2_dev="${img_loop_dev}p2" && result=$? && \
    echo -n " ( ${img_partition2_dev} )" && \
    right_status ${result} || ( right_status $? && exit 1 )
    # now mount the partitions
    message_n "mounting rootfs (${img_partition2_dev}) on ${MOUNTPOINT}/ ..."
    mount ${img_partition2_dev} ${MOUNTPOINT}/ && right_status $? || ( right_status $? && exit 1 )
    message_n "mounting bootfs (${img_partition1_dev}) on ${MOUNTPOINT}/boot/ ..."
    mount ${img_partition1_dev} ${MOUNTPOINT}/boot/ && right_status $? || ( right_status $? && exit 1 )
    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator "(${BOARD})" "${PN}"
[ $# -ne 2 ] && usage
BOARD=$1
MOUNTPOINT=$2
validate_target ${BOARD} || die "Failed to validate_target [${BOARD}]"
validate_stockpile_image ${BOARD} || die "Failed to validate_stockpile_image ${BOARD}"
validate_mountpoint ${MOUNTPOINT} || die "Failed to validate_mountpoint [${MOUNTPOINT}]"

old_dir="$(pwd)"
cd $(dirname ${MOUNTPOINT}) || die "Failed to change director to parent of mountpoint [${MOUNTPOINT}]"
message "now working in parent of crossbuild binhost MOUNTPOINT directory: [${Mon}$(pwd)${Boff}]"

mount-board-image-as-crossbuild-binhost || die "failed to mount-board-image-as-crossbuild-binhost"

echo
cd $old_dir
message "now working in previous directory: [${Mon}$(pwd)${Boff}]"
exit 0
