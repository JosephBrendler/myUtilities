#!/bin/bash
#
# populate-target   (c) joe.brendler  2025-2072
# copy appropriate template files into crossbuild target filesystem
#

source /usr/local/sbin/script_header_brendlefly
VERBOSE=$TRUE
verbosity=3

TARGET=""

usage() {
    message "${BRon}usage: ${BGon}chroot-target <TARGET>${Boff}"
    message "${BYon}  Note: exactly one argument <TARGET> is required. Examples:${Boff}"
    message "    aarch64-unknown-linux-gnu"
    message "    armv6j-unknown-linux-gnueabihf"
    message "    armv7a-unknown-linux-gnueabihf"
    exit
}

validate_target() {
    case $TARGET in
        "aarch64-unknown-linux-gnu" )
            d_message "valid target: [${TARGET}]" 2 ;
            ;;
        "armv6j-unknown-linux-gnueabihf" )
            d_message "valid target: [${TARGET}]" 2 ;
            ;;
        "armv7a-unknown-linux-gnueabihf" )
            d_message "valid target: [${TARGET}]" 2 ;
            ;;
        * )
            E_message "invalid target: [${TARGET}]" ;
            usage ;;
    esac
}

#-----[ main script ]---------------------------------------------
checkroot
separator $(basename $0) $(hostname)
[ $# -ne 1 ] && usage
TARGET=$1
validate_target

old_dir="$(pwd)"
cd /usr/${TARGET}
message "now working in target sysroot directory: [${Mon}$(pwd)${Boff}]"

SOURCE="/etc/crossbuild-tools/${TARGET}/"
# strip source directory name from each pathname to use relative to /usr/${TARGET}/
for x in find ${SOURCE} -type f | sed "s|${SOURCE}||" ; do
    DESTINATION="/usr/${TARGET}/$(dirname ${x})"
    FILE="$(basename ${x})"
    if [ ! -d ${DESTINATION} ] ; then
        message_n "creating destination directory ${DESTINATION} ..."
        mkdir -p /usr/${TARGET}/${DESTINATION} ; right_status $?
    fi
    message_n "populating ${x} ..."
    cp ${SOURCE}${x} ${DESTINATION}/${FILE} ; right_status $?
done

echo
cd $old_dir
message "now working in previous directory: [${Mon}$(pwd)${Boff}]"

