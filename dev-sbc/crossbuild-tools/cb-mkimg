#!/bin/bash
#
# populate-target   (c) joe.brendler  2025-2072
# copy appropriate template files into crossbuild target filesystem
#
    # pre-requisite: cb-mkenv has been fully completed, with possible exception of its chroot step
    # this script expects --
    #    NO image file(s) are mounted
    #    a completed ${BOARD}.img crossbuild environment image file is available
    #        the image file has stage3 already extracted, and a working crossdev crosscompile (cb-mkenv)
    #        the image has been populated with joetoo cross-build configs (cb-populate-target)
    #        ${TARGET}-emerge has been run for both @system and @world sets (cb-mkenv)
    #        the image has a working qemu, for qemu-chroot (cb-buildtarget-qemu)
    #        Note: completed environment does not have its own repositories

# Note: as of build 0.1.4, these additional functions were moved to cb-common-functions:
#    sanity_check() display_configuration(), process_cmdline(),
#    process_argument(), process_compound_arg(), and run_sequence()
# These were already in cb-common-functions:
#    linear_search(), new_prompt(), TARGET-emerge-world(), TARGET-emerge-system(),
#    validate_target(), and validate_status_file()
# Most of these functions and most "cb-<name>" crossbuild-tools employ only one argument
#    (BOARD, status_file) or simply subsist off the environment of whichever abstract automated
#    workflow script called them or sourced cb-common-functions (cb-mkenv or cb-complete-image)
# However, usage() and initialize_variables() as well as the command_ and messageN_sequence
#    array variables will be defined somewhat differently in both of the abstract automated
#    workflow scripts (cb-mkenv and cb-complete-image)

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

#-----[ variables ]-----------------------------------------------------

VERBOSE=$TRUE
# set default verbosity only if it is not already set
[ -z $verbosity ] && verbosity=3

PN=$(basename $0)


response=""

varlist="PN BPN BUILD BOARD TARGET TARGET_ARCH QEMU_ARCH"
varlist+=" LLVM_TARGET default_profile"
varlist+=" BREAK starting_step stopping_step mkimgstatusfile"
varlist+=" bool.RESUME bool.INTERACTIVE"
varlist+=" BREAK bool.VERBOSE verbosity old_dir"

# Note: much of the workflow is accopmlished by the finalize-chroot-image
#    script that will run once in the chroot (after replacing the
#    basic finalize-chroot script provided for cb-mkenv)

command_sequence=(
'cb-populate-image ${BOARD}'
'cb-chroot-target-image ${BOARD}'
'save-hostname'
'cb-umount ${BOARD}'
'stockpile-img')

msg1_sequence=(
'repopulate image additional content'
'cb-chroot into target image ${BOARD}'
'save hostname for use in stockpile image name'
'un-mount BOARD image'
'add image to deployable image stockpile'
)

msg2_sequence=(
'repopulating image additional content'
'cb-chrooting into target image ${BOARD}'
'saving hostname for use in stockpile image name'
'un-mounting BOARD image'
'adding image to deployable image stockpile'
)

#-----[ functions ]-----------------------------------------------------

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?

# usage moved to script_header_joetoo_extended, which will source /etc/${BPN}/local.usage

initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."

    # save variables we have in varlist but dont want to lose
    oldVERBOSE=$VERBOSE; oldverbosity=$verbosity

    initialize_vars ${varlist}

    # set default values
    FLAGGED=$FALSE
    d_message_n "sourcing BUILD ..." 2
    source /etc/crossbuild-tools/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing BPN ..." 2
    source /etc/crossbuild-tools/BPN && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting old_dir = $(pwd)" 2
    export old_dir=$(pwd) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default starting_step = 0" 2
    export starting_step=0 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default stopping_step = $(( ${#command_sequence[@]} - 1 ))" 2
    export stopping_step=$(( ${#command_sequence[@]} - 1 )) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default mkimgstatusfile = /root/bin/mkcrossbuildimg_status" 2
    export mkimgstatusfile="/root/bin/mkcrossbuildimg_status" && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default INTERACTIVE true" 2
    export INTERACTIVE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE = $(TrueFalse $oldVERBOSE)" 2
    export VERBOSE=$oldVERBOSE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = $oldverbosity" 2
    export verbosity=$oldverbosity && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
}

validate-image() {
    FLAGGED=$FALSE
    # validate target mountpoint directory
    if [ ! -d /usr/${TARGET} ] ; then
        E_message "target directory /usr/${TARGET} does not exist"
        FLAGGED=$TRUE
    fi
    # validate board image file exists
    if [ ! -f /usr/${BOARD}.img ] ; then
        E_message "image file target /usr/${BOARD}.img does not exist"
        FLAGGED=$TRUE
    fi
    # verify loop device is active
    message "the following loop devices are active for image file(s) --"
    losetup -a
    loop_dev=$(losetup -a | grep "/usr/${BOARD}.img" | cut -d':' -f1)
    if [ -z "${loop_dev}" ] ; then
        E_message "no loop device is active for /usr/${BOARD}"
        FLAGGED=$TRUE
    fi
    # verify the loop device is mounted on the target
    mountpoint=$(mount | grep "${loop_dev}p2" | awk '{print $3}')
    [[ ! "${mountpoint}" == "/usr/${TARGET}" ]] && E_message "no rootfs (loop_dev p2) is mounted on target /usr/${TARGET}" && FLAGGED=$TRUE
    mountpoint=$(mount | grep "${loop_dev}p1" | awk '{print $3}')
    if [[ ! "${mountpoint}" == "/usr/${TARGET}/boot" ]] ; then
        E_message "no bootfs (loop_dev p1) is mounted on target /usr/${TARGET}/boot"
        FLAGGED=$TRUE
    fi
    if [ -z "$(mount | grep loop)" ] ; then
        E_message "no loop device is mounted at all"
        FLAGGED=$TRUE
    fi
    # verify other loop device(s) are not active
    if [ ! -z "$(mount | grep loop | grep -v ${loop_dev})" ] ; then
        E_message "other loop devices are also already active"
        FLAGGED=$TRUE
    fi
    if [[ $FLAGGED ]] ; then
        E_message "${BYon}Note red flags above${Boff}"
        E_message "${BWon}You should consider whether you need to correct issues before continuing${Boff}"
        d_message "INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}" 3
        if [[ $INTERACTIVE ]] ; then
            msg="${BWon}Do you really want to continue?\n"
            mst+="    y|s: yes; continue | n: no; exit"
            response="" ; new_prompt "${msg}"
        else
            response="n"    ## take the safe course (do not non-interactively destroy stuff)
        fi
        case ${response:0:1} in
            [yYsS] ) message "OK; continuing" ;;
            [nN] ) E_message "Exiting as instructed [ ${response} ]" ; return 1 ;;
            * ) E_message "Invalid response; exiting" ; return 1 ;;
        esac
    else
        message "No red flags noted. The rest of image-generation will be completed"
        message "by the finalize-chroot-for-image script upon first login with"
        message "cb-chroot-target-image, which is the last stop in workflow of this script (cb-mkimg)"
    fi
    return 0
}

save-hostname() {
    # (must be done after finalize-chroot-for-image but before cb-umount)
    # save the hostame before un-mounting the image
    # we'll need it to name the stockpiled image file
    message_n "reading hostname"
    read HN < /usr/${TARGET}/etc/hostname && \
        echo -en " (${HN})" || die "failed to read hostname"
    right_status $TRUE
    export my_hostname="${HN}"
}

stockpile-img() {
    # (should be run after finalize-chroot-for-image and cb-umount have both completed)
    # copy the completed ${BOARD}.img file so it can be used as a deployable
    # start point for development of the scpecific system for which it was created
    # receive hostname as $1

    stockpile=/home/joe/sbc-stockpile

    # use my_hostname to create output filename
    message_n "assigning stockpile output filename"
    outfile="${BOARD}_${my_hostname}.img" && \
        echo -en " (${BGon}ok${Boff})" || die "failed to assign stockpile filename"
    right_status $TRUE

    # create stockpile directory if it doesn't exist
    message_n "examining stockpile"
    if [ ! -d ${stockpile} ] ; then
        echo -en " (${BRon}not found${Boff})"
        mkdir -p ${stockpile} && \
            echo -en " (${BGon}created${Boff})" || die "failed to create stockpile"
    else
        echo -en " (${BGon}found${Boff})"
    fi
    right_status $TRUE

    # copy /usr/${BOARD}.img to ${stockpile}/${BOARD}.env
    message_n "stockpiling as ${outfile}"
    cp /usr/${BOARD}.img ${stockpile%/}/${outfile} && \
        echo -en " (${BGon}copied${Boff})" || die "failed copy to stockpile"
    right_status $TRUE
    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator ${PN} $(hostname)
# option s (status) is the only one that can appear alone on the command line
# - otherwise it should be at least 2: -b <BOARD>
arglist="$@"
[ $# -eq 0 ] && E_message "null command line arguments" && usage
[ $# -eq 1 ] && [[ "$1" != "-"*"s"* ]] && [[ "$1" != "--status" ]] && E_message "invalid argument(s) [$arglist]" && usage
[ $# -lt 2 ] && E_message "invalid argument(s) [$arglist]" && usage


# basic common approach -
# initialize variables (local function)
# validate_status_file  (script_header_joetoo_extended)
# process_cmdline (script_header_joetoo_extended)
# validate_target which must follow process_cmdline (cb-common-functions)
# display_configuration so we can see what's what if insane (script_header_joetoo_extended)
# sanity_check (cb-common-functions)
# run_sequence (script_header_joetoo_extended)

# initialize variables and set default values
initialize_variables || die "Failed to initialize_variables"

validate_status_file ${mkimgstatusfile} || die "Failed to validate_status_file"

d_echo "cmdline: $*" 5
d_echo "processing cmdline args: $@" 5

# over-ride configuration with commandline input
separator ${PN} "(process_cmdline)"
process_cmdline $@  || die "Failed to process_cmdline"

validate_target ${BOARD} || die "Failed to validate_target [${BOARD}]"

#this used to be in command sequence, but I want to ensure it gets done as part of any "resume" that skips steps
cb-mount ${BOARD} || die "Failed to cb-mount ${BOARD}"
validate-image || die "Failed to validate-image"

display_configuration || die "Failed to display_configuration"

# sanity check configuration
sanity_check || die "Failed sanity_check"

run_sequence ${mkimgstatusfile} || die "Failed to run_sequence"

echo
cd $old_dir
d_message "now working in previous directory: [${Mon}$(pwd)${Boff}]" 1
exit 0
