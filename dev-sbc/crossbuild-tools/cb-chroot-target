#!/bin/bash
#
# chroot-target   (c) joe.brendler  2025-2072
#

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
# set default verbosity only if it is not already set
[ -z $verbosity ] && verbosity=3

PN=$(basename $0)

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?

message_n "assigning user = joe (used to find/mount /home/<user>/xxx-sources)"
user="joe" && right_status $? || die "failed to assign user"

TARGET=""

usage() {
    message "${BRon}usage: ${BGon}${PN} <BOARD>${Boff}"
    smaller_script_common_usage_message
    echo
    exit
}

validate-repo-mountpoints() {
    separator "${PN}" "(${FUNCNAME[0]})"
    # validate mountpoints for host's repositories, so we can share them
    # with this "minimal" image file structure
    # (i.e. replace links, if found, and warn regarding populated repo directories)
    for x in gentoo joetoo; do
        VALID_MOUNTPOINT=$FALSE
        # check them first
        repo=/usr/${TARGET}/var/db/repos/${x}
        message "checking repo ${repo}"
        if [ -e ${repo} ] ; then
            # ${repo} already exists - is it a link or a directory?
            if [ -L ${repo} ] ; then
                # ${repo} is a link path - carefully remove it (not the target it points to)
                echo -en " (${BRon}link${Boff}"
                rm ${repo%/} && echo -en " ${BGon}removed${Boff})" || die "failed to remove link"
                # replace with empty directory (valid mountpoint)
                mkdir ${repo} >/dev/null 2>/dev/null && echo -en "(${BGon}dir created${Boff})" || die "failed to create mountpoint"
                VALID_MOUNTPOINT=$TRUE
                right_status $TRUE
            elif [ -d ${repo} ] ; then
                # ${repo} is a directory - is it empty?
                echo -en " (${BGon}dir${Boff}"
                if [ -z "$(ls -A ${repo})" ] ; then
                    # empty
                    echo -en " ${BGon}empty)${Boff}"
                    VALID_MOUNTPOINT=$TRUE
                else
                    # not empty
                    echo -en " ${BMon}not${Boff} empty)"
                    # die here so we don't have to use rm -r to remove blindly below
                    # what might be an invalid link pointing to something important
                    die "repo $x is a non-empty directory; please resolve this before resuming ${PN}"
                fi
                # if we got here, repo was either (or now is) and empty directory (valid mount point)
                right_status $TRUE
            else
                # ${repo} exists but is neither link nor directory, so it is invalid
                echo -en " (exists; ${BRon}not link/dir: invalid${Boff})"
                right_status 1
                die "repo $x is some kind of non-link/dir file; please resolve this before resuming ${PN}"
            fi
        else
            # repo does not exist - create empty directory (valid mountpoint)
            echo -en " (does not exist)"
            mkdir ${repo} >/dev/null 2>/dev/null && echo -en " (${BGon}dir created${Boff})" || die "failed to create mountpoint"
            VALID_MOUNTPOINT=$TRUE
            right_status $TRUE
        fi
        # if we got here, repo already was, or now is, an empty directory (valid mountpoint) - mount it
# NO - let mount-everything mount it later
#        if [ $VALID_MOUNTPOINT ] ; then
#            message_n "mounting /var/db/repos/${x} on mountpoint: ${repo}"
#            mount /var/db/repos/${x} ${repo%/}/ >/dev/null 2>&1 && \
#                right_status $? || die "failed to mount host repo on ${repo}"
#        fi
    done
    return 0
}

# moved validate-dirlist to cb-common-functions

mount-everything() {
    separator "${PN}" "(${FUNCNAME[0]})"

    # copy resolv.conf
    message_n "copying /etc/resolv.conf for chroot target ..."
    cp /etc/resolv.conf /usr/${TARGET}/etc/resolv.conf >/dev/null 2>&1 && \
        right_status $? || die "failed to copy resolv.conf"

    # mount chroot-prep stuff
    mount_list="proc dev sys lib/modules "
    # and repos
    mount_list+="var/db/repos/gentoo var/db/repos/joetoo"
    mount-chroot-prep || die "failed mount-chroot-prep for ${PN}"

    # mount kernel sources
    message_n "looking for kernel sources"
    case ${BOARD:0:2} in
        "bc" ) SOURCES="raspi-sources" ;;
        "rk" ) SOURCES="rockchip-sources" ;;
        "fs" ) SOURCES="nxp-sources" ;;
        "me" ) SOURCES="amlogic-sources" ;;
        *    ) die "sources for board [$BOARD] not supported (yet)"
    esac
    [ ! -d /home/${user}/${SOURCES}/linux ] && echo && die "could not find kernel sources [/home/${user}/${SOURCES}/linux]"
    right_status $TRUE
    message_n "mounting usr/src/linux for chroot target ..."
    mount -o bind /home/${user}/${SOURCES}/linux /usr/${TARGET}/usr/src/chroot-sources-mountpoint >/dev/null 2>&1 && \
        right_status $? || die "failed to mount host kernel sources"

    #mount -o bind /tmp tmp
    #mount -o bind /dev/pts dev/pts #only for X
    return 0
}

umount-everything() {
    separator "${PN}" "(${FUNCNAME[0]})"
    #umount /usr/${TARGET}/dev/pts
    #umount /usr/${TARGET}/tmp
    FLAGGED=$FALSE
    # chroot-prep stuff
    mount_list="proc dev sys lib/modules "
    # and repos (but not crossdev)
    mount_list+=" var/db/repos/gentoo var/db/repos/joetoo"
    # and kernel sources
    mount_list+=" usr/src/chroot-sources-mountpoint"
    umount-chroot-prep || FLAGGED=$TRUE

    [ $FLAGGED ] && return 1 || return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator ${PN} $(hostname)
[ $# -ne 1 ] && usage
BOARD=$1
validate_target ${BOARD} || die "Failed to validate_target [${BOARD}]"

message "restarting qemu-binfmt ..."
/etc/init.d/qemu-binfmt restart || die "failed to restart qemu-binfmt"

# Next two lines are optional.
# (Activate if the qemu-wrapper is used. Check that the wrapper location corresponds with the call at the end of line 2!)
#echo '-1' > /proc/sys/fs/binfmt_misc/arm #deregister wrong arm
#echo ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\x00\xff\xfe\xff\xff\xff:/usr/local/bin/qemu-wrapper:' > /proc/sys/fs/binfmt_misc/register

old_dir="$(pwd)"
cd /usr/${TARGET}
message "now working in crossbuild target directory: [${Mon}$(pwd)${Boff}]"

validate-repo-mountpoints || die "failed to validate-repo-mountpoints"

# set dirlist for cb-chroot-target
dirlist="proc dev sys tmp dev/pts"
dirlist+=" chroot_sources_mountpoint lib/modules"
#    dirlist+=" var/db/repos/gentoo var/db/repos/joetoo var/db/repos/crossdev"
validate-chroot-mountpoint-dirlist || die "failed validate-chroot-mountpoint-dirlist for ${PN}"

mount-everything || die "failed to mount-everything"
 
chroot . /bin/bash --login
 
echo
cd $old_dir
message "now working in previous directory: [${Mon}$(pwd)${Boff}]"

umount-everything || die "failed to umount-everything and clean exit; note red flags above"

exit 0
