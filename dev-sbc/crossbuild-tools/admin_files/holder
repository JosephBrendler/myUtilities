rm Manifest 
sed -i 's|if ! "${model}" == "domU" ;|if [[ ! "${model}" == "domU" ]] ;|' *.ebuild
pkgdev manifest -f
big-git-rm-add-list-handler
git commit -m "bugfix template ebuild"
git push origin master



#   fsl-imx8mq-phanbell ........: Tailor for TinkerEdgeT/CoralDev (armv8/64)
#   meson-gxl-s905x-libretech-cc-v2 ...: Tailor for SweetPotato (armv8/64)


#      -meson-gxl-s905x-libretech-cc-v2 -fsl-imx8mq-phanbell


# no stable nextcloud available for arm64
www-apps/nextcloud ~arm64

myusage() {
    message "${BRon}usage: ${BGon}${PN} <BOARD>${Boff}"
    source /etc/${BPN}/local.usage
    exit
}

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

while read board; do echo $board; done <<< $(joetoo-sbc-list | grep -v '\[')

while read board; do
  echo; echo $board; 
  cp -av ${board}/etc/portage/make.conf ${board}/etc/portage/make.conf.crossbuild ;
done <<< $(joetoo-sbc-list | grep -v '\[')

# basic common approach - 
# initialize variables (local function)
# validate_status_file  (script_header_joetoo_extended)
# process_cmdline (script_header_joetoo_extended)
# validate_target which must follow process_cmdline (cb-common-functions)
# display_configuration so we can see what's what if insane (script_header_joetoo_extended)
# sanity_check (cb-common-functions)
# run_sequence (script_header_joetoo_extended)




prep-newroot-for-flash() {
# examine OUTPUTDEVICE expected to be o(if luks, pen and) ready for mounting
    message_n "is newroot mounted?"
    if [[ -z "$(mount | grep ${newroot_mountpoint})" ]] ; then
        echo -en " no, mounting"
        # if there's a luks device, mount its "-root" lv on newroot_mountpoint
        if [[ ! -z "$(blkid ${OUTPUTDEVICE}* | grep -i luks)" ]] ; then
            # use lsblk data to look up the lvm volume used for rootfs (e.g. vg_raspicm56402-root)
            root_lv=$(lsblk -l ${OUTPUTDEVICE} | grep lvm | grep root | awk '{print $1}')
            echo -en " ${root_lv}"
            mount /dev/mapper/${root_lv} ${newroot_mountpoint} && right_status $? || \
                die "failed to mount /dev/mapper/${root_lv}"
        # otherwise, if there's a LABEL=root_fs device, mount it on newroot_mountpoint
        elif [[ ! -z "$(blkid ${OUTPUTDEVICE}* | grep -i root_fs)" ]] ;  then
            # use blkid data to idendify root_fs device (e.g. /dev/sdb)
            root_dev=$(blkid ${OUTPUTDEVICE}* | grep boot_fs | cut -d' ' -f1 | sed 's|\:$||')
            echo -en " ${root_dev}"
            mount ${root_dev} ${newroot_mountpoint} && right_status $? || \
                die "failed to mount /dev/mapper/${root_lv}"
        else
            die "no root luks or regular block device found"
        fi
        # if we get here, it should be successfully mounted
        right_status $TRUE
    else
        echo -en " ${BGon}yes${Boff}"
    fi
    # whether already mounted or just mounted, go to newroot_mountpoint
    #   and if there is a mount-the-rest script, run it

old_dir=$(pwd)
message_n "moving from $(pwd) to ${newroot_mountpoint} ..."
cd ${newroot_mountpoint} && right_status $? || die "failed to cd ${newroot_mountpoint}"
message "now working in $(pwd)"
message_n "looking for mount-the-rest script"

}

flash-device() {
    d_message "in flash-device" 3
}
