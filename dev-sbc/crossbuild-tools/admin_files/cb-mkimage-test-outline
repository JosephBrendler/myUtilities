#!/bin/bash
BOARD=bcm2708-rpi-b
TARGET=armv6j-unknown-linux-gnueabihf ; TARGET_ARCH=arm 
STAGE3_SELECTOR="stage3-armv6j_hardfp-openrc-[0-9]"
profile_number=59
echo "BOARD = $BOARD"
echo "TARGET = $TARGET"
echo "TARGET_ARCH = $TARGET_ARCH"
echo "STAGE3_SELECTOR = $STAGE3_SELECTOR"
echo "profile_number = $profile_number"

### once - to set up
rm -r /usr/${TARGET}
mkdir /usr/${TARGET}
rm -r bcm2708-rpi-b/
rm bcm2708-rpi-b.img

### do this once, for TEMPLATE (will get loop0 as long as no other device already using)
rm TEMPLATE_SBC_IMAGE_FILE.img
dd if=/dev/zero of=TEMPLATE_SBC_IMAGE_FILE.img bs=1 count=0 seek=20G
fdisk TEMPLATE_SBC_IMAGE_FILE.img
### create this layout
  Disk TEMPLATE_SBC_IMAGE_FILE.img: 20 GiB, 21474836480 bytes, 41943040 sectors
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
  Disklabel type: dos
  Disk identifier: 0xbf6b41f6

  Device                       Boot   Start      End  Sectors  Size Id Type
  TEMPLATE_SBC_IMAGE_FILE.img1         8192  1032191  1024000  500M  c W95 FAT32 (LBA)
  TEMPLATE_SBC_IMAGE_FILE.img2      1032192 41943039 40910848 19.5G 83 Linux
### continue one-time setup of TEMPLATE
la /dev/loop*          # see if loop0 is in use
losetup -d /dev/loop0  # free up loop0 *** OR use anonther device below
losetup -P -f TEMPLATE_SBC_IMAGE_FILE.img
mkfs.ext4 -Lrootfs /dev/loop0p2
mkfs.vfat -F32 -nbootfs /dev/loop0p1
mount /dev/loop0p2 /usr/${TARGET}/
mkdir /usr/${TARGET}/boot
mount /dev/loop0p1 /usr/${TARGET}/boot/
umount -R /usr/${TARGET}
losetup -d /dev/loop0

### subsequeny start by copying formatted TEMPLATE to new blank BOARD image
cp TEMPLATE_SBC_IMAGE_FILE.img ${BOARD}.img
losetup -P -f ${BOARD}.img
mount /dev/loop0p2 /usr/${TARGET}/
mount /dev/loop0p1 /usr/${TARGET}/boot/

cd /usr/${TARGET}/
eval "$(grep ${STAGE3_SELECTOR} <<< $(curl -s https://www.gentoo.org/downloads/#arm) | awk '{print $2}')"
wget ${href} && wget ${href}.DIGESTS
cat stage3*.DIGESTS
openssl dgst -r -blake2b512 stage3-*.tar.xz | awk '{print $1}'
openssl dgst -r -sha512 stage3-*.tar.xz | awk '{print $1}'

tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner -C /usr/${TARGET}/

# validate crossdev repo profiles, metadata, as in cb-mkenv script, set then
ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile set ${profile_number}
ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list | grep '\*'

cb-quickpkg-toolchain ${BOARD}
cb-populate-target ${BOARD}
nano etc/portage/make.conf
${TARGET}-emerge -uavDN @system --keep-going
${TARGET}-emerge -uavDN @world --keep-going

FEATURES="-getbinpkg" QEMU_USER_TARGETS="${TARGET_ARCH}" QEMU_SOFTMMU_TARGETS="${TARGET_ARCH}" USE="static-user -plugins static-libs" emerge -av1 --buildpkg qemu
ROOT=/usr/${TARGET}/ emerge -av1 --usepkgonly --nodeps qemu

# this is the last step in cb-mkenv ...
# this is light-weight cross-build environment suitable for creating a binhost server
# (uses pre-existing repos and sources on the host system, mounted on the target to avoid duplication)
cb-chroot-target ${BOARD}

# this is the first step in cb-mkimg ...
# this is intended to prep the image to operate on its own
# (will need its own repos and sources, plus a bunch of other stuff)
cb-chroot-target-image ${BOARD}
passwd
nano /etc/hostname
useradd -m -G wheel,console,audio,cdrom,video,cdrw,usb,users,portage,plugdev,joe -s /bin/bash joe
nano /etc/inittab  # or sed -i
nano /etc/fstab
# populate user-specific files
# ( /home/joe/.ssh , wpa_supplicant.conf , conf.d/modules )

# get the rest of joetoo's basic world packages
# ( ensure the -av output shows proper USE=${BOARD} )
emerge-chroot -uavDN @world --keep-going

# add all services to default runlevel (should have merged with world)
list="apache2 chronyd cronie dbus distccd gpm local mysql net.eth0 net.wlan0 netmount ntpd php-fpm rsyncd sshd sysklogd"
for x in $list; do [ ! -L /etc/runlevels/default/$x ] && ln -s /etc/init.d/$x /etc/runlevels/default/$x; done


# set timezone
ln -snf ../usr/share/zoneinfo/America/New_York /etc/localtime

# setup openvpn with certs for new hostname

# setup apache ssl with certs for new hostname

# configure mysql
emerge --config dev-db/mysql  # set root passwd

# dismount and prepare for first boot
cd
umount -R /usr/${TARGET}
losetup -D /dev/loop0

# after first boot
/etc/init.d/mysql start
mysql_secure_installation

