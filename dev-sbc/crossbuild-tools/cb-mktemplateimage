#!/bin/bash
#
# populate-target   (c) joe.brendler  2025-2072
# copy appropriate template files into crossbuild target filesystem
#

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

VERBOSE=$TRUE
#verbosity=2
verbosity=3

PN=$(basename $0)


#-----[ variables ]-----------------------------------------------------

varlist="IMAGE_TYPE imagefile image_size_mb partition1_size_mb partition2_size_mb BREAK bool.VERBOSE verbosity"


#-----[ functions ]-----------------------------------------------------

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?
TARGET=""

usage() {
    message "${BRon}usage: ${BGon}${PN} <BOARD>${Boff}"
    source /etc/${BPN}/local.usage
    exit
}

initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."
    initialize_vars ${varlist}

    # set default values
    FLAGGED=$FALSE
    d_message_n "sourcing BUILD ..." 2
    source /etc/crossbuild-tools/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing BPN ..." 2
    source /etc/crossbuild-tools/BPN && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )

    d_message_n "setting default imagefile = /etc/crossbuild-tools/admin_files/TEMPLATE_SBC_IMAGE_FILE.img" 2
    imagefile=/etc/crossbuild-tools/admin_files/TEMPLATE_SBC_IMAGE_FILE.img && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default image_size_mb = 20480" 2
    image_size_mb=20480 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default partition1_size_mb = 512" 2
    partition1_size_mb=512 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default partition2_size_mb = $((image_size_mb - partition1_size_mb))" 2
    partition2_size_mb=$((image_size_mb - partition1_size_mb)) && \
        d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE true" 2
    export VERBOSE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = 3" 2
    export verbosity=3 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
    return 0
}

prepare() {
    FLAGGED=$FALSE
#    [ -n "$(losetup -a)" ] && E_message "There are loop devices already active" && FLAGGED=$TRUE
#    [ -n "$(mount | grep loop)" ] && E_message "There are loop devices mounted" && FLAGGED=$TRUE
    # if any currently active loop device is already mounted on TARGET, flag out (i.e. ignore e.g. xen loop devs)
    if [ ! -z "$(losetup -a | grep ${TARGET})" ] ; then
        problem_dev="$(losetup -a | grep ${TARGET} | awk '{print $1}')"
        problem_dir="$(losetup -a | grep ${TARGET} | awk '{print $3}')"
        E_message "${problem_dev} is active and mounted on ${problem_dir} (i.e. TARGET [${TARGET}])"
        FLAGGED=$TRUE
    fi
    [ -f "${imagefile}" ] && E_message "imagefile ${imagefile} already exists" && FLAGGED=$TRUE
    if [[ $FLAGGED ]] ; then
        E_message "Note red flags above. Please clean up before continuing"
        exit 1
    fi
    return 0
}

mksparseimagetemplate() {
    # Create empty image file
    message_n "creating sparse image file [ ${imagefile} ] ..."
    dd if=/dev/zero of=${imagefile} bs=1 count=0 seek=${image_size_mb}M && right_status $? && \
    mktemplate-common || ( right_status $? && exit 1 )
}

mkimagetemplate() {
    # Create empty image file
    message_n "creating fixed-size image file [ ${imagefile} ] ..."
    dd if=/dev/zero of=${imagefile} bs=1M count=${image_size_mb} && right_status $? || ( right_status $? && exit 1 )
    mktemplate-common && right_status $? || ( right_status $? && exit 1 )
}

mktemplate-common() {
    # Set up loop device
    message_n "setting up loop device"
    loop_device="$(losetup --find --show ${imagefile})" && result=$? && \
    echo -n " ( ${loop_device} )" && \
    right_status ${result} || ( right_status $? && exit 1 )
    # Create partition table
    message_n "making dos disk label ..."
    parted -s "$loop_device" mklabel msdos && right_status $? || ( right_status $? && exit 1 )
    # Create partitions
    message_n "creating partition 1 ..."
    # create partition 1 starting at 0 and going until designated size
    parted -s "$loop_device" mkpart primary 0% ${partition1_size_mb}MiB && right_status $? || ( right_status $? && exit 1 )
    message_n "creating partition 2 ..."
    # create partition 2 starting at the end of partition 1 and using the rest of the device
    parted -s "$loop_device" mkpart primary ${partition1_size_mb}MiB 100% && right_status $? || ( right_status $? && exit 1 )
    # Get partition device names
    message_n "getting device name for partition 1 ..."
    partition1_device="${loop_device}p1" && result=$? && \
    echo -n " ( ${partition1_device} )" && \
    right_status ${result} || ( right_status $? && exit 1 )
    message_n "getting device name for partition 1 ..."
    partition2_device="${loop_device}p2" && result=$? && \
    echo -n " ( ${partition2_device} )" && \
    right_status ${result} || ( right_status $? && exit 1 )
    # Format partitions
    message "formatting partition 1 ..."
    mkfs.vfat -F 32 -n bootfs "$partition1_device" && right_status $? || ( right_status $? && exit 1 )
    message "formatting partition 2 ..."
    mkfs.ext4 -L rootfs "$partition2_device" && right_status $? || ( right_status $? && exit 1 )
    # mount rootfs, mkdir boot
    if [ ! -d /mnt/image ] ; then
        message_n "creating mountpoint /mnt/image ..."
        mkdir /mnt/image && right_status $? || ( right_status $? && exit 1 )
    fi
    message_n "mounting rootfs ..."
    mount "${partition2_device}" /mnt/image && right_status $? || ( right_status $? && exit 1 )
    message_n "creating boot directory ..."
    mkdir /mnt/image/boot && right_status $? || ( right_status $? && exit 1 )
    message "un-mounting rootfs ..."
    umount /mnt/image && right_status $? || ( right_status $? && exit 1 )
    # Clean up loop device
    message_n "cleaning up loop device [ ${loop_device} ]"
    losetup -d "$loop_device" && right_status $? || ( right_status $? && exit 1 )
    echo "Image ${imagefile} created with two partitions:"
    echo "Partition 1: $partition1_size_mb MB, formatted as vfat"
    echo "Partition 2: $partition2_size_mb MB, formatted as ext4"
    return 0
}

#-----[ main script ]---------------------------------------------
checkroot
separator ${PN} $(hostname)
[ $# -ne 0 ] && usage

# initialize variables and set default values
initialize_variables || die "Failed to initialize_variables"
prepare || die "failed prepare()"
display_configuration || die "failed to display_configuration"

# previously written to take argument 1 to be assigned to IMAGE_TYPE, but
# cb-setup is hard-coded using "cb-mktemplateimage s" -- so hard code it
# here instead and avoid having to accomodate in common local.usage cli options
IMAGE_TYPE="s"
case ${IMAGE_TYPE:0:1} in
    [sS] ) mksparseimagetemplate || die "failed to mksparseimagetemplate" ;;
    [fF] ) mkimagetemplate || die "failed to mkimagetemplate" ;;
    * ) E_message "Invalid argument [ ${IMAGE_TYPE} ]" ; usage ;;
esac

exit 0
