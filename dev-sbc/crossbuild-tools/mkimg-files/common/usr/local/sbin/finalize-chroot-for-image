#!/bin/bash
#
# finalize-chroot-for-image    joe brendler 14 May 2025
#
# should be run automatically by /root/.bashrc if file ${firstrunmarker} exists
#
# can be run separately by user at any time when in proper context -
#   must be running inside a qemu-chroot
# (don't want to run this for an actual deployed image)
#
# if all goes well, remove the ${firstrunmarker} file
#   so .bashrc won't try to run it again

# look for /root/firstlogin (which is removed upon completion of this script)
#firstrunmarker=/root/firstimglogin
#[ ! -e ${firstrunmarker} ] && exit 0


source /usr/local/sbin/script_header_brendlefly

#-----[ variables ]---------------------------------------------------------------------

message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?

VERBOSE=$TRUE
#verbosity=2
verbosity=3
PN=$(basename $0)

COMPLETE=$TRUE  # (tentatively; any step below can change this)
FLAGGED=$FALSE
result=0
mytimezone=America/New_York

varlist="PN BUILD BOARD TARGET"
varlist+=" starting_step stopping_step finishupstatusfile"
varlist+=" bool.RESUME bool.INTERACTIVE"
varlist+=" bool.COMPLETE bool.FLAGGED"
varlist+=" BREAK bool.VERBOSE verbosity"
varlist+=" BREAK lv.chroot_emerge"

command_sequence=(
'validate-prerequisites'
'check-reload-config'
'set-password root'
'set-timezone'
'set-hostname'
'sync-repo gentoo'
'sync-repo joetoo'
'add-user'
'fix-inittab'
'write-fstab'
'chroot_emerge-world'
'run-dispatch-conf'
'add-default-runlevel-services'
'setup-clock'
'install-boot-firmware'
'display-next-steps'
)

msg1_sequence=(
'validate prerequisites'
'check and reload config'
'set root password'
'set timezone'
'set hostname'
'sync repo gentoo'
'sync repo joetoo'
'add user'
'fix inittab'
'write fstab'
'chroot_emerge world'
'run dispatch-conf'
'add default runlevel services'
'set up clock'
'install boot firmware'
'display next steps'
)

msg2_sequence=(
'validating prerequisites'
'checking and reloading config'
'setting root password'
'setting timezone'
'setting hostname'
'syncing repo gentoo'
'syncing repo joetoo'
'adding user'
'fixing inittab'
'writing fstab'
'emerging(-chroot) world'
'running dispatch-conf'
'adding default runlevel services'
'setting up clock'
'installing boot firmware'
'displaying next steps'
)

#-----[ functions ]---------------------------------------------------------------------

usage() {
  N=$(( ${#command_sequence[@]} -1 ))
  separator "${PN}-${BUILD}" "$(hostname)"
  E_message "${BRon}Usage: ${BGon}${PN} [-[options]] ${Boff}"
  message "${BYon}Valid Options --${Boff}"
  message "  -i | --interactive......: run interactively; confirm execution of each step"
  message "  -n | --noninteractive...: run non-interactively; proceed automatically with each step"
  message "  -s | --status...........: return status (next step, step_number)"
  message "  -r | --resume...........: resume proccessing (with next step, from finishupstatusfile)"
  message "  -v | --verbose..........: increase verbosity"
  message "  -q | --quiet............: decrease verbosity"
  message "  -[0-${N}].................: save N to status file and resume at step N"
  echo
  message "${BMon}Note: single-character options may be combined. For example -${Boff}"
  message "  ${BGon}${PN} --verbose -nqr8${Boff}"
  message "  ${BYon}would resume non-interactively at step 8 with normal verbosity${Boff}"
  echo
  message "${BMon}Other notes:${Boff}"
  message "   - option  -i (interactive) is on by default"
  message "   - option  -r (resume) sets starting_step to value in finishupstatusfile [ $finishupstatusfile ]"
  message "   - option  -[0-${N}] sets starting_step (default 0) to the specified value"
  echo
  message "${BYon}Command sequence steps:${Boff}"
  for ((s=0; s<${#command_sequence[@]}; s++))
  do
    echo -e "    ${LBon}${s}: ${command_sequence[$s]}${Boff}"
  done
  exit 1
}


initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."
    initialize_vars ${varlist}
    # set default values
    FLAGGED=$FALSE
    d_message_n "sourcing BUILD ..." 2
    source /etc/crossbuild-tools/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default starting_step = 0" 2
    export starting_step=0 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default stopping_step = $(( ${#command_sequence[@]} - 1 ))" 2
    export stopping_step=$(( ${#command_sequence[@]} - 1 )) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default finishupstatusfile = /root/bin/finishup_status" 2
    export finishupstatusfile="/root/bin/finishup_status" && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default INTERACTIVE true" 2
    export INTERACTIVE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE true" 2
    export VERBOSE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = 3" 2
    export verbosity=3 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
}

validate_status_file() {
    [ $# -ne 1 ] && E_message "Error: must specify status_file" && return 1
    status_file=$1
    d_message "status_file: [ ${status_file} ]" 3
    status_dir=$(dirname ${status_file})
    d_message "status_dir: [ ${status_dir} ]" 3
    message_n "validating status_dir [${status_dir}] ..."
    if [ ! -d ${status_dir} ] ; then
        echo -en " (creating) ..."
        mkdir -p ${status_dir} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    message_n "validating status_file [${status_file}] ..."
    if [ ! -f ${status_file} ] ; then
        echo -en " (creating) ..."
        touch ${status_file} && right_status $? || ( right_status $? && return 1 )
    else
        echo -en " (valid)" ; right_status $TRUE
    fi
    # final validation
    message_n "re-verifying status_file [${status_file}] ..."
    [ -f ${status_file} ] && result=$TRUE || result=1
    right_status $result
    return $result
}

linear_search() {  # find $2 in array $1, return index
    # pass arguments like this usage:
    # linear_search 'cb-setup ${BOARD}' "${command_sequence[@]}"
    #
    needle="$1" ; shift ; haystack=("$@")
#    echo "needle: ${needle}"
#    echo "haystack length: ${#haystack[@]}"
    for ((i=0; i<${#haystack[@]}; i++ )) ; do
        [[ "${haystack[$i]}" == "${needle}" ]] && echo $i && return $i
    done
}

display_configuration()  {
    # will pick up PN, BUILD, varlist from the environment of whatever script sources cb-common-functions
    separator "configuration" "${PN}-${BUILD}"
    longest=$(get_longest ${varlist})
    display_vars ${longest} ${varlist}
    return 0
}

process_cmdline() {
  # process command line arguments (for now only -x/--exclude option can have argument(s))
  arglist="$@"

  last=""
  d_message "processing command line with [ ${arglist} ]" 2
  # shift each argument into position $1 and examine it
  #   process the argument or processit with its own arguments
  while [ ! -z "$1" ]
  do
    d_message "arg1 = [ $1 ]" 3
    # if arg begins with a single dash, process it alone
    if [ "${1:0:1}" == "-" ] && [ "${1:1:1}" != "-" ] ; then
      d_message "processing [ $1 ] alone as single-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is -t or -b
      [[ "${1}" =~ ^(-t|-b)$ ]] && shift  # extra shift to clear target or board
      shift
    # if arg begins with a double dash, process it alone
    elif [ "${1:0:2}" == "--" ] ; then
      d_message "processing [ $1 ] alone as double-dash argument" 3
      process_argument $1 $2   # incl $2 in case $1 is --target
      [[ "$1" == "--target" ]] && shift  # extra shift to clear target
      shift
    else
      d_message "does not start with - or --" 3
      usage; exit
    fi
  done
  d_message "done with process_command_line" 2
  return 0
}

process_argument() {
  d_message "about to process [ $* ]" 2
  d_message "1: [ $1 ], 2: [ $2 ]" 2
  # process command line argument (must be one of the following)
  [ ! -z "$1" ] && case "$1" in
    "-"[sS] | "--status"         )
      # display status
      d_message "${BYon}reading status file: [ ${BWon}${finishupstatusfile}${BYon}  ]${Boff}" 2
      read starting_step < ${finishupstatusfile};
      msg="${BWon}Status: Step $(($starting_step - 1)) complete;"
      msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]${Boff}"
      message "${msg}"
      exit;
      ;;
    "-"[rR] | "--resume"         )
      # resume at stored step unless that is overridden by a new start # (below)
      d_message "${BYon}reading status file: [ ${BWon}${finishupstatusfile}${BYon}  ]${Boff}" 2
      export RESUME=${TRUE}
      read starting_step < ${finishupstatusfile};
      msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
      msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
      d_message "${msg}" 2
      ;;
    -*[0-9]*  )
        # currently there are double-digit steps; if the next char is also numeric, append it
        myarg=${1:1} # drop the leading "-"
        export RESUME=${TRUE}
        if $(isnumber ${myarg}) && [ ${myarg} -ge 0 ] && \
          [ ${myarg} -lt ${#command_sequence[@]} ] ; then
            export starting_step=${myarg};
            msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
            msg+=" to status file [${Boff}${finishupstatusfile}${BYon}]${Boff}"
            d_message "${msg}" 2
            echo ${starting_step} > ${finishupstatusfile};
            msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
            msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
            d_message "${msg}" 2
        else
            # it may be a combination of numbers and letters - hand off to process_compound_arg()
            process_compound_arg $1
        fi
        ;;
    "-"[iI] | "--interactive"    )
      # interactive
      export INTERACTIVE=${TRUE};
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[nN] | "--noninteractive" )
      # non-interactive
      export INTERACTIVE=${FALSE}
      d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
      ;;
    "-"[qQ] | "--quiet"          )
      # decrease verbosity
      [[ ${verbosity} -gt 0 ]] && let verbosity--
      [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
      d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
      ;;
    "-"[vV] | "--verbose"          )
      # increase verbosity
      [[ ${verbosity} -lt 6 ]] && let verbosity++
      export VERBOSE=${TRUE}
      d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
      ;;       # note: "numeric" args like -4 should fall through to this default
    *                            )
    process_compound_arg $1
      ;;
  esac
  d_message "done with process_argument" 3
  return 0
}

process_compound_arg()  {
    d_message "about to process compound [ $* ]" 2
    # must begin with a single dash
    [ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
    # must not begin with two dashes (would have been picked in process_argument)
    [ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
    # strip leading dash(es)
    myargs=${1##-}
    # handle remaining characters in sequence
    while [ -n "${myargs}" ]
    do
        #handle one character at at time, from the left
        case ${myargs:0:1} in
            [sS] )
                # display status
                d_message "${BYon}reading status file: [ ${BWon}${finishupstatusfile}${BYon}  ]${Boff}" 2
                read starting_step < ${finishupstatusfile};
                msg="${BWon}Status: Step $(($starting_step - 1)) complete;"
                msg+=" next step would be [ ${BMon}$starting_step${BWon} ]"
                msg+=" [ ${BGon}${command_sequence[${starting_step}]} ${BWon}]${Boff}"
                d_message "${msg}" 2
                exit;
                ;;
            [rR] )
                # resume at stored step unless that is overridden by a new start # (below)
                d_message "${BYon}reading status file: [ ${BWon}${finishupstatusfile}${BYon}  ]${Boff}" 2
                export RESUME=${TRUE}
                read starting_step < ${finishupstatusfile};
                msg="${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ]"
                msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                d_message "${msg}" 2
                ;;
            [0-9] )
                # currently there are double-digin steps; if the next char is also numeric, append it and "shift"
                export RESUME=${TRUE}
                starting_step="${myargs:0:1}";
                if [[ "${myargs:1:1}" == [0-9] ]] ; then
                    export starting_step="${myargs:0:2}";
                    myargs=${myargs:1}
                fi
                if [ $starting_step -gt ${#command_sequence[@]} ] ; then
                    E_message "invalid starting_step [${starting_step}]"
                    usage
                else
                    msg="${BYon}Saving next step ${BWon}${starting_step}${BYon}"
                    msg+=" to status file [${Boff}${finishupstatusfile}${BYon}]${Boff}"
                    d_message "${msg}" 2
                    echo ${starting_step} > ${finishupstatusfile};
                    msg="${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ]"
                    msg+=" --[ ${BGon}${msg1_sequence[${starting_step}]}${BWon} ]--${Boff}"
                    d_message "${msg}" 2
                fi
                ;;
            [iI] )
                # interactive
                export INTERACTIVE=${TRUE};
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [nN] )
                # non-interactive
                export INTERACTIVE=${FALSE}
                d_message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}" 2
                ;;
            [qQ] )
                # decrease verbosity
                [[ ${verbosity} -gt 0 ]] && let verbosity--
                [[ ${verbosity} -eq 0 ]] && export VERBOSE=${FALSE}
                d_message "${BYon}decreased verbosity: ${verbosity}${Boff}" 2
                ;;
            [vV] )
                # increase verbosity
                [[ ${verbosity} -lt 6 ]] && let verbosity++
                export VERBOSE=${TRUE}
                d_message "${BYon}increased verbosity: ${verbosity}${Boff}" 2
                ;;       # note: "numeric" args like -4 should fall through to this default
            *   ) E_message "${E_BAD_ARGS}" && usage && exit 1
        esac
        #strip first char from myargs (i.e. "shift" one character)
        myargs=${myargs:1}
    done
    d_message "done with process_compount_arg" 3
    return 0
}



new_prompt()        # set external variable $response based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; # '=~' not in busybox
while ! expr "${response:0:1}" : [yYnNsS] >/dev/null;  # response not a regex match
do RCP; echo -en " $(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; done; }

run_sequence() {
    echo
    separator "Running command sequence" "${PN}-${BUILD}"
    echo
    d_message "starting_step: [ ${starting_step} ]" 3
    d_message "stopping_step: [ ${stopping_step} ]" 3
    for ((step_number=${starting_step}; step_number<=${stopping_step}; step_number++))
    do
        separator "(${step_number}: ${command_sequence[${step_number}]})" "${PN}-${BUILD}"
        d_message "Writing step_number [ $step_number ] to finishupstatusfile ( $finishupstatusfile )" 2
        echo $step_number > ${finishupstatusfile}
        if [[ ${INTERACTIVE} ]] ; then
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will prompt to ${step_number}: (${msg1_sequence[${step_number}]})"
            d_message "${msg}" 2
            response=""
            # confirm user is ready/wants to run the next command
            new_prompt "${BMon}Are you ready to ${BGon}${msg1_sequence[${step_number}]}${BMon}?${Boff}"
        else  # automatically execute other steps for non-interactive
            msg="INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}"
            msg+=" ; will automatically ${step_number}: (${msg1_sequence[${step_number}]})"
            d_message "${msg}" 2
            message "${BMon}Beginning ${BGon}${command_sequence[${step_number}]}${BMon} as instructed ...${Boff}"
            response="y"
       fi  ## interactive
       case $response in
           [Yy] )  # execute this command and continue
               message "${LBon}About to run ${BYon}${command_sequence[${step_number}]}${LBon} ...${Boff}" ; \
               eval ${command_sequence[${step_number}]} ; result=$? ;
               if [ ${result} -eq 0 ] ; then
                   message "${BYon}Note:${Boff} ${command_sequence[${step_number}]} ${BGon}completed successfully${Boff}"
               else
                   E_message "${BYon}Note:${Boff} ${command_sequence[${step_number}]} ${BRon}failed${Boff}"
               fi
               ;;
           [Ss] ) ;; # skip this command and continue
           *    )  # abort due to negative response
               message "${BRon}As instructed, not running ${BGon}${command_sequence[${step_number}]}${BRon}. Quitting...${Boff}" ; \
               exit ;;
        esac

    done
    echo
}

get-target() {
    # determine what qemu-chroot environment (target) I'm running inisde of (flag, fatal if failure)
    message_n "determining TARGET ..."
    apparent_TARGET=$(portageq envvar CHOST) ; result=$? ; right_status $result
    [ $result -eq 0 ] && message "apparent_TARGET: $apparent_TARGET" || \
        ( E_message "failed to determine apparent_TARGET" && FLAGGED=$TRUE && return 1 )
}

get-check-config() {
    # source /root/.cb-config and validate TARGET (fatal if failure)
    # also assign BOARD, etc. I am ... (non-fatal if failure)
    [ -e /root/.cb-config ] && source /root/.cb-config || ( E_message "/root/.cb-config not found" )
    message_n "validating BOARD, TARGET and qemu-chroot config ..."
    if [[ "${apparent_TARGET}" == "${TARGET}" ]] ; then
        echo -en " ${BGon}(match)${Boff}"
        right_status $TRUE
        message "  BOARD ........: $BOARD"
        message "  TARGET .......: $TARGET"
        message "  TARGET_ARCH ..: $TARGET_ARCH"
        message "  QEMU_ARCH ....: $QEMU_ARCH"
        return 0
    else
        echo -en " ${BRon}(mismatch)${Boff}"
        right_status 1
        E_message "TARGET mismatch; exiting"
        FLAGGED=$TRUE
        return 1
    fi
}

build-chroot_emerge-command() {
    export chroot_emerge="ROOT=/ CBUILD=${TARGET} \
        PORTAGE_TMPDIR=/tmp/ DISTDIR=/var/cache/distfiles \
        PKGDIR=/var/cache/binpkgs PORT_LOGDIR=/var/log/portage \
        HOSTCC=${TARGET}-gcc emerge"
}

validate-prerequisites() {
    # Validate prerequisite expectations -
    #   user should have already run cb-mkenv, cb-chroot-target, and its finalize-chroot
    #   confirm by checking for /usr/${TARGET/ var - which should be a link to /var
    message_n "checking if /usr/${TARGET}/var is already linked --> /var ..."
    check_target=/usr/${TARGET}/var
    check_status=$(file ${check_target} | sed "s|${check_target}: ||")
    case $(echo $check_status | awk '{print $1}') in
        "symbolic"  )
            # link exists (validate it)
            echo -en " (link found)"
            if [[ "${check_status}" == "symbolic link to /var" ]] ; then
                # valid
                echo -en " (valid link)"
                result=$TRUE
                right_status $result
            else
                echo -en " (invalid link)"
                result=1
                right_status $result
            fi
            ;;
        * )
            echo -en "  (not linked)"
            right_status $result
            E_message "invalid chroot layout: ${check_target} is [${check_status}]"
            E_message "fix layout; conisder re-running cb-chroot-target ${BOARD} (and its finalize-chroot)"
            E_message "and/or rebuild with cb-mkenv from dev-sbc/crossbuild-tools::joetoo"
            result=2
            ;;
    esac
    [ $result -ne 0 ] && COMPLETE=$FALSE
    return $result
}

check-reload-config() {
    # check/reload config
    message "checking/reloading config ..."
    gcc-config -l && \
    ldconfig -v && \
    ROOT=/ env-update && \
    source /etc/profile ; result=$?
    [ $result -ne 0 ] && COMPLETE=$FALSE
    right_status $result
    return $result
}

set-password() {
    # set passwd for user $1
    [ $# -ne 1 ] && E_message "invalid argument for set-password()" && return 1
    user="$1"
    message "please set the password for user [${user}] on this image"
    passwd "${user}" ; result=$?
    if [ $result -eq 0 ] ; then
        message "${BGon}(success)${Boff}"
        return 0
    else
        E_message "failed to set passwd for user [${user}]"
        FLAGGED=$TRUE
        return 1
    fi
}

set-timezone() {
    #  set timezone
    message_n "setting local timezone (America/New_York) for joetoo ..."
    ln -sf ../usr/share/zoneinfo/${mytimezone} /etc/localtime && \
    ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
}

set-hostname() {
#  set hostname
    response=""
    while [[ ! "${response}" == [yYsS] ]] ; do
        echo "set hostname for this image: "
        read candidate
        message "you responded [ ${candidate} ]"
        new_prompt "is this correct?"
    done
    if [[ "${response}" == [yY] ]] ; then
        message_n "setting hostname: ${candidate}"
        echo "${candidate}" > /etc/hostname
        ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
        ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
    else
        E_message "candidate hostname provided, then rejected"
        message "please make a note to manually run the following command when you have time --"
        message "    ${BBon}echo ${BYon}<hostname> ${BGon}> ${Boff}/etc/hostname"
        return 2
    fi
}

sync-repo() {
    REPO=$1
    # if the eix database directory does not exist, create it and give portage permission to use it
    if [ ! -d /var/cache/eix ] ; then
        message_n "eix database directory does not exist; creating ..."
        mkdir -p /var/cache/eix ; right_status $?
        message_n "setting permissions on eix database directory ..."
        chown -R portage:portage /var/cache/eix ; right_status $?
    else
        message "eix database /var/cache/eix already exists"
        message_n "setting permissions on eix database directory ..."
        chown -R portage:portage /var/cache/eix ; right_status $?
    fi
    # just notify which case we have - empty or existing repo
    [[ -z $(find var/db/repos/${REPO}/ -mindepth 1) ]] && E_message "Repository ${REPO} is empty" || \
        message "Repository ${REPO} exists"
    # run ${chroot_emerge} --sync (explicitly rather than with alias) for this repo
    message 'synchronizing portage tree with ${chroot_emerge} -av --sync'" ${REPO} ..."
    d_message "chroot_emerge = ${chroot_emerge}" 3

    eval "${chroot_emerge} -av --sync ${REPO}" ; result=$?
    message_n "exit status - " && right_status $result || ( right_status $result && return 1 )
    return 0
}

add-user() {
    # populate-user -- cb-populate-image should have loaded whatever structure
    #    was found in /etc/crossbuild-tools/mkimg-files ...
    #    including .bashrc, .ssh/keys...
    #    as long as user populated that structure after emerging crossbuild-tools
    response=""
    while [[ ! "${response}" == [yYsS] ]] ; do
        echo "set username for routine daily user: "
        read candidate
        message "you responded [ ${candidate} ]"
        new_prompt "is this correct?"
    done
    if [[ "${response}" == [yY] ]] ; then
        message_n "setting up user ${candidate}"
        useradd -m -G wheel,console,audio,cdrom,video,cdrw,usb,users,portage -s /bin/bash ${candidate} && \
        ( echo -en " ${BGon}(success)${Boff}" && right_status $result ) || \
        ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
    else
        E_message "candidate username provided, then rejected"
        message "please make a note to manually run the following command when you have time --"
        message "    useradd ${BMon}-m -G${Boff} wheel,console,audio,cdrom,video,cdrw,usb,users,portage ${BMon}-s${Boff} /bin/bash ${BRon}\${username}${Boff}"
        return 2
    fi

    # set password for this user
    set-password ${candidate} && ( right_status $? && return 0 ) || \
        ( right_status $? && FLAGGED=$TRUE && return 1 )
}

fix-inittab() {
    message_n "fixing /etc/inittab ..."
    sed -i 's|^s0:|#s0:|' /etc/inittab && result=$? && \
    ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
}

write-fstab() {
    # get root_dev
    message_n "determining root_dev ..."
    root_mountpoint="/"
    root_dev=$(mount | grep " ${root_mountpoint} " | awk '{print $1}') && \
    ( echo -en " (${root_dev})" && right_status $result ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
    # get boot_dev
    boot_mountpoint="/boot"
    message_n "determining boot_dev ..."
    boot_dev=$(mount | grep " ${boot_mountpoint} " | awk '{print $1}') && \
    ( echo -en " (${boot_dev})" && right_status $result ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE && return 1 )
    # get blkid data for root_dev
    message_n "getting blkid data for root_dev"
    eval $(blkid | grep ${root_dev} | sed "s|${root_dev}: ||") ; result=$?
    if [ $result -eq 0 ] ; then
        root_fstype=${TYPE}
        root_uuid=${UUID}
        root_partuuid=${PARTUUID}
        echo -en " (fstype: [${root_fstype=}] partuuid: [${root_partuuid}])"
        right_status $result
    else
        echo -en " ${BRon}(fail)${Boff}"
        right_status $result
        FLAGGED=$TRUE
        return 1
    fi
    # get blkid data for boot_dev
    message_n "getting blkid data for boot_dev"
    eval $(blkid | grep ${boot_dev} | sed "s|${boot_dev}: ||") ; result=$?
    if [ $result -eq 0 ] ; then
        boot_fstype=${TYPE}
        boot_uuid=${UUID}
        boot_partuuid=${PARTUUID}
        echo -en " (fstype: [${boot_fstype=}] partuuid: [${boot_partuuid}])"
        right_status $result
    else
        echo -en " ${BRon}(fail)${Boff}"
        right_status $result
        FLAGGED=$TRUE
        return 1
    fi
    # set fstab opts and dump-pass strings for root and boot
    root_opts="noatime"
    root_dp="0 1"
    boot_opts="noatime,noauto,nodev,nosuid,noexec"
    boot_dp="1 2"
    # write (append) fstab line for /boot and / (PARTUUIDs will have to be changed after image is written to media (e.g. sd card)
    message_n "writing (appending) fstab line for /boot ..."
    echo -e "PARTUUID=${boot_partuuid}\t${boot_mountpoint}\t\t${boot_fstype}\t\t${boot_opts}\t\t${boot_dp}" >> /etc/fstab && \
    ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE )
    message_n "writing (appending) fstab line for / ..."
    echo -e "PARTUUID=${root_partuuid}\t${root_mountpoint}\t\t${root_fstype}\t\t${root_opts}\t\t${root_dp}" >> /etc/fstab && \
    ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE )
    # write (append) a placeholder fstab line for swap
    message_n "writing (appending) fstab placeholder line for /var/cache/swap/swap1 ..."
    echo -e "/var/cache/swap/swap1\tnone\t\tswap\t\tsw\t\t0 0" >> /etc/fstab && \
    ( echo -en " ${BGon}(success)${Boff}" && right_status $result  && return 0 ) || \
    ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && FLAGGED=$TRUE )
    return 0
}

chroot_emerge-world() {
    # re-run chroot_emerge -uavDN @world --keep-going
    message "about to run chroot_emerge -uavDN @world --keep-going"
    [[ $INTERACTIVE ]] && emerge_opts="-uavDNg" || emerge_opts="-uvDNg"
    eval "${chroot_emerge} ${emerge_opts} @world --keep-going" ; result=$?
    [ $result -eq 0 ] && message "chroot_emerge-world ${BGon}succeeded${Boff}" || \
        E_message "chroot_emerge-world ${BRon}failed${Boff}"
    return $result
}

run-dispatch-conf() {
    message "about to run dispatch-conf"
    ROOT=/ dispatch-conf ; result=$?
    [ $result -eq 0 ] && message "run-dispatch-conf ${BGon}succeeded${Boff}" || \
        E_message "run-dispatch-conf ${BRon}failed${Boff}"
    return $result
}

add-default-runlevel-services() {
    # add all services to default runlevel (should have merged with world)
    SOFARSOGOOD=$TRUE
    message "Adding services to the default runlevel ..."
    list="apache2 chronyd cronie dbus distccd gpm local mysql net.eth0 net.wlan0 netmount ntpd php-fpm rsyncd sshd sysklogd"
    for x in $list ; do
        message_n "examining ${x}"
        if [ ! -L /etc/runlevels/default/${x} ] ; then
            echo -en " (linking)"
            ln -s /etc/init.d/${x} /etc/runlevels/default/${x} ; result=$?
            ( echo -en " ${BGon}(success)${Boff}" && right_status $result ) || \
            ( echo -en " ${BRon}(fail)${Boff}" && right_status $result && SOFARSOGOOD=$FALSE )
        else
            echo -en " (already linked)" ; right_status $TRUE
        fi
    done
    if [[ $SOFARSOGOOD ]] ; then
        message "add-default-runlevel-services ${BGon}succeeded${Boff}"
        return 0
    else
        E_message "add-default-runlevel-services ${BRon}completed with errors${Boff}"
        FLAGGED=$TRUE
        return 1
    fi
}

setup-clock() {
    # determine what is presently set up, query user to fix
    currentclock=$(find /etc/runlevels/boot/ -iname "*clock" -exec basename {} \;)
    case ${currentclock} in
        [sh]"wclock" )
            message "boot runlevel currentclock: ${currentclock}" ;
            case ${currentclock:0:1} in
                "h" ) otherclock="swclock" ;;
                "s" ) otherclock="hwclock" ;;
                * ) E_message "invalid currentclock" ; return 1 ;;
            esac
            response="" ;
            msg="would you like to change to ${otherclock} ?\n"
            msg+="  y = yes; change | [s|n] = no; keep"
            new_prompt "${msg}"
            case ${response:0:1} in
                [yY] )
                    message_n "removing current boot runlevel clock service ..." ;
                    rm /etc/runlevels/boot/${currentclock} ; right_status $?
                    message_n "adding new boot runlevel clock service [${otherclock}] ..."
                    ln -s /etc/init.d/${otherclock} /etc/runlevels/boot/${otherclock} ; right_status $?
                    ;;
                [nNsS] ) ;;
                * ) E_message "invalid response" ; return 1 ;;
            esac
            return 0 ;
            ;;
        * ) E_message "invalid clock for boot runlevel: [{currentclock}]" ; return 1 ;;
    esac
}

install-boot-firmware() {
    # install boot-firmware with
    #    sys-boot/raspi-boot-firmware  -- for raspi boards, all of which are named bcm27xx-rpi-x-x...
    #    sys-boot/rockchip-boot-firmware  -- for rockchip boards, all of which are named rk3xxx-nnnn
    #    for generic boards use default (raspi)
    # determine which we need ...
    case ${BOARD:0:2} in
        "bc" ) package="sys-boot/raspi-boot-firmware" ;;
        "rk" ) package="sys-boot/rockchip-boot-firmware" ;;
        "ge" ) package="sys-boot/raspi-boot-firmware" ;;
        *    ) Emessage "invalid board case in $0"; return 1 ;;
    esac
    message "about to run chroot_emerge ${emerge_opts} ${package}"
    [[ $INTERACTIVE ]] && emerge_opts="-uavDNg" || emerge_opts="-uvDNg"
    eval "${chroot_emerge} ${emerge_opts} ${package}" ;  result=$?
    [ $result -eq 0 ] && message "chroot_emerge ${emerge_opts} ${package} ${BGon}succeeded${Boff}" || \
        E_message "chroot_emerge ${emerge_opts} ${package}  ${BRon}failed${Boff}"
    return $result
}

display-next-steps() {
    message "${BYon}Image construction is complete, but there is more to do...${Boff}"
    message "Your wifi may not work if you don't have the right drivers"
    message "  for various raspberry pi boards, see this reference -"
    message "  https://wiki.gentoo.org/wiki/Raspberry_Pi_Install_Guide"
    message "${LBon}These are steps in subsequent deployment of the image --${Boff}"
    message "  + exit the qemu-chroot"
    message "  + format/layout an SD card or other external device"
    message "  + NOTE: for rockchip boards, u-boot must also be installed"
    message "    (it should have been made available in the image by"
    message "     installation of sys-boot/rockchip-boot-fw::joetoo ->"
    message "  /boot/u-boot_reflash_resources/u-boot_reflash_instructions"
    message "  + loop-mount the external device to /mnt/to and /mnt/to/boot"
    message "  + copy from image /usr/${TARGET}/* to /mnt/to/ "
    message "${LBon}These things have to be done after the image is deployed --${Boff}"
    message "  + use blkid to fix /etc/fstab (change partuuid for / and /boot)"
    message "  + create swapfile ; turn it on ; add swap to /etc/fstab"
    message "    (use host system swap until new image media is deployed)"
    message "    (for RAM < 2G, swap = 2 * RAM; for RAM > 2G, swap = RAM + 2G"
    message "${LBon}When finished deploying the image, un-mount as follows --${Boff}"
    message "  cd"
    message "  umount -R /usr/${TARGET}"
    message '  loop_dev=$(echo $root_dev | sed "s|p2||")'
    message '  losetup -D ${loop_dev}'
    message "${LBon}These things have to be done after the deployed image boots --${Boff}"
    message "  on a real system for the first time --"
    message "  + verify current date/time"
    message "  + examine output of dmesg and logs, fix issues"
    echo
    message "${BWon}To do: some of the above may be automated by additional tools...${Boff}"
}

#-----[ main script ]-------------------------------------------------------------------
checkroot
separator ${PN} $(hostname)

initialize_variables     # set defaults

d_echo "cmdline: $*" 5
d_echo "processing cmdline args: $@" 5

msg="processing cmdline ..."
[ $verbosity -lt 2 ] && message_n "${msg}" || message "${msg}"
process_cmdline "${@}"   # override defaults, sets BOARD or TARGET
right_status $?

validate_status_file ${finishupstatusfile}
get-target ;  result=$?
[ $result -eq 0 ] && message "get-target returned ${BGon}success${Boff}" || \
    ( E_message "get-target returned ${BRon}failure${Boff}" && FLAGGED=$TRUE )
get-check-config ;  result=$?
[ $result -eq 0 ] && message "get-check-config returned ${BGon}success${Boff}" || \
    ( E_message "get-check-config returned ${BRon}failure${Boff}" && FLAGGED=$TRUE )
build-chroot_emerge-command ;  result=$?
[ $result -eq 0 ] && message "build-chroot_emerge-command returned ${BGon}success${Boff}" || \
    ( E_message "build-chroot_emerge-command returned ${BRon}failure${Boff}" && FLAGGED=$TRUE )
display_configuration ;  result=$?
[ $result -eq 0 ] && message "display_configuration returned ${BGon}success${Boff}" || \
    ( E_message "display_configuration returned ${BRon}failure${Boff}" && FLAGGED=$TRUE )
run_sequence ;  result=$?
[ $result -eq 0 ] && message "run_sequence returned ${BGon}success${Boff}" || \
    ( E_message "run_sequence returned ${BRon}failure${Boff}" && FLAGGED=$TRUE )

message_n "removing ${firstrunmarker} ..."
rm ${firstrunmarker} ; result=$?
[ $result -ne 0 ] && COMPLETE=$FALSE
right_status $result

[[ $FLAGGED ]] && COMPLETE=$FALSE

[[ $COMPLETE ]] && \
message "chroot firstlogin configuration completed successfully" || \
E_message "chroot firstlogin configuration completed with errors; check red flags in output above"
echo
