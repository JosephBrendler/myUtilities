This package contains files needed to create and populate a
crossbuild target filesystem for any single-board-computer (sbc)
supported by joetoo.

There are several use cases, each supported by an abstract workflow
automated by a script provided in this package. Those scripts
and the tools that they employ (also provided by this package) all
follow these fundamental conventions:

A: crossdev delivers a cross-compile environment to a "directory"
in /usr/ that is named for a cross-build <TARGET> tuple
e.g. /usr/armv6j-unknown-linux-gnueabihf

B To support many sbc environments on the same cross-build host,
we instead use image files named for associated BOARDs, and
these are then loop-mounted to the TARGET directories named by tuples
Thus we cross-build an image file (e.g. bcm2709-rpi-2-b.img for a
raspberry pi version 2 sbc).  Note: there can be another directory to
support another board of similar architecture (e.g. rk3288-tinker-s),
but only one of them can be loop-mounted on the target
(/usr/armv7a-unknown-linux-gnueabihf in this example) at any time.

D. IMPORTANT - workstations using crossbuild-tools can function
as cross-compilers for remote distcc clients, and may do so at
any time.  NOTE: at any give time, the currently-mounted environment
image will automatically be used by distcc's masquerade links to
activate compilers for such remotely submitted compile jobs.
Changing the environment in the middle of a distcc job may affect it.

E. IMPORTANT - systems employ either a "merged-usr" or a "split-usr"
layout (in /, if you see symlinks like /bin --> /usr/bin -- then
you have a merged-usr layout.  
CAUTION: Such system CANNOT share binary packages?
merged-usr systems can share binaries only with other merged-usr systems
split-usr systems can share binaries only with other split-usr systems
(be careful not to mix them)

Abstract workflow use-cases:
(1) the cb-mkenv script will create a cross-build environment in
the selected ${BOARD}.img image file.  This environment will function
as a qemu-chroot crossbuild structure, and it can also be used as a
binary package host (binhost) server by linking host web urls to its
var/cace/binpkgs. e.g. in the host's /var/www/localhost/htdocs/packages/
   armv6j-unknown-linux-gnueabihf-rpi1-packages -> (is a link to)
      /usr/armv6j-unknown-linux-gnueabihf/var/cache/binpkgs
   while /usr/bcm2709-rpi-2-b.img is loop-mounted on /usr/armv6j-unknown-linux-gnueabihf

(2) the cb-complete-image script will continue the cross-build process to
include files in the ${BOARD}.img image file to make it a bootable image.
This tool will also offer to deploy the image to another mounted block device
(e.g. a micro SD card with its partition 2 (/dev/sdb2 - rootfs) mounted on /mnt/gentoo
  and its partition 1 (/dev/sdb1 - bootfs) mounted on /mnt/gentoo/boot
(Note: the completed image can still be used as a binhost as in use case (1), but is
not necessary to complete workflow (2) (cb-complete-image) if you only want the
cross-build environment and binhost.

(3) constitutent tools can also be used independently
  cb-mkenv (workflow) -- starting from an empty template image file, create a full cross-build environment
    cb-umount -- un-mount loopdev, BOARD image file from TARGET
    cb-cleanup -- clean/remove BOARD.img file and TARGET directory, and cleanup crosscompiler
    cb-mktemplateimage -- create a new template image file, if needed
    cb-setup -- create BOARD image if needed
    cb-mount -- attach a loop device to the BOARD image, and mount it on the TARGET
    cb-quickpkg-toolchain -- use quickpkg to generate binaries for the crossbuild toolchain
    cb-populate-target -- populate the target image with configuration needed for cross-building
    cb-buildtarget-qemu -- create a qemu binary for the target and install it
    cb-chroot-target -- qemu-chroot into the target to enable native compiling
      (auto-runs finalize-chroot script)
  cb-mkimg (workflow) -- starting from cross-build environment image file, make a deployable image
    cb-populate-image -- add content to image so it can be deployed to a real system
    cb-chroot-target-image -- qemu-chroot into the target to enable additional native compiling
      (auto-runs finalize-chroot-for-image script)
  cb-common-functions -- common functions sourced to include in other scripts

Currently, the following BOARDs are supported:
    bcm2708-rpi-b
    bcm2709-rpi-2-b
    bcm2710-rpi-3-b
    bcm2710-rpi-3-b-plus
    bcm2711-rpi-4-b
    bcm2711-rpi-cm4-io
    bcm2712-rpi-5-b
    bcm2712-rpi-cm5-cm5io
    rk3288-tinker-s
    rk3399-tinker-2
    rk3399-rock-pi-4c-plus
    rk3588-rock-5b
    rk3588s-orangepi-5
    rk3588s-rock-5c

These boards use the following TARGET systems,
each of which can be linked to only one BOARD environment at a time
    armv6j-unknown-linux-gnueabihf
    armv7a-unknown-linux-gnueabihf
    aarch64-unknown-linux-gnu

NOTES: 
(1) cross-compiling with rust is not yet working
  (as annotated in steps)

(2) I originally tried to create directories for BOARDs,
  and links for TARGETs, pointed to selected BOARDs.
  However, this results in internal file collisions
  when using ${TARGET}-emerge -- files  NOT merged due to internal
  collisions between non-identical files. (compiler outputs non-identical
  files to different directories in emerge target ${D} that
  point to merged directories in the target system...
  So - instead, I've adopted the loop-mounted BOARD.img 
  approach described above
