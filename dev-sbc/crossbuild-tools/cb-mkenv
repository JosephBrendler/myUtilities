#!/bin/bash
#
# mkcrossbuildenv   joe brendler 17 April 2025
#
# interactive sequence to create a crossbuild environment (which qemu chroot)
#    for ${TARGET} system
#

# Note: as of build 0.1.4, these additional functions were moved to cb-common-functions:
#    sanity_check() display_configuration(), process_cmdline(),
#    process_argument(), process_compound_arg(), and run_sequence()
# These were already in cb-common-functions:
#    linear_search(), new_prompt(), TARGET-emerge-world(), TARGET-emerge-system(),
#    validate_target(), and validate_status_file()
# Most of these functions and most "cb-<name>" crossbuild-tools employ only one argument
#    (BOARD, status_file) or simply subsist off the environment of whichever abstract automated
#    workflow script called them or sourced cb-common-functions (cb-mkenv or cb-complete-image)
# However, usage() and initialize_variables() as well as the command_ and messageN_sequence
#    array variables will be defined somewhat differently in both of the abstract automated
#    workflow scripts (cb-mkenv and cb-complete-image)

source /usr/sbin/script_header_joetoo
message_n "sourcing BUILD ..."
source /etc/crossbuild-tools/BUILD ; right_status $?
message_n "sourcing BPN ..."
source /etc/crossbuild-tools/BPN ; right_status $?
source /usr/sbin/script_header_joetoo_extended

#-----[ variagles ]-----------------------------------------------------

VERBOSE=$TRUE
# set verbosity > 1 for debug incl initialization
#verbosity=1
verbosity=2
PN=$(basename $0)
response=""

varlist="PN BPN BUILD BREAK BOARD TARGET TARGET_ARCH QEMU_ARCH STAGE3_SELECTOR"
varlist+=" default_profile LLVM_TARGET"
varlist+=" BREAK starting_step stopping_step mkenvstatusfile"
varlist+=" bool.RESUME bool.INTERACTIVE"
varlist+=" bool.CREATE bool.DESTROY"
varlist+=" BREAK bool.VERBOSE verbosity old_dir"

command_sequence=(
'cb-umount ${BOARD}'
'cb-cleanup ${BOARD}'
'cb-setup ${BOARD}'
'cb-mount ${BOARD}'
'wget-stage3'
'verify-stage3-hashes'
'untar-stage3'
'create-new-cross-compiler'
'eselect-profile'
'cb-populate-target ${BOARD}'
'quickpkg-toolchain'
'symlink-repos'
'TARGET-emerge-joetoo-platform-meta'
'configure-make-conf-for-crossbuilding'
'run-dispatch-conf'
'edit-make-conf'
'edit-package-use-platform'
'edit-package-use-common'
'edit-package-accept-keywords'
'TARGET-emerge-system'
'TARGET-emerge-world'
'buildtarget-qemu'
'emerge-host-world'
'prepare-cross-rust'
'rebuild-rust-and-llvm'
'emerge-cross-rust-std'
'configure-make-conf-for-chroot'
'edit-make-conf'
'cb-chroot-target ${BOARD}'
'cb-umount ${BOARD}'
'stockpile-env'
)

msg1_sequence=(
'detach loop_dev and un-mount ${BOARD}.img, ${TARGET}'
'clean up crossdev environment'
'set up BOARD image'
'mount BOARD image on TARGET'
'download stage3'
'verify stage3 hashes'
'extract stage3 from tar.xz archive'
'create new cross compiler'
'eselect a profile'
'populate configs in crossbuild target environment'
'run quickpkg-toolchain'
'symlink repositories'
'${TARGET}-emerge platform-specific configs'
'configure make.conf for crossbuilding'
'run dispatch-conf'
'edit make.conf'
'edit package.use/joetoo_platform'
'edit package.use/joetoo_common'
'edit package.accept_keywords/joetoo'
'${TARGET}-emerge @system set'
'${TARGET}-emerge @world set'
'build qemu binary for ${TARGET}'
'restore host with emerge -uavDNgk @world'
'prepare to build cross-${TARGET}/rust-std'
'rebuild rust and llvm with new configuration if changed'
'emerge cross-${TARGET}/rust-std'
'configure make.conf for chroot'
'edit make.conf'
'chroot into new ${TARGET} environment'
'un-mount BOARD image'
'add image to crossbuild environment stockpile'
)

msg2_sequence=(
'detaching loop_dev and un-mounting ${BOARD}.img, ${TARGET}'
'cleaning up crossdev environment'
'settin up BOARD image'
'mounting BOARD image on TARGET'
'downloading stage3'
'verifying stage3 hashes'
'extracting stage3 from tar.xz archive'
'creating new cross compiler'
'eselecting profile'
'populating configs in crossbuild target environment'
'running quickpkg-toolchain'
'symlinking repositories'
'${TARGET}-emerging platform-specific configs'
'configuring make.conf for crossbuilding'
'running dispatch-conf'
'editing make.conf'
'editing package.use/joetoo_platform'
'editing package.use/joetoo_common'
'editing package.accept_keywords/joetoo'
'${TARGET}-emerging @system set'
'${TARGET}-emerging @world set'
'building qemu binary for ${TARGET}'
'restoring host with emerge -uavDNgk @world'
'preparing to build cross-${TARGET}/rust-std'
'rebuilding rust and llvm with new configuration if changed'
'emerging cross-${TARGET}/rust-std'
'configuring make.conf for chroot'
'editing make.conf'
'chrooting into new ${TARGET} environment'
'un-mounting BOARD image'
'adding image to crossbuild environment stockpile'
)

#-----[ functions ]-----------------------------------------------------

message_n "sourcing cb-common-functions ..."
source /usr/sbin/cb-common-functions ; right_status $?

# usage() ... moved to script_header_joetoo_extended, suplemented by /etc/${BPN}/local.usage

initialize_variables() {
    [ $verbosity -lt 2 ] && message_n "initializing ..." || message "initializing ..."
    initialize_vars ${varlist}

    # set default values
    FLAGGED=$FALSE
    d_message_n "sourcing BUILD ..." 2
    source /etc/crossbuild-tools/BUILD && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting PN = $(basename $0)" 2
    PN=$(basename $0) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing BPN ..." 2
    source /etc/crossbuild-tools/BPN && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "sourcing cb-common-functions ..." 2
    source /usr/sbin/cb-common-functions && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting old_dir = $(pwd)" 2
    export old_dir=$(pwd) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default starting_step = 0" 2
    export starting_step=0 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default stopping_step = $(( ${#command_sequence[@]} - 1 ))" 2
    export stopping_step=$(( ${#command_sequence[@]} - 1 )) && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default mkenvstatusfile = /root/bin/mkcrossbuildenv_status" 2
    export mkenvstatusfile="/root/bin/mkcrossbuildenv_status" && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default INTERACTIVE true" 2
    export INTERACTIVE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default VERBOSE true" 2
    export VERBOSE=$TRUE && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    d_message_n "setting default verbosity = 3" 2
    export verbosity=3 && d_right_status $? 2 || ( d_right_status $? 2 && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above"
        return 1
    else
        message "initialization complete"
        return 0
    fi
}

stockpile-env() {
    # (should be run after finalize-chroot and cb-umount have both completed)
    # copy the completed ${BOARD}.img file so it can be used as a minimal
    # start point for development of multle different individual systems
    # and/or as a distcc-cross-build or binary package server on this or
    # some other CHOST (save file as ${BOARD}.env

    stockpile=/home/joe/sbc-stockpile

    # create stockpile directory if it doesn't exist
    message_n "examining stockpile"
    if [ ! -d ${stockpile} ] ; then
        echo -en " (${BRon}not found${Boff})"
        mkdir -p ${stockpile} && \
            echo -en " (${BGon}created${Boff})" || die "failed to create stockpile"
    else
        echo -en " (${BGon}found${Boff})"
    fi
    right_status $TRUE

    # copy /usr/${BOARD}.img to ${stockpile}/${BOARD}.env
    message_n "stockpiling as ${BOARD}.env"
    cp /usr/${BOARD}.img ${stockpile%/}/${BOARD}.env && \
        echo -en " (${BGon}copied${Boff})" || die "failed copy to stockpile"
    right_status $TRUE
    return 0
}

emerge-host-world() {
    options="--update --verbose --deep --newuse --getbinpkg --usepkg --keep-going"
    [ $INTERACTIVE ] && options+=" --ask"
    emerge @world ${options} ; result=$?
    return $result
}

configure-make-conf-for-crossbuilding() {
    # remove any pending version of make.conf and accept delivery of chroot and crossbuild versions
    message_n "accepting pending ._cfgxxxx_make.conf installs ..."
    for x in /etc/portage/._cfg*make.conf; do rm $x ; done
    for x in /etc/portage/._cfg*make.conf.crossbuild; do 
        mv $x make.conf.crossbuild
    done
    for x in /etc/portage/._cfg*make.conf.chroot; do
        mv $x make.conf.chroot
    done
    right_status $TRUE
    # change to the chroot version of make.conf installed by joetoo-platform-meta
    message_n "configuring make.conf for crossbuilding ..."
    newfile="/usr/${TARGET}/etc/portage/make.conf.crossbuild"
    oldfile="/usr/${TARGET}/etc/portage/make.conf"
    cp "${newfile}" "${oldfile}" || die "failed to cp ${newfile} ${oldfile}"
    right_status $TRUE
    return 0
}

configure-make-conf-for-chroot() {
    # change to the chroot version of make.conf installed by joetoo-platform-meta
    newfile="/usr/${TARGET}/etc/portage/make.conf.chroot"
    oldfile="/usr/${TARGET}/etc/portage/make.conf"
    message_n "configuring make.conf for chroot ..."
    cp "${newfile}" "${oldfile}" || die "failed to cp ${newfile} ${oldfile}"
    right_status $TRUE
    return 0
}

emerge-cross-rust-std() {
    # build cross-${TARGET}/rust-std
    options="--verbose --getbinpkg --usepkg"
    [ $INTERACTIVE ] && options+=" --ask"
    emerge cross-${TARGET}/rust-std ${options} ; result=$?
    return $result
}

rebuild-rust-and-llvm() {
    # rebuild rust and llvm with the new configuration, if it changed
    if [ $RUST_LLVM_CHANGE_FLAG ] ; then
        # configuration changed - rebuild
        message "${BYon}rust/llvm configuration ${BMon}changed -- rebuilding${Boff}"
        options="--update --verbose --deep --newuse --getbinpkg --usepkg"
        [ $INTERACTIVE ] && options+=" --ask"
        emerge @world ${options} ; result=$?
    else
        # configuration unchanged - just continue
        message "${BYon}rust/llvm configuration ${BGon}unchanged -- continuing${Boff}"
        right_status $TRUE
        result=0
    fi
    return $result
}

prepare-cross-rust() {
    # Some packages (such as gnome-base/librsvg) depend on a rust cross toolchain
    # so build the rust cross toolchain

    # change this if we have to modify the system
    export RUST_LLVM_CHANGE_FLAG=$FALSE

    host_package_use="/etc/portage/package.use/joetoo"
    # verify that USE flag "dev-lang/rust rust-src" is in CHOST's package.use
    message_n "looking for \"dev-lang/rust rust-src\" in ${host_package_use}"
    if grep -qF -- "dev-lang/rust rust-src" "${host_package_use}" ; then
        echo -en " (${BGon}found${Boff}))"
    else
        echo -en " (${BRon}not found${Boff}))"
        echo -e "\ndev-lang/rust rust-src" >> "${host_package_use}" || die "failed to append rust-src use flag"
        export RUST_LLVM_CHANGE_FLAG=$TRUE
    fi
    right_status $TRUE

    # verify that USE flag "dev-lang/rust-bin rust-src" is in CHOST's package.use
    message_n "looking for \"dev-lang/rust-bin rust-src\" in ${host_package_use}"
    if grep -qF -- "dev-lang/rust-bin rust-src" "${host_package_use}" ; then
        echo -en " (${BGon}found${Boff}))"
    else
        echo -en " (${BRon}not found${Boff}))"
        echo -e "\ndev-lang/rust-bin rust-src" >> "${host_package_use}" || die "failed to append rust-src use flag"
        export RUST_LLVM_CHANGE_FLAG=$TRUE
    fi
    right_status $TRUE

    # verify or correct LLVM_TARGETS in CHOST's make.conf
    # not sure this is really necessary -- all targets may be unconditionally enabled in llvm-core/llvm(?)
    # Gentoo forum administrator Hu noted on Fri Sep 16, 2022 -- news regarding adjustment of profiles' package.use.force --
        # Michał Górny <mgorny@gentoo.org> (2021-11-04)
        # Enable all LLVM targets unconditionally.  Unfortunately, disabling
        # targets tend to break reverse dependencies (e.g. Rust) and we are yet
        # to find a clean way of resolving that.  Compared to the damage
        # potential, the increase of build time is a minor problem.  Users who
        # really insist of building a smaller system can un-force the flags
        # at their own responsibility.
    # see more in footnote at the bottom of this file
    # anyway, do this for now
    # if make.conf doesn't contain LLVM_TARGETS, then add them
    host_make_conf="/etc/portage/make.conf"
    message "examining LLVM_TARGETS in ${host_make_conf}"
    message_n "looking for ${LLVM_TARGET}"
    if grep -qF "LLVM_TARGETS=" "${host_make_conf}" ; then
        # make.conf contains an assigment for LLVM_TARGETS - is this board's target in it?
        source "${host_make_conf}"  # activate the current assignemt so we can check it
        if [[ "${LLVM_TARGETS}" == *"${LLVM_TARGET}"* ]] ; then
            # our target is already included
            echo -en " (${BGon}found${Boff})"
        else
            echo -en " (${BRon}not found${Boff})"
            echo -e "\nLLVM_TARGETS=\"AArch64 AMDGPU ARM AVR BPF Hexagon Lanai LoongArch MSP430 Mips NVPTX PowerPC RISCV Sparc SystemZ VE WebAssembly X86 XCore SPIRV\"" >> "${host_make_conf}" && \
                echo -en "(${BGon}appended${Boff})" || die "failed to append LLVM_TARGETS to CHOSTs make.conf"
            export RUST_LLVM_CHANGE_FLAG=$TRUE
        fi
    else
        # make.conf does not contain an assignment for LLVM_TARGETS -- append one
        echo -en " (${BRon}not found${Boff})"
        echo -e "\nLLVM_TARGETS=\"AArch64 AMDGPU ARM AVR BPF Hexagon Lanai LoongArch MSP430 Mips NVPTX PowerPC RISCV Sparc SystemZ VE WebAssembly X86 XCore SPIRV\"" >> "${host_make_conf}" && \
            echo -en "(${BGon}appended${Boff})" || die "failed to append LLVM_TARGETS to CHOSTs make.conf"
        export RUST_LLVM_CHANGE_FLAG=$TRUE
    fi
    right_status $TRUE

    # now set up cross-rust in CHOSTs crossdev repo

    VALID_LINK=$FALSE
    message "creating rust-std link in crossdev repo (to CHOSTs rust-std ebuilds) ..."
    old_dir="$(pwd)"
    cd /var/db/repos/crossdev/cross-${TARGET} && \
    message "now working in crossdev repo: [${Mon}$(pwd)${Boff}]"
    message_n "looking for link"
    if [ -L rust-std ] ; then
        echo -en " (found, "
        # link forund - right target?
        target_path=$(readlink -f rust-std)
#        olv_verbosity=$verbosity ; verbosity=5
#        d_message "target_path: [${target_path}]" 4
#        verbosity=$old_verbosity
        if [[ "${target_path}" == "/var/db/repos/gentoo/sys-devel/rust-std" ]] ; then
            # link points to correct target
            echo -en "${BGon}valid${Boff})"
            VALID_LINK=$TRUE
        else
            # link does not point to correct target -- remove it
            echo -en "${BRon}invalid${Boff})"
            rm rust-std && echo -en "(removed)" || die "failed to remove invalid rust-std link"
        fi
    else
        echo -en " (not found)"
        # no link found
    fi
    if [ ! $VALID_LINK ] ; then
        # valid link does not yet exist or invalid one was removed -- create it
        ln -s /var/db/repos/gentoo/sys-devel/rust-std && \
            echo -en "(${BGon}created${Boff})" || die "failed to create link for rust-std"
    fi
    # if we got here (didn't die above) close action as OK
    right_status $TRUE
    echo
    cd $old_dir
    message "now working in previous directory: [${Mon}$(pwd)${Boff}]"

    # now unmask rust-std in CHOSTs package.accept_keywords
    message_n "unmasking rust-std in CHOSTs package.accept_keywords ..."
    echo "cross-${TARGET}/rust-std **" >> /etc/portage/package.accept_keywords/cross-target-rust-std && \
        right_status $? || die "failed to unmasking rust-std in CHOSTs package.accept_keywords"

    # now validate or create /etc/portage/env/dev-lang/rust per-package env setting
    # (should be installed by this package's ebuild)
    message_n "examining /etc/portage/env/dev-lang/rust"
    if [ -e /etc/portage/env/dev-lang/rust ] ; then
        echo -en " (${BGon}found${Boff})"
    else
        # not found - create
        echo -en " (${BRon}not found${Boff})"
        CONTENT="RUST_CROSS_TARGETS=(\n"
        CONTENT+=" \"ARM:arm-unknown-linux-gnueabihf:armv6j-unknown-linux-gnueabihf\"\n"
        CONTENT+=" \"ARM:armv7-unknown-linux-gnueabihf:armv7a-unknown-linux-gnueabihf\"\n"
        CONTENT+=" \"AArch64:aarch64-unknown-linux-gnu:aarch64-unknown-linux-gnu\"\n"
        CONTENT+=" )"
        echo -e "${CONTENT}" > /etc/portage/env/dev-lang/rust && \
            echo -en "(${BGon}created${Boff})" || die "failed to create /etc/portage/env/dev-lang/rust"
        export RUST_LLVM_CHANGE_FLAG=$TRUE
    fi
    right_status $TRUE
    return 0
}

buildtarget-qemu() {
    # this used to be a separate script cb-buildtarget-qemu
    old_dir="$(pwd)"
    cd /usr/${TARGET}
    message "now working in crossbuild target directory: [${Mon}$(pwd)${Boff}]"

    [[ $INTERACTIVE ]] && emerge_options="-av1" || emerge_options="-v1"

    message "building qemu for ${TARGET} ..."
    FEATURES="-getbinpkg" QEMU_USER_TARGETS="${QEMU_ARCH}" QEMU_SOFTMMU_TARGETS="${QEMU_ARCH}" \
        USE="static-user -plugins static-libs" emerge ${emerge_options} --buildpkg qemu || \
            die "failed to build qemu for ${TARGET}"
    right_status $TRUE

    message "installing qemu binary in ${TARGET} ..."
    ROOT=/usr/${TARGET}/ emerge ${emerge_options} --usepkgonly --nodeps qemu || \
        die "failed to build (install) qemu binary in ${TARGET}" \
    right_status $TRUE

    # cross-rust setup has been relocated to step 16 in cb-mkenv

    echo
    cd $old_dir
    message "now working in previous directory: [${Mon}$(pwd)${Boff}]"
    return 0
}

run-dispatch-conf() {
    # run dispatch-conf to activate newly installed configs
    ROOT="/usr/${TARGET}/" dispatch-conf
    return $?
}

edit-make-conf() {
    # use system editor to edit config file
    ${EDITOR} /usr/${TARGET}/etc/portage/make.conf
    return $?
}

edit-package-use-platform() {
    # use system editor to edit config file (it's numbered, so use find to id it)
    configfile=$(find /usr/${TARGET}/etc/portage/package.use/ -iname "*joetoo_${BOARD}")
    ${EDITOR} ${configfile}
    return $?
}

edit-package-use-common() {
    # use system editor to edit config file (it's numbered, so use find to id it)
    configfile=$(find /usr/${TARGET}/etc/portage/package.use/ -iname "*joetoo_common")
    ${EDITOR} ${configfile}
    return $?
}

edit-package-accept-keywords() {
    # use system editor to edit config file (it's numbered, so use find to id it)
    configfile=$(find /usr/${TARGET}/etc/portage/package.accept_keywords/ -iname "*joetoo")
    ${EDITOR} ${configfile}
    return $?
}

symlink-repos() {
    # for a simple crossbuild environment, we can just use the CHOST's repos
    # (we don't need to take up extra storage with what would be redundant
    #  data if our use case is simple crossbuilding or binhosting)
    # we could alternatively mount the host's repositories on empty target repo-named directories,
    # (that is what cb-chroot-target has to do), but we only link for now
    # because it is a simpler "lighter" approach to sharing the host's repos
    # for cross-building only (not for chroot)
    for x in gentoo joetoo; do
        VALID_LINK=$FALSE
        # check them first
        repo=/usr/${TARGET}/var/db/repos/${x}
	message_n "checking repo ${repo}"
        if [ -e ${repo} ] ; then
            # ${repo} already exists - is it a link or a directory?
            if [ -L ${repo} ] ; then
                # ${repo} is a link path - is it valid?
                echo -en " (${BGon}link${Boff}"
                target_path=$(readlink -f "$repo")
                if [[ "${target_path}" == "/var/db/repos/${x}" ]] ; then
                    echo -en " ${BGon}validated${Boff})"
                    right_status $TRUE
                    VALID_LINK=$TRUE
                else
                    echo -en " ${BRon}invalid${Boff})"
                    right_status 1
                fi
            elif [ -d ${repo} ] ; then
                # ${repo} (not a link), but is a directory - is it empty? (maybe relevant)
                echo -en " (${BRon}dir${Boff}"
                if [ -z "$(ls -A ${repo})" ] ; then
                    # empty
                    echo -en " empty)"
                    right_status 1
                else
                    # not empty
                    echo -en " ${BMon}not${Boff} empty)"
                    right_status 1
                    # die here so we don't have to use rm -r to remove blindly below
                    # what might be an invalid link pointing to something important
                    die "repo $x is a non-empty directory; please resolve this before resuming ${PN}"
                fi
            else
                # ${repo} exists but is neither link nor directory, so it is invalid
                echo -en " (exists; ${BRon}not link/dir: invalid${Boff})"
                right_status 1
            fi
            # if not valid, ask if user wants to remove the existing dir/link
            if [ ! $VALID_LINK ] ; then
                MSG="${BYon}Do you want to remove the invalid link/dir?${Boff}\n"
                MSG+="( y: yes, remove it; n|s: no, exit program )"
                new_prompt "${MSG}"
                if [[ "${response}" == [yY] ]] ;then
                    message_n "removing existing ${repo} ..."
                    # use %/ and don't use -r here to avoid removing
                    # important data from a non-empty directory, or
                    # what might be an invalid link pointing to something important
                    rm -r ${repo%/} 2>/dev/null && right_status $? || die "failed to remove existing repo"
                else
                    die "not removing existing repo; exiting as instructed"
                fi
            fi
        else
            # repo does not exist
            echo -en " (does not exist)"
            right_status $TRUE
        fi
        # if we got here, repo is either already valid or does not (or no longer) exist(s)
        # create the link for it if not already valid
        if [ ! $VALID_LINK ] ; then
            message_n "creating symlink for /var/db/repos/${x}"
            ln -s /var/db/repos/${x} /usr/${TARGET}/var/db/repos/${x} && \
                right_status $? || die "failed to create $x repo"
        fi
    done
    return 0
}

quickpkg-toolchain() {
    # build binary packages for each of the cross-toolchain programs (used to be separate script cb-quickpkg-toolchain

    toolchain=(
    'gcc'
    'glibc'
    'binutils'
    'linux-headers'
    )

    FLAGGED=$FALSE
    for tool in ${toolchain[@]}; do
        message "  building (quickpkg) binary package for ${LBon}cross-${TARGET}/${tool}${Boff}"
        quickpkg --include-unmodified-config=y cross-${TARGET}/${tool} && right_status $? \
        || ( right_status $? && FLAGGED=$TRUE )
    done
    [ $FLAGGED ] && die "failed binary package build; note red flags above"
    return 0
}

get-max-profile-number() {
    BOARD=$1
    validate_target ${BOARD} # set TARGET, TARGET_ARCH just in case not already set
    cmd="ARCH=${TARGET_ARCH}"
    cmd+=" PORTAGE_CONFIGROOT=/usr/${TARGET}/"
    cmd+=" eselect profile list |"
    cmd+=" grep '\[[0-9]\+\]' |"
    cmd+=" awk '{print \$1}' |"
    cmd+=" sed 's/\[//' |"
    cmd+=" sed 's/\]//' |"
    cmd+=" sort -n |"
    cmd+=" tail -n 1"
    result=$(eval ${cmd})
    echo $result
    return $result
}

profile_number_prompt()  {
    ps=$1; echo; echo; CUU; SCP;
    get-max-profile-number ${BOARD} >/dev/null ; max_num=$?
    message_n "$ps [0-${max_num}]: " && read profile_number;
    isnumber $profile_number ; result=$?
    while [ $result -ne 0 ] || [ $profile_number -lt 0 ] || [ $profile_number -gt ${max_num} ] ; do
        RCP; echo -en "$( repeat ' ' $( termwidth ) )"; RCP;
        message_n "$ps [0-${max_num}]: " && read profile_number;
        isnumber $profile_number ; result=$? ; done
}

eselect-profile() {
    message "setting profile ..."
    ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile set ${default_profile}
    ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list | grep '\*'
    d_message "INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}" 3
    if [[ $INTERACTIVE ]] ; then
        message "${BMon}Note: carefully examine your selected profile ${BYon}(e.g. merged vs split-usr)${Boff}"
        msg="${BYon}Would you like to select a different profile?\n"
        msg+="${BWon}( y: yes select new | s: no; continue with default | n: no; exit )${Boff}"
        response="" ; new_prompt "${msg}"
    else
        response="s"  # keep default profile and continue
    fi
    case ${response:0:1} in
        [yY] )
            message "${BMon}Available profiles --${Boff}"
            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list
            profile_number_prompt "${BYon}Select profile: ${Boff}"
            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile set ${profile_number}
            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list
            ;;
        [nN] ) E_message "exiting as instructed"; return 0;;
        [sS] ) E_message "skipping; profile remains ${profile_number}" ;;
        * ) E_message "invalid response [ ${response} ]"; exit 1 ;;
    esac
    return 0
}

create-new-cross-compiler() {
    message "creating new crossdev cross compiler. Done after stage3 extraction"
    message "because crossdev may produce split-usr layout, and I prefer the"
    message "merged-usr layout that modern stage3 provides ..."
    echo
    FLAGGED=$FALSE
    for x in profiles metadata; do
        target_dir="/var/db/repos/crossdev/${x}"
        message_n "validating ${target_dir} ..."
        if [ ! -d ${target_dir} ] ; then
            echo -en " (${BYon}creating${Boff})"
            mkdir -p ${target_dir} && right_status $? || ( right_status $? && FLAGGED=$TRUE )
        else
            echo -en " (${BGon}valid${Boff})"
            right_status $TRUE
        fi
    done

    # validate or populate /var/db/repos/crossdev/metadata/layout.conf
    message_n "validating /var/db/repos/crossdev/metadata/layout.conf ..."
    if [ ! -f /var/db/repos/crossdev/metadata/layout.conf ] || \
       [ -z "$(grep 'masters = gentoo' /var/db/repos/crossdev/metadata/layout.conf 2>/dev/null)" ] ; then
        echo -en " ${BYon}(populating)${Boff} ..."
        echo 'masters = gentoo' > /var/db/repos/crossdev/metadata/layout.conf && \
        right_status $? || ( right_status $? && FLAGGED=$TRUE )
    else
        echo -en " (${BGon}valid${Boff})"
        right_status $TRUE
    fi

    # validate or populate /var/db/repos/crossdev/profiles/repo_name
    message_n "validating /var/db/repos/crossdev/profiles/repo_name ..."
    if [ ! -f /var/db/repos/crossdev/profiles/repo_name ] || \
       [ -z "$(grep 'crossdev' /var/db/repos/crossdev/profiles/repo_name)" ] ; then
        echo -en " ${BYon}(populating)${Boff} ..."
        echo 'crossdev' > /var/db/repos/crossdev/profiles/repo_name && \
        right_status $? || ( right_status $? && FLAGGED=$TRUE )
    else
        echo -en " (${BGon}valid${Boff})"
        right_status $TRUE
    fi

    # set permissions
    message_n "setting permission for portage on /var/db/repos/crossdev ..."
    chown -R portage:portage /var/db/repos/crossdev && \
    right_status $? || ( right_status $? && FLAGGED=$TRUE )

    # now actually build the new cross-compiler
    message "building new cross-compiler ..."
    crossdev -S -t ${TARGET} && \
    right_status $? || ( right_status $? && FLAGGED=$TRUE )
    if [[ $FLAGGED ]] ; then
        E_message "failed clean exit; note red flags above" ; return 1
    else
        message "cross-compiler creation complete" ; return 0
    fi
}

untar-stage3() {
    message_n "extracting stage3 from tar.xz archive ..."
    tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner -C /usr/${TARGET}/
    result=$? ; right_status $result ; return $result
}

verify-stage3-hashes() {
    selector='SHA512'
    SHA512_DIGEST=$(grep -A1 ${selector} $(basename ${href}).DIGESTS | \
                  grep -v "CONTENTS\|${selector}\|--" | awk '{print $1}')
    SHA512_HASH="$(openssl dgst -r -sha512 stage3-*.tar.xz | awk '{print $1}')"

    selector='BLAKE2B'
    BLAKE2B_DIGEST=$(grep -A1 ${selector} $(basename ${href}).DIGESTS | \
                  grep -v "CONTENTS\|${selector}\|--" | awk '{print $1}')
    BLAKE2B_HASH="$(openssl dgst -r -blake2b512 stage3-*.tar.xz | awk '{print $1}')"
    d_message "SHA512_DIGEST..: ${SHA512_DIGEST}" 3
    d_message "SHA512_HASH....: ${SHA512_HASH}" 3
    d_message "BLAKE2B_DIGEST.: ${BLAKE2B_DIGEST}" 3
    d_message "BLAKE2B_HASH...: ${BLAKE2B_HASH}" 3

    if [[ "${SHA512_DIGEST}" != "${SHA512_HASH}" ]] ; then
        E_message "openssl sha512 hash has does not match digest"
        return 1
    elif [[ "${BLAKE2B_DIGEST}" != "${BLAKE2B_HASH}" ]] ; then
        E_message "openssl blake2b512 hash has does not match digest"
        return 1
    else
        message_n "openssl sha512 and blake2b512 hashes both ${BGon}match${Boff} digest"
        right_status $TRUE
    fi
    return 0
}

wget-stage3() {
    old_dir="$(pwd)"
    message_n "moving from ${old_dir} to /usr/${TARGET} ..."
    cd /usr/${TARGET} ; right_status $?
    message "now getting stage3 in target sysroot directory: [${Mon}$(pwd)${Boff}] ..."
#    eval "$(grep ${STAGE3_SELECTOR} <<< $(curl -s https://www.gentoo.org/downloads/#arm) | awk '{print $2}')" && \
    eval "$(grep ${STAGE3_SELECTOR} <<< $(curl -s https://www.gentoo.org/downloads/#${TARGET_ARCH}) | awk '{print $2}')"
    wget ${href} && wget ${href}.DIGESTS
    return $?
}

#-----[ main script ]---------------------------------------------
checkroot
separator ${PN} $(hostname)
# option s (status) is the only one that can appear alone on the command line
# - otherwise it should be at least 2: -b <BOARD>
arglist="$@"
[ $# -eq 0 ] && E_message "null command line arguments" && usage
[ $# -eq 1 ] && [[ "$1" != "-"*"s"* ]] && [[ "$1" != "--status" ]] && E_message "invalid argument(s) [$arglist]" && usage
[ $# -lt 2 ] && E_message "invalid argument(s) [$arglist]" && usage

# basic common approach - 
# initialize variables (local function)
# validate_status_file  (script_header_joetoo_extended)
# process_cmdline (script_header_joetoo_extended)
# validate_target which must follow process_cmdline (cb-common-functions)
# display_configuration so we can see what's what if insane (script_header_joetoo_extended)
# sanity_check (cb-common-functions)
# run_sequence (script_header_joetoo_extended)

# initialize variables and set default values
initialize_variables || die "Failed to initialize_variables"

validate_status_file ${mkenvstatusfile} || die "Failed to validate_status_file"

d_echo "cmdline: $*" 5
d_echo "processing cmdline args: $@" 5

# over-ride configuration with commandline input
separator ${PN} "(process_cmdline)"
process_cmdline ${@} || usage

validate_target ${BOARD} || usage
display_configuration || die "Failed to display_configuration"

sanity_check  || die "Failed sanity_check"
run_sequence ${mkenvstatusfile} || die "Failed to run_sequence"

echo
cd $old_dir
d_message "now working in previous directory: [${Mon}$(pwd)${Boff}]" 1
exit 0

# Footnotes regarding LLVM_TARGETS --
    # as of 7/18/2025, this is the content of /var/db/repos/gentoo/profiles/base/package.use.force
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_AArch64 llvm_targets_AMDGPU               <=== NOTE AArch64
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_ARM llvm_targets_AVR llvm_targets_BPF     <=== NOTE ARM
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_Hexagon llvm_targets_Lanai
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_MSP430 llvm_targets_Mips
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_NVPTX llvm_targets_PowerPC
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_RISCV llvm_targets_Sparc
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_SystemZ llvm_targets_WebAssembly
    #    >=llvm-core/clang-13.0.1_rc llvm_targets_X86 llvm_targets_XCore                    <=== NOTE X86
    #    >=llvm-core/clang-14 llvm_targets_VE
    #    >=llvm-core/clang-16 llvm_targets_LoongArch
    #    >=llvm-core/clang-20 llvm_targets_SPIRV
    #
    # as of 7/18/2025, this is the content of /var/db/repos/gentoo/profiles/arch/amd64/package.use.force
    #    dev-lang/rust llvm_targets_X86
    #    dev-ml/llvm llvm_targets_X86
    #    llvm-core/clang llvm_targets_X86
    #    llvm-core/llvm llvm_targets_X86
    # as of 7/18/2025, this is the content of /var/db/repos/gentoo/profiles/arch/arm64/package.use.force
    #    dev-lang/rust llvm_targets_AArch64
    #    dev-ml/llvm llvm_targets_AArch64
    #    llvm-core/clang llvm_targets_AArch64
    #    llvm-core/llvm llvm_targets_AArch64
    #
    # as of 7/18/2025, this is the content of /var/db/repos/gentoo/profiles/arch/arm/package.use.force
    #    dev-lang/rust llvm_targets_ARM
    #    dev-ml/llvm llvm_targets_ARM
    #    llvm-core/clang llvm_targets_ARM
    #    llvm-core/llvm llvm_targets_ARM

