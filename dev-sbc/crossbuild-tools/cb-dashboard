#!/bin/bash
#
# cb-dashboard   (c) joe.brendler  2025-2072
# mount a crossbuild image file on its associated TARGET
#

source /usr/sbin/script_header_joetoo
VERBOSE=$TRUE
verbosity=2

d_message_n "sourcing BUILD ..." 3
source /etc/crossbuild-tools/BUILD ; d_right_status $? 3
d_message_n "sourcing BPN ..." 3
source /etc/crossbuild-tools/BPN ; d_right_status $? 3
source /usr/sbin/script_header_joetoo_extended


PN=$(basename $0)

# specify cross-build targets to look for
TARGETS="aarch64-unknown-linux-gnu\|armv7a-unknown-linux-gnueabihf\|armv6j-unknown-linux-gnueabihf"

d_message_n "sourcing cb-common-functions ..." 3
source /usr/sbin/cb-common-functions ; d_right_status $? 3

usage() {
    E_message "${BRon}usage: ${BGon}${PN}${Boff}"
    echo -e "${BMon} * ${Boff}(no arguments)"
    smaller_script_common_usage_message
    exit
}

show-dashboard() {
    echo
    # crossbuild stuff first (selected by '/usr/')
    # for each active loopdevice, show backing file and mounts
    separator ${PN} "(active crossbuild loop devices)"
    show-loopdev-backfile-and-mounts "/usr/"

    # now display anything else mounted on one of our TARGETs (e.g. proc, dev, sys for chroot...)
    show-other_crossbuild-mounts

    # now display anything mounted on /mnt/gentoo (possible outputdevice)
    show-mounts "/mnt/gentoo"

    # now show any other mounts on /dev/sd devices
    show-mounts "/dev/sd"

    # display status of repositories in various /usr/${TARGET} directories
    show-target-repositories-status

    echo
    # now do binhosts (selected by 'stockpile')
    separator ${PN} "(active binhost loop devices)"
    show-loopdev-backfile-and-mounts "stockpile"
}

show-other_crossbuild-mounts() {
    # display anything mounted on /dev/sd devices (possible outputdevice)
    selector="${TARGETS}"
    separator ${PN} "(other crossbuild mounts)"
    if [ ! -z "$(findmnt -lno SOURCE,TARGET,FSTYPE | grep "${selector}" | sort -h )" ] ; then 
        while read -r findmnt_LINE ; do
            eval $(echo $findmnt_LINE | awk '{print "src="$1"; tgt="$2"; fstype="$3}')
            d_message "src: $src   tgt: $tgt   fstype: $fstype" 5
            echo -e "    ${BYon}${src}${Boff} is mounted at ${LBon}${tgt}${Boff} with fs_type ${BMon}${fstype}${Boff}"
        done <<<$(findmnt -lno SOURCE,TARGET,FSTYPE | grep -v 'loop' | grep "${selector}" | sort -h )
    fi

}

show-mounts() {
    # display anything mounted on /dev/sd devices (possible outputdevice)
    selector="$1"
    separator ${PN} "(${selector} mounts - possible OUTPUTDEVICEs)"
    if [ ! -z "$(findmnt -lno SOURCE,TARGET,FSTYPE | grep "${selector}" | sort -h )" ] ; then 
        while read -r findmnt_LINE ; do
            eval $(echo $findmnt_LINE | awk '{print "src="$1"; tgt="$2"; fstype="$3}')
            d_message "src: $src   tgt: $tgt   fstype: $fstype" 5
            echo -e "    ${BYon}${src}${Boff} is mounted at ${LBon}${tgt}${Boff} with fs_type ${BMon}${fstype}${Boff}"
        done <<<$(findmnt -lno SOURCE,TARGET,FSTYPE | grep "${selector}" | sort -h )
    fi

}

show-gentoo-mounts() {
    # display anything mounted on /mnt/gentoo (possible outputdevice)
    selector="/mnt/gentoo"
    separator ${PN} "(${selector} mounts - possible OUTPUTDEVICEs)"
    if [ ! -z "$(findmnt -lno SOURCE,TARGET,FSTYPE | grep "${selector}" | sort -h )" ] ; then 
        while read -r findmnt_LINE ; do
            eval $(echo $findmnt_LINE | awk '{print "src="$1"; tgt="$2"; fstype="$3}')
            d_message "src: $src   tgt: $tgt   fstype: $fstype" 5
            echo -e "    ${BYon}${src}${Boff} is mounted at ${LBon}${tgt}${Boff} with fs_type ${BMon}${fstype}${Boff}"
        done <<<$(findmnt -lno SOURCE,TARGET,FSTYPE | grep "${selector}" | sort -h )
    fi
}

show-target-repositories-status() {
   # display status of repositories in various /usr/${TARGET} directories
    separator ${PN} "(crossbuild repository status)"
    for TARGET in $(echo $TARGETS | sed 's:\\|: :g'); do
        repo_list="gentoo joetoo"
        for repo in ${repo_list} ; do
            if [ -d /usr/${TARGET}/var/db/repos ] ; then
                repo_path="/usr/${TARGET}/var/db/repos/${repo}"
                if [ -e ${repo_path} ] ; then
                    repo_info=$(file ${repo_path} | cut -d':' -f2)
                    echo -e "    ${LBon}${repo_path}${Boff} is a ${BWon}${repo_info}${Boff}"
                else
                    echo -e "    ${LBon}${repo_path} ${BRon}does not exist${Boff}"
                fi  # full repo path
            fi  # /var/db/repos
        done # repo_list
    done # TARGETS
}

show-loopdev-backfile-and-mounts() {
    [ ! $# -eq 1 ] && E_message "argument null; ${FUNCNAME[0]} requires selector" && exit 1
    selector="$1"
    while read -r loopdev_LINE ; do
        # identify the loop_dev name and its backing_file
        loop_dev="$(echo $loopdev_LINE | cut -d' ' -f1)"
        backing_file="$(echo $loopdev_LINE | cut -d' ' -f2)"
        if [ ! -z "${loop_dev}" ] ; then
            echo -e "    ${BMon}${loop_dev}${Boff} is backed by file: ${BWon}${backing_file}${Boff}"
            # identify this loop_dev's mounts
            while read -r mountpoint_LINE; do
                loop_dev_part="$(echo $mountpoint_LINE | cut -d' ' -f1)"
                mountpoint="$(echo $mountpoint_LINE | cut -d' ' -f2)"
                echo -e "        ${BYon}${loop_dev_part}${Boff} is mounted at ${LBon}${mountpoint}${Boff}"
            done <<<$(findmnt -lo SOURCE,TARGET | grep "${loop_dev}" | sort -h )
        fi
    done <<<$(losetup -lnO NAME,BACK-FILE | grep "${selector}" | sort -h )
}

#-----[ main script ]---------------------------------------------
checkroot
separator "$(hostname)" "${PN}"
[ $# -ne 0 ] && usage

old_dir="$(pwd)"
cd /usr/
message "now working in parent of crossbuild target directory: [${Mon}$(pwd)${Boff}]"

show-dashboard || die "failed to show-dashboard"

echo
cd $old_dir
message "now working in previous directory: [${Mon}$(pwd)${Boff}]"
exit 0
