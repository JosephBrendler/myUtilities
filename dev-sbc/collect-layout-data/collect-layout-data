#!/bin/bash
source /usr/sbin/script_header_joetoo
source /usr/sbin/script_header_joetoo_extended
PN=$(basename $0)

varlist="root_dev root_dev_type root_dev_disk root_dev_part bool.LUKS root_dev_crypt BREAK user collection_directory build_host BOARD DEVICE DEVTYPE ENC"

#-----[ functions ]-----------------------------------------------------------------------

usage() {
    echo
    E_message "usage: ${PN} <BOARD>"
    echo
    message "${BYon}where BOARD is one of these --${Boff}"
    joetoo-sbc-list | sed 's|^|    |'
    echo
    exit 1
}

initialize-variables() {
    # null-initialize variables
    initialize_vars ${varlist}

    # (re)set default values
    PN=$(basename $0)
    user=joe
    collection_directory="/home/${user}/collect-layout-data"
    build_host="gmki91:/home/${user}/"
    VERBOSE=$TRUE
    verbosity=2
    BOARD=${myBOARD}
}

collect_root_dev_data() {
    # identify the device that is mounted at root /
    root_dev=$(findmnt -lno SOURCE /) || die "failed to set root_dev"

    # determine the type of this device (disk, part, crypt, lvm ...)
    eval $(lsblk -P -o NAME,TYPE,MOUNTPOINTS $root_dev) && root_dev_type=$TYPE || die "failed to set root_dev_type"

    # determine the disk that this device is part of (sda, mmcblk0, nvme0n1 ...)
    # (this is what we will collect layout data from)
    root_dev_disk=$(lsblk -lso NAME,TYPE $root_dev | awk '$2 == "disk"' | awk '{print $1}')  || die "failed to set root_dev_disk"

    # determine the partition name of root_dev (will be the same as root_dev if root_dev_type = part)
    root_dev_part=$(lsblk -lso NAME,TYPE $root_dev | awk '$2 == "part"' | awk '{print $1}') || die "failed to set root_dev_part"
    # determine if root_dev_part is formatted for LUKS encryption
    LUKS=$FALSE; [[ $(blkid  /dev/$root_dev_part | grep -i luks) ]] && LUKS=$TRUE

    # if LUKS, determine the name of the encrypted LUKS container
    if [ $LUKS ] ; then
        root_dev_crypt=$(lsblk -lso NAME,TYPE $root_dev | awk '$2 == "crypt"' | awk '{print $1}') || die "failed to set root_dev_crypt"
    else
        root_dev_crypt="N/A" || die "failed to set root_dev_type to N/A"
    fi

    # set DEVICE
    DEVICE="/dev/${root_dev_disk}"

    # set ENC
    if [ $LUKS ] ; then
        ENC="luks" || die "failed to set ENC = luks"
    else
        ENC="plain" || die "failed to set ENC = plain"
    fi

    # set DEVTYPE
    medium=${DEVICE:5:3}
    case $medium in
        "sd"[a-zA-Z] ) DEVTYPE="usb" ;;
        "mmc"        ) DEVTYPE="mmc" ;;
        "nvm"        ) DEVTYPE="nvme" ;;
        *            ) die "invalid medium [$medium]" ;;
    esac || die "failed to set DEVTYPE for medim [${medium}]"

    d_echo "" 3
    d_message "root_dev: ${root_dev}" 3
    d_message "root_dev_type: ${root_dev_type}" 3
    d_message "root_dev_disk: ${root_dev_disk}" 3
    d_message "root_dev_part: ${root_dev_part}" 3
    d_message "root_dev_crypt: ${root_dev_crypt}" 3
    d_message "DEVICE: ${DEVICE}" 3
    d_message "medium: ${medium}" 3
    d_message "DEVTYPE: ${DEVTYPE}" 3
    d_echo "" 3

    return 0
}

display-config() {
    longest=$(get_longest ${varlist})
    display_configuration ${longest} ${varlist}
    echo
    return 0
}

validate_collection_directory() {
    if [ -d ${collection_directory} ] ; then
         echo -en " (${BGon}exists${Boff})"
    else
         echo -en " (${BRon}not found${Boff})"
         mkdir -p ${collection_directory} || die "failed to mkdir -p ${collection_directory}"
         echo -en " (${BGon}created${Boff})"
    fi
    right_status $TRUE
    return 0
}

validate_board() {
    [[ $(joetoo-sbc-list | grep ${BOARD}) ]] && return 0 || return 1
}

#-----[ main script ]-----------------------------------------------------------------------
checkroot
separator $(hostname) ${PN}
[ $# -ne 1 ] && usage
myBOARD="$1"

# initialize and set defaults
initialize-variables || die "failed to initialize-variables"

message_n "validating BOARD [${BOARD}]..."
validate_board || die "failed to validate_target [${BOARD}]"
right_status $?

message_n "validating collection_directory ..."
validate_collection_directory || die "failed to validate_collection_directory"

collect_root_dev_data || die "failed to collect_root_dev_data"

display-config || die "failed to display-config"

message "about to collect sfdisk, blkid, and lsblk data"
confirm_continue_or_exit

message_n "collecting sfdisk data ..."
sfdisk -d ${DEVICE} > ${collection_directory%/}/sfdisk.${BOARD}.${DEVTYPE}.${ENC} || die "failed to collect sfdisk data"
right_status $?

message_n "collecting blkid data ..."
blkid | grep $(echo ${DEVICE} | sed 's|^/dev/||') > ${collection_directory%/}/blkid.${BOARD}.${DEVTYPE}.${ENC} || die "failed to collect blkid data"
right_status $?

message_n "collecting lsblk data ..."
lsblk -l -o NAME,SIZE,TYPE,MOUNTPOINTS ${DEVICE} > ${collection_directory%/}/lsblk.${BOARD}.${DEVTYPE}.${ENC} || die "failed to collect lsblk data"
right_status $?

message_n "changing ownership of collected files ..."
chown -R ${user}:${user} ${collection_directory%/} || die "failed to change ownership"
right_status $?

echo
message "${PN} produced these output files --"
ls -al ${collection_directory%/}/*.${BOARD}.${DEVTYPE}.${ENC} | sed 's|^|    |'

message "about to transfer these files to build_host [${build_host}]"
confirm_continue_or_exit
sudo -u ${user} scp ${collection_directory%/}/*.${BOARD}.${DEVTYPE}.${ENC} "${build_host}" || die "failed to transfer data to build host [${build_host}]"

echo
message "${BWon}${PN} ${BGon}Done${Boff}"
