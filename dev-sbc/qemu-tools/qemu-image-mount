#!/bin/bash
#
# helpful for qemu-system-aarch64 command syntax/options
#   https://manpages.debian.org/jessie/qemu-system-arm/qemu-system-aarch64.1.en.html

PN=$(basename $0)

source /usr/sbin/script_header_joetoo

VERBOSE=$TRUE
verbosity=3

CONFIG=""
command=""

for i in seq 1 9; do mountpoint[$i]=""; done

#-----[ default local variables ]----------------------------------------------
DEFAULT_CMD=mount
IMAGE_DIR=/home/joe/My_bcm2711-rpi-4-b_project/image
KERNEL=kernel8-raspiOS.img
INITRD=initramfs-rpi4b-6.11.1-202410050915
DTB=bcm2711-rpi-4-b.dtb
CPU=cortex-a72
MACHINE=raspi4b
MEM=2G
SMP=4
TARGET=raspi5640x_gpt.img
KEYDEV=keydev.img
ROOT=/dev/mmcblk0p2
KEYBOARD=""
KEYBOARD_ID="046d:c534"
NETWORK="usb-net,netdev=net0 -netdev user,id=net0"
launch_wait=5
PRETEND=$TRUE

CMDLINE="console=tty1 console=ttyAMA0,115200 rw earlyprintk \
  root=${ROOT} rootfstype=ext4 elevator=deadline fsck.repair=yes \
  rootdelay=1 net.ifnames=0"

mountpoint=()

varlist="DEFAULT_CMD CONFIG IMAGE_DIR TARGET KEYDEV ROOT BREAK command BREAK bool.VERBOSE verbosity launch_wait bool.PRETEND"

#-----[ functions ]----------------------------------------------

read_config() {
d_message "running read_config ..." 3
# if a local or /etc/ qemu-tools.conf exists, use it to override the above
[[ -f "/usr/local/sbin/qemu-tools.conf" ]] && CONFIG="/usr/local/sbin/qemu-tools.conf"
[[ -f "./qemu-tools.conf" ]] && CONFIG="./qemu-tools.conf"
[[ -f "/etc/qemu-tools/qemu-tools.conf" ]] && CONFIG="/etc/qemu-tools/qemu-tools.conf"
message_n "sourcing config [ ${CONFIG} ] ..."
source ${CONFIG}; right_status $?

message_n "sourcing BUILD [ $(dirname ${CONFIG})/BUILD ] ..."
source $(dirname ${CONFIG})/BUILD ; right_status $?
}

usage() {
echo
E_message "${BRon}Usage:${Gon} ${PN} [-v|q|m|u|x|p...]${Boff}"
echo -e "  ${BYon}No arguments allowed. Specify configuration -${Boff}"
echo -e "  ${BYon}in confg file /etc/${PN}.conf${Boff}"
echo
echo -e "  ${BYon}options:${Boff}"
echo -e "    -v - increase verbosity (override config)"
echo -e "    -q - decrease verbosity (override config)"
echo -e "    ( e.g. -verbosityvq = increase verbosity by 2 )"
echo -e "    -m - command   (mount vm image)"
echo -e "    -u - command   (un-mount vm image)"
echo -e "    -x - execute (do mount/umount vm image)(default)"
echo -e "    -p - pretend (do NOT mount/umount vm image)(default)"
echo
# sanity check explanations
  [ $# -gt 1 ] && E_message "too many arguments [$#]"
exit
}


display_config()
{
#separator "Configuration" $(hostname)
message "${BYon}Current Configuration --${Boff}"
longest=$(get_longest ${varlist})
display_vars ${longest} ${varlist}
}

process_commandline() {
  arg=$1
  d_message "processing cmdline with arg [ ${arg} ]" 2
  # process argument one character at a time
  while [ ${#arg} -gt 0 ]; do
    opt=${arg:0:1}
    d_message "examining arg opt [ $opt ]" 2
    case $opt in
      "-"  )
        d_message "ignoring dash [${opt}]" 2
        ;;
      [qQ] )
        if [ $verbosity -gt 0 ] ; then
          let verbosity--
          d_message "decreased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at min [ $verbosity ]" 1
        fi
        ;;
      [vV] )
        if [ $verbosity -lt 6 ] ; then
          let verbosity++
          d_message "increased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at max [ $verbosity ]" 1
        fi
        ;;
      [pP] )
        d_message "setting PRETEND TRUE" 1
        PRETEND=$TRUE
        ;;
      [xX] )
        d_message "setting PRETEND FALSE" 1
        PRETEND=$FALSE
        ;;
      [mM] )
        d_message "setting command = mount (PRETEND FALSE)" 1
        command="mount"
        ;;
      [uU] )
        d_message "setting command = umount (PRETEND FALSE)" 1
        command="umount"
        ;;
      *    )
        E_message "invalid option [${opt}] in argument"
        usage $1
        ;;
    esac
    # drop this character and move on
    arg=${arg:1}
  done
}

mount_image() {
  # if a qemu-nbd device is already using /dev/nbd0, then exit(error)
  [[ -b /dev/nbd0p1 ]] && E_message "Error: /dev/nbd0 already busy" && exit 1
  d_message "working case mount command: [ $command ]" 1
  modprobe nbd max_part=8
  sleep 0.1
  d_message "building connect_cmd" 1
  connect_cmd="qemu-nbd --connect /dev/nbd0 -n ${TARGET}"
  type="${TARGET##*.}"
  if [[ "${type}" == "img" ]] ; then
    d_message "assuming ${TARGET} image format is raw ..." 1
    connect_cmd+=" -f raw"
  elif [[ "${type}" == "qcow2" ]] ; then
    d_message "assuming ${TARGET} image format is qcow2 ..." 1
    connect_cmd+=" -f qcow2"
  else
    # format is unknown. qemu will assume raw but warn
    d_message "assuming ${TARGET} image format is unknown ..." 1
    FORMAT="unknown"
  fi

  message_n "running connect_cmd: [ ${connect_cmd} ] ..."
  eval "${connect_cmd}" ; right_status $?
  sleep 0.1

  if [ $verbosity -ge 1 ] ; then
    display_connections
  fi
  # mount root first
  d_message "mounting according to config, root first ..."
  ROOT_MOUNTED=$FALSE
  for ((i=1; i<=${#mountpoint[@]}; i++)); do
    d_message "i: $i   dev: /dev/nbd0p${i}   mountpoint[$i]: /mnt/image/" 3
    if [[ "${mountpoint[$i]}" == "/" ]] ; then
      message_n "mounting dev/nbd0p${i} on /mnt/image/ ..." && \
        eval "mount /dev/nbd0p${i} /mnt/image/" && ROOT_MOUNTED=$TRUE ; right_status $?
    else
      d_message "skipping ${mountpoint[$i]}" 3
    fi
  done
  [ ! $ROOT_MOUNTED ] && E_message "root not mounted; fix configuration" && exit

  # now mount other partitions
  d_message "mounting according to config, now the rest ..."
  for ((i=1; i<=${#mountpoint[@]}; i++)); do
    d_message "i: $i   dev: /dev/nbd0p${i}   mountpoint[$i]: /mnt/image${mountpoint[$i]}" 3
    if [[ "${mountpoint[$i]}" == "/" ]] ; then
      d_message "skipping ${mountpoint[$i]}" 3
    else
      message_n "mounting dev/nbd0p${i} on /mnt/image${mountpoint[$i]} ..." && \
        eval "mount /dev/nbd0p${i} /mnt/image${mountpoint[$i]}" ; right_status $?
    fi
  done
  sleep 0.1
}

umount_image() {
  d_message "working case mount command: [ $command ]" 1
  for x in /dev/nbd0p*; do umount $x; sleep 0.1; done
  qemu-nbd --disconnect /dev/nbd0
  message "Your image has been unmounted:"
  mount | grep "nbd0p"
}

action() {
  old_dir=$(pwd)
  cd ${IMAGE_DIR}
  message "now working in $(pwd)"
  separator "${PN} ${Mon}${command}${Boff}" $(hostname)
  sh_countdown ${launch_wait}

  case ${command} in
    "mount"  )
      mount_image
      ;;
    "umount" )
      umount_image
      ;;
    *        )
        E_message "Invalid command selection [ ${command} ]" && exit
      ;;
  esac

  cd ${old_dir}
  message "now working in $(pwd)"
}

display_mounts() {
  separator "$0 ${Mon}results${Boff}" $(hostname)
  message "here is what is mounted on /dev/nbd devices ..."
  mount | grep '/dev/nbd'
}

display_connections() {
    message "qemu-nbd has connected the following /dev/nbd devices ..."
    ls -al /dev/ | grep -i 'nbd0p*'
}

#-----[ main script ]--------------------------------------------
[ $# -gt 1 ] && usage $@
separator "${PN} - ${Mon}initializing${Boff}" $(hostname)
checkroot
read_config
command="${DEFAULT_CMD}"
process_commandline $@  # to override config
separator "${PN}-$BUILD" $(hostname)
display_config
echo
[ $PRETEND ] && message "(pretending)  To execute, run ${Gon}$0 mx${Boff}\n" || action
display_mounts
display_connections
