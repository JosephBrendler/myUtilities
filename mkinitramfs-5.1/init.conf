# init.conf
#
# configuration file for initramfs init script
#
# Joe Brendler
#   for version history and "credits", read the accompanying file historical_notes

# change defaults to tailor for your environment
#   all configurations must be legitimate variable assignment statements
#   because they are assigned in the init script by simply sourcing this file

# To enable bootup without user intervention at terminal (such as when w/o monitor),
#   identify the device containing the cryptsetup passkey that init will use to unlock
#   the encrypted devices.  Default is no device, and init will prompt for passphrase.
# Devices must be identified by a reliable device name, label, or by UUID (preferred).
# Hint: Using any linux boot disk, you can use "blkid -c /dev/null | grep -i vfat" 
#   (for example) to get the UUIDs or labels of all of your (e.g. vfat) block devices.
# Historical note: In update to ver 4.x, we changed to a *list* of devices that are
#   authorized to be used to unlock the system's encrypted luks-formatted devices.
# Format note: use '\' character to use multiple lines. In the example below, the user
#   identifies the following four authorized devices:
#UUID="ABCD-E285" (xD card)
#UUID="1234-3272" (MS/MSpro card)
#UUID="EFCB-CBA3" (usb thumb drive)
#
# Example:
# init_passdevice_list=" \
# ABCD-E285 \
# 1234-3272 \
# EFCB-CBA3"
init_passdevice_list=" \
407A-3072 \
CARD \
0A6C-5A72 \
ADC6-EA85 \
9BE8-C3EC \
EFC5-C4A3 \
FC75-2C54 \
E81C-D549"

# The init_passdevice's mount point and filesystem must also be specified here 
init_passdevice_mount_point="/mnt/thumb"
init_passdevice_fs="vfat"

# Enable debugging output - like increased verbosity
#init_DEBUG="true"
init_DEBUG="false"

# if an initpassdevice is used, specify the full quoted pathname of the file containing
#   nothing but a single line with the hex key
# Note: if you already have a key with a passphrase you can use hashalot to generate
#   the corresponding key file with the command:
#    hashalot -s "$salt" -x "<hash>"
#   where $salt is the initialization vector avaliable using the command:
#    cryptsetup luksDump <device>
#   Default is null, as above.
#init_keyfile=
init_keyfile="/crypt/dat"

# Starting with version 4.0, the use of mdev to create the required device
# nodes is no longer optional.  However, here you can still specify the time
# in minutes you want init to wait for mdev to identify your init_passdevice
# before giving up and prompting you for a passphrase.
# (this can be any integer greater than or equal to zero)
init_mdev_wait=1

# If you want more time to read the information provided by init during
#   bootup, change this.  This can be helpful in troubleshooting your
#   initial configuration.  This is a multiplyer for the number of seconds 
#   used for the "sleep" commands in the init script; thus specifying
#   init_wait=1 is equivalent to accepting the default wait times, and using
#   init_wait=2 will double the wait time at each programmed pause.
init_wait=1

# Identify the filesystem(s) used by your boot device(s).
# You must identify the root (/) fs, and the /usr fs.
# Note that beginning 1 Nov 2013, with the publication of Notice 
#   "2013-09-27-initramfs-required", Gentoo users were advised that they should
#   ensure that the system's /usr directory would be available at boot time, and that
#   when /usr resides on a separate partition or device, the user must use an
#   initramfs to ensure that /usr would be mounted and available early in booting.
init_root_fs="ext4"
init_usr_fs="ext4"

# Tell init whether to use splash by choosing "yes" or "no"
# Notes:
#  (1) if you want to say "yes", you will need to merge
#    media-gfx/[splash-themes-gentoo|splash-themes-livecd|splash-themes-livedvd]
#  (2) You also need to set the theme in your grub kernel command line
#    example: "kernel /vmlinuz... splash=silent,fadein,theme:emergence ..."
#    Chose theme from: 
#    [ emerge-world | emergence | gentoo | livecd-2007.0 | livecd-12.0 | natural_gentoo ]
#  (2) Due to security issues, this will not work on hardened kernels, and you 
#    should consider saying no here regardless of your kernel sources
#init_splash="yes"
init_splash="no"

# --------------- Additional Security ----------------

# lock_down:
# Note that the purpose of encrypting your drives was to protect them
#   against unauthorized access when your machine is unattended (such as
#   when you inadvertently lose or simply lose custody of a notebook computer),
#   by preventing an unauthorized person from reading the drive if they were
#   to try to boot your machine (or put the drive in their own machine).
# This security is only really achieved if you prevent such an adversary
#   from getting any form of root access -- to include from a "rescue shell"
#   boot option, so you should not provide one in your bootloader, and you
#   should password protect your bootloader and configure it to disallow
#   boot-time editing of its configuration.
# You should strongly consider changing the following option to "yes" once you
#   you've achieved a stable configuration.  A user with physical access will
# Still be able to boot your hardware with a boot-disk or removable-drive, but
#   they will still have to break your luks encryption to compromise your system.
#   Which will be more difficult if you secure your luks passphrase and key device(s).
# Setting this option to "yes" should cause a kernel panic if the user does not
#   have a key device and fails one attempt to provide the luks encryption passphrase
#   or if the user fails to provide the two_factor password, if required.
#init_lock_down="yes"
init_lock_down="no"

# two-factor authentication:
# To further protect your machine against the possibility that someone may
#   "find" (or steal) your key-file (such as if they were to gain access to
#   the usb drive you have stored it on), you may change the following option
#   to "yes" and set an additional password.
# Notes:
#  (1) This information is "hidden" in the compressed archive which is the
#    initramfs, but it is not secure (the boot device is unencrypted).
#  (2) If you say "yes",  the user will be required to enter the below password
#    in order to execute the init script.  Thus, you will need to have a monitor
#    and keyboard connected (not useful on a headless system).
#  (3) !! init_two_factor_password must be single-quoted if the password contains
#    special characters.
init_two_factor_required="no"
#init_two_factor_required="yes"
init_two_factor_password=''
#init_two_factor_password='1234qwer!@#$QWER'
