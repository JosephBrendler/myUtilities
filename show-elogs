#!/bin/bash

# show most recent elogs in /var/log/portage/elog/

# Author: Joe Brendler 23 Jan 2011
#  rev 20 Mar 11 -- added latest & today options
#      01 Oct 12 -- added paged output option
#      17 Aug 14 -- bugfix: tmp_elog_summary constrained to ELOG_DIR
#Define local variables
E_BAD_ARGS=66    # improper command line argument usage exit error
E_BAD_OPT=63     # bad option exit error
BOLDon="\033[1m"
BOLDoff="\033[0m"   # escape sequences - use with "echo -e"
BLUEon="\E[34m"
LBLUEon="\E[36m"
YELLOWon="\E[33m"
GREENon="\E[32m"
REDon="\E[31m"

# set default option flags
LATEST="no"
TODAY="no"

# change if you store elogs elsewhere; must end in /
ELOG_DIR="/var/log/portage/elog/"

# function blocks
useage()
{
   echo -e $GREENon$BOLDon"Useage: show-elog [option]"$BOLDoff
   echo "  Option -h  | --help     display this text"
   echo "         -l  | --latest   display elogs for latest emerge operations only"
   echo "         -t  | --today    display elogs for today's emerge operations only"
   echo "         -p  | --paged    display elogs with paged (less) output"
   echo
   echo "  Note: User will be shown dates of emerge operations for which elog files exist"
   echo "      and be prompted for input.  Response can be any string filter.  Resulting"
   echo "      output will be the names and contents of all matching filenames. Default"
   echo "      is the most recent date found."
   echo
   echo "  Example:"
   echo -e $GREENon$BOLDon"  Enter date ["20110123"]:"$BOLDoff" 2009<enter>"
   echo "      will generate output of names and contents of all files with filename"
   echo '      matching "2009"'
   echo
   echo "  Note: You can use show-elogs in a non-interactive fashion by piping it the"
   echo "      input for its filter prompt.  You can also generate a paged display of"
   echo "      its output by piping it to less.  For example:"
   echo "         # echo 'portage' | show-elogs | less"
   echo "      to generate a paged display of elogs pertaining to the portage package."
}

find_elog_dates ()
{
# display dates for emerge operations for which elog files exist
# options: -v verbose (default) | -q silent
# returns: latest date found in format +%Y%m%d as found in filenames
[ ! "$1" = "-q" ] && echo -e $YELLOWon$BOLDon"Note: elogs exist for emerge operations run on the following dates (oldest first):"$BOLDoff
[ ! "$1" = "-q" ] && echo -en $LBLUEon$BOLDon
j=1
for x in $(ls $ELOG_DIR | cut -d":" -f 3 | cut -d"-" -f 1 | sort -nu); do
   [ ! "$1" = "-q" ] && echo -en "   "$x
   let "rem = $(expr $j % 7)"
   [ $rem -eq  0 ] && [ ! "$1" = "-q" ] && echo
   let "j = $j + 1"
done
[ ! "$1" = "-q" ] && echo -e $BOLDoff
answer="$x"  # returns latest date found for variable assignment
}

#------------------------------------------------------------------------
# start main script

# process command line argument (must be one of the following)
[ ! -z "$1" ] && case $1 in
    "-h" | "--help"    ) useage ; exit 0  ;;
    "-l" | "--latest"  ) LATEST="yes" ;;
    "-t" | "--today"   ) TODAY="yes" ;;
    "-p" | "--paged"   ) PAGED="yes" ;;
    *                  ) useage; exit 1 ;;
esac

answer=""
if [ "$TODAY" = "yes" ]
then
    answer="$(date -u +%Y%m%d)"
elif [ "$LATEST" = "yes" ]
then
    find_elog_dates -q  # quietly sets answer to latest date
else
    # prompt user to select date; default to latest
    find_elog_dates -v  # verbosely lists all elog dates
    echo
    echo -en $GREENon$BOLDon"Enter date ["$answer"]:"
    read reply
    [ ! -z $reply ] && answer=$reply
fi
# create output file and display selected elogs
[ "${ELOG_DIR:(-1)}" == "/" ] || ELOG_DIR="${ELOG_DIR}/"  # add trailing "/" if missing
[ -e "${ELOG_DIR}tmp_elog_summary" ] && rm ${ELOG_DIR}tmp_elog_summary
echo > ${ELOG_DIR}tmp_elog_summary
echo -e $GREENon$BOLDon"*  "$YELLOWon"Found the following elogs for filter: "$REDon$answer >> ${ELOG_DIR}tmp_elog_summary
echo >> ${ELOG_DIR}tmp_elog_summary

for i in $(ls $ELOG_DIR | grep $answer); do

   echo -en $GREENon$BOLDon"* "$YELLOWon ${i%%$answer*}$REDon$answer$YELLOWon${i##*$answer} $BOLDoff >> ${ELOG_DIR}tmp_elog_summary
   echo >> ${ELOG_DIR}tmp_elog_summary
   cat $ELOG_DIR$i >> ${ELOG_DIR}tmp_elog_summary
done

if [ "$PAGED" = "yes" ]
then
   less ${ELOG_DIR}tmp_elog_summary
else
   cat ${ELOG_DIR}tmp_elog_summary
fi

# clean up
[ -e "${ELOG_DIR}tmp_elog_summary" ] && rm ${ELOG_DIR}tmp_elog_summary
exit 0

