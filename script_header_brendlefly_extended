#!/bin/bash
#   script header with basic functions
# Author: brendlefly 26 Jan 2017
#
# NOTE: to use this header, you must first source the basic script_header_brendlefly
#

myBOX()         # draw an esc-seq single-line box w/ u/l corner at row $1, col $2, width $3, height $4
{
  local i
  ULrow=$1; ULcol=$2; WT=$3; HT=$4; myBOX=""
  myBOX=${myBOX}${ESCon}
  myBOX=${myBOX}$(repeat " " ${ULcol})${UL_wall}$(repeat ${H_wall} ${WT})${UR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${V_wall}$(repeat " " ${WT})${V_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${LL_wall}$(repeat ${H_wall} ${WT})${LR_wall}"\n"
  myBOX=${myBOX}${ESCoff}
  CLR; CUP ${ULrow} 1
  printf "${myBOX}"
  return 0
}

my_u_BOX()      # draw a unicode single-line box with u/l corner at row $1, col $2, width $3, height $4
{
  local i
  ULrow=$1; ULcol=$2; WT=$3; HT=$4; myBOX=""
  myBOX=${myBOX}$(repeat " " ${ULcol})${uUL_wall}$(repeat ${uH_wall} ${WT})${uUR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uV_wall}$(repeat " " ${WT})${uV_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uLL_wall}$(repeat ${uH_wall} ${WT})${uLR_wall}"\n"
  CLR; CUP ${ULrow} 1
  printf "${myBOX}"
  return 0
}

my_uD_BOX()     # draw a unicode double-line box with u/l corner at row $1, col $2, width $3, height $4
{
  local i
  ULrow=$1; ULcol=$2; WT=$3; HT=$4; myBOX=""
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_UL_wall}$(repeat ${uD_H_wall} ${WT})${uD_UR_wall}"\n"
  for ((i=1;i<${HT};i++)); do myBOX=${myBOX}$(repeat " " ${ULcol})${uD_V_wall}$(repeat " " ${WT})${uD_V_wall}"\n"; done
  myBOX=${myBOX}$(repeat " " ${ULcol})${uD_LL_wall}$(repeat ${uD_H_wall} ${WT})${uD_LR_wall}"\n"
  CLR; CUP ${ULrow} 1
  printf "${myBOX}"
  return 0
}

vercomp()      # compare two version numbers return [0:equal|1:greaterthan|2:lessthan]
{ if [[ "$1" == "$2" ]]; then return 0; else first=$(echo -en "$1\n$2" | sort -V | head -n1);
  [[ "$first" == "$2" ]] && return 1 || return 2; fi }

show_result()   # show the result of vercomp comparison, in english
{ case $1 in 1) echo "${LBon}>${Boff}";; 2) echo "${BRon}<${Boff}";; 0) echo "${BGon}=${Boff}";; *) echo "${BYon}*** Error ***${Boff}";; esac }

summarize_my_extension()  # list contents of this script header (employ me with "source" or ".")
{
  CLR; myBOX 5 5 70 8
  CUP 6 24; echo -e "${BWon}script_header_brendlefly_extended${Boff}"
  CUP 8 9; echo -e "${BYon}After sourcing ${BGon}script_header_brendlefly${Boff}, ${BWon}this script ${Boff} may be "
  CUP 9 9; echo -e "sourced, in order to extend the former's definition of ${BMon}useful${Boff}"
  CUP 10 9; echo -e "${BMon}functions${Boff} to be subsequently available for use in various"
  CUP 11 9; echo -e "scripts, as described below.\n"
  CUD 5
  grep "()" /usr/local/sbin/script_header_brendlefly_extended | grep -v "grep"; echo
  message_n "${BYon}Compare version number ${BWon}1 ${BYon}to${BWon} 1${Boff}  "
  vercomp 1 1; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}2 ${BYon}to${BWon} 1${Boff}  "
  vercomp 2 1; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}1 ${BYon}to${BWon} 2${Boff}  "
  vercomp 1 2; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}1.2.0 ${BYon}to${BWon} 1.2.1${Boff}  "
  vercomp 1.2.0 1.2.1; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}1.2.0-r1 ${BYon}to${BWon} 1.2.0${Boff}  "
  vercomp 1.2.0-r1 1.2.0; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}1..1 ${BYon}to${BWon} 1.2${Boff}  "
  vercomp 1..1 1.2; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}1.0 ${BYon}to${BWon} 1.0-r10${Boff}  "
  vercomp 1.0 1.0-r10; echo -e "$(show_result $?)"
  message_n "${BYon}Compare version number ${BWon}3.4 ${BYon}to${BWon} 3.4-r2${Boff}  "
  vercomp 3.4 3.4-r2; echo -e "$(show_result $?)"
  echo
  return 0
}
