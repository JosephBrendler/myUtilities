#!/bin/bash
# wget-stage3-amd64   (c) joe brendler 2025-2055
# based on the author's work in the dev-sbc/crossbuild-tools::joetoo package
#

TARGET_ARCH=amd64
# amd64 hardened openrc link looks like this
# https://...amd64/autobuilds/current-stage3-amd64-hardened-openrc/
#STAGE3_SELECTOR=stage3-amd64-openrc-[0-9]
STAGE3_SELECTOR=stage3-amd64-hardened-openrc-[0-9]
newroot_mountpoint="/mnt/gentoo"
#profile_number=48
profile_number=21     # hardened

# This script needs you to provide this header
#   but it should also load a copy in /usr/sbin/ as part of install_files (mkenv)
#   so the finalize-chroot-joetoo script won't need this copy any more
#source /usr/sbin/script_header_joetoo
source ${newroot_mountpoint%/}/script_header_joetoo

#-----[ variables ]------------------------------------------------------------------------------------
INTERACTIVE=$TRUE
VERBOSE=$TRUE
verbosity=3

#mkenv_files="/home/joe/stuff_for_mkenv_Thuvia"
#mkimg_files="/home/joe/stuff_for_mkimg_Thuvia"
mkenv_files="${newroot_mountpoint%/}/joetoobuild-tools/content_for_mkenv_gmki91"
mkimg_files="${newroot_mountpoint%/}/joetoobuild-tools/content_for_mkimg_gmki91"

PN=$(basename $0)

varlist="bool.INTERACTIVE bool.VERBOSE verbosity BREAK TARGET_ARCH STAGE3_SELECTOR newroot_mountpoint profile_number"
varlist+=" mkenv_files mkimg_files"

command_sequence=(
'wget-stage3'
'verify-stage3-hashes'
'untar-stage3'
"install_files_from_source ${mkenv_files}"
"install_files_from_source ${mkimg_files}"
'copy-resolve-conf'
'make-repo-dirs'
'emerge-webrsync'
'eselect-profile'
'prepare-to-finalize-chroot'
'print_next_steps'
)

msg1_sequence=(
'wget stage3'
'verify stage3 hashes'
'untar stage3'
"install ${mkenv_files} files"
"install ${mkimg_files} files"
'copy resolve.conf'
'make repo directories'
'run emerge-webrsync'
'eselect profile'
'prepare to finalize chroot'
'print next steps'
)
#-----[ functions ]------------------------------------------------------------------------------------

display_configuration()  {
    # will pick up PN, BUILD, varlist from the environment of whatever script sources cb>
    separator ${PN} "${FUNCNAME[0]})"
    longest=$(get_longest ${varlist})
    display_vars ${longest} ${varlist}
    return 0
}

print_next_steps() {
    separator ${PN} "${FUNCNAME[0]})"
    message "${BYon}Next Steps should include the following --${Boff}"
    message "${LBon}(1)${Boff} edit .bashrc, make.conf (follow handbook; below at a minimum)"
    message "${LBon}(2)${Boff} chroot [run chroot-prep ; cat chroot-commands (copy/paste)]"
    message "${LBon}(3)${Boff} run finalize-chroot-joetoo script should auto-run on first chroot"
    message "${LBon}(4)${Boff} after script finishes, run chown -R ${user}:${user} /home/${user}"
    message "${LBon}(5)${Boff} if not already complete, emerge @system; emerge @world"
    message "${LBon}(6)${Boff} *** build kernel, initramfs, and update /etc/fstab and bootloader --"
    message "     ${BMon}Hint:${Boff} blkid | grep \${filter} >> /etc/fstab ; nano /etc/fstab"
    message "     bootloader files could include --"
    message "         /boot/cmdline.txt, /boot/config.txt (raspi)"
    message "         /boot/joetooEnv.txt (rockchip)"
    message "         /etc/default/grub (amd64)"
    message "${LBon}(8)${Boff} validate apache ssl, vpn keys, etc. reboot ..."
    echo
    return 0
}

prepare-to-finalize-chroot() {
    separator ${PN} "${FUNCNAME[0]})"
    # install /usr/sbin/finalize-chroot (should have been installed install_files (mkenv) above
    message "validating availability of /usr/sbin/finalize-chroot-joetoo ..."
    if [[ ! -x ${newroot_mountpoint%/}/usr/sbin/finalize-chroot-joetoo ]] ; then
        E_message "executable ${newroot_mountpoint%/}/usr/sbin/finalize-chroot-joetoo not found - please provide"
        return 1
    else
        message "${BGon}Confirmed${Boff}"
    fi
    # mod /root/.bashrc to run /usr/sbin/finalize-chroot if /root/firstlogin exists
    echo "" >> ${newroot_mountpoint%/}/root/.bashrc
    echo "install_my_local_ca_certificates"  >> ${newroot_mountpoint%/}/root/.bashrc
    echo "" >> ${newroot_mountpoint%/}/root/.bashrc
    echo "rerunmsg=\"first-run chroot configuration not requested by presense of marker\"" >> ${newroot_mountpoint%/}/root/.bashrc
    # finalize-chroot-joetoo is in /usr/sbin which should be in PATH
    echo -n "[ -e /root/firstlogin ] && finalize-chroot-joetoo ||"  >> ${newroot_mountpoint%/}/root/.bashrc
    echo " \\"  >> ${newroot_mountpoint%/}/root/.bashrc
    echo 'echo -e "${rerunmsg} /root/firstlogin;\nre-run if needed with /usr/sbin/finalize-chroot-joetoo"'  >> ${newroot_mountpoint%/}/root/.bashrc
    echo "" >> ${newroot_mountpoint%/}/root/.bashrc
    echo "" >> ${newroot_mountpoint%/}/root/.bashrc
    echo "E_message \"edit /root/.bashrc after first boot of real image, to modify prompt, etc.\""  >> ${newroot_mountpoint%/}/root/.bashrc
    echo  "" >> ${newroot_mountpoint%/}/root/.bashrc
    echo "export PS1=\"(chroot) \${PS1}\""  >> ${newroot_mountpoint%/}/root/.bashrc

    # create /root/firstlogin
    message_n "creating firstrunmarker /root/firstlogin"
    echo "true" >> ${newroot_mountpoint%/}/root/firstlogin
    result=$?
    right_status $result
    [ ! $result -eq 0 ] && return 1
    return 0
}

# removed sync-repo in this non-crossbuilding scenario.  Run it in chroot

make-repo-dirs() {
    separator ${PN} "${FUNCNAME[0]})"
    for x in gentoo joetoo crossdev; do
        message_n "examining repo [$x] ..."
        if [ ! -d ${newroot_mountpoint%/}/var/db/repos/$x ] ; then
            echo -en "${BRon} missing${Boff} creating ..."
            mkdir -p ${newroot_mountpoint%/}/var/db/repos/$x
            right_status $?
        else
            echo -en "${BGon} exists${Boff}"
            right_status $TRUE
        fi
    done
    return 0
}

copy-resolve-conf() {
    separator ${PN} "${FUNCNAME[0]})"
    message_n "copying /etc/resolve.conf to newroot_mountpoint ..."
    cp -a /etc/resolv.conf ${newroot_mountpoint}/etc/ ; result=$?
    right_status $result
    return $result
}

install_files_from_source() {
    separator ${PN} "(install_files_from_source)"
    # SOURCE = (in this context) staged data already collected to enable joetoo system image generation for this board
    SOURCE="$1"
    # strip source directory name from each pathname to use relative to destination
    d_message "SOURCE: $SOURCE" 3
    d_message "about to run find ${SOURCE} -type f | sed \"s|${SOURCE}||\"" 3
    for x in $(find ${SOURCE} -type f | sed "s|${SOURCE}||") ; do
        DESTINATION="${newroot_mountpoint%/}/$(dirname ${x})"
        FILE="$(basename ${x})"
        if [ ! -d ${DESTINATION} ] ; then
	    d_echo "" 3
            d_message "TARGET......: ${TARGET}" 3
            d_message "SOURCE......: ${SOURCE}" 3
            d_message "x...........: ${x}" 4
            d_message "dirname x...: $(dirname $x)" 4
            d_message "basename x..: $(basename $x)" 4
            d_message "DESTINATION.: ${DESTINATION}" 3
            d_message "FILE........: ${FILE}" 3
            d_echo "" 3
            message_n "creating destination directory ${DESTINATION} ..."
            mkdir -p ${DESTINATION} && right_status $? || ( right_status $? && exit 1 )
        fi
        message_n "populating ${x} ..."
        cp ${SOURCE}${x} ${DESTINATION}/${FILE} && right_status $? || ( right_status $? && exit 1 )
    done
    return 0
}

new_prompt()        # set external variable $response based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; # '>
while ! expr "${response:0:1}" : [yYnNsS] >/dev/null;  # response not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read response; done; }

profile_number_prompt()  {
    ps=$1; echo; echo; CUU; SCP;
#    get-max-profile-number bcm2709-rpi-2-b >/dev/null ; max_num=$?
    get-max-profile-number ${BOARD} >/dev/null ; max_num=$?
    message_n "$ps [0-${max_num}]: " && read profile_number;
    isnumber $profile_number ; result=$?
    while [ $result -ne 0 ] || [ $profile_number -lt 0 ] || [ $profile_number -gt ${max_num} ] ; do
        RCP; echo -en "$( repeat ' ' $( termwidth ) )"; RCP;
        message_n "$ps [0-${max_num}]: " && read profile_number;
        isnumber $profile_number ; result=$? ; done
}

eselect-profile() {
    separator ${PN} "${FUNCNAME[0]})"
    message "setting default profile ..."
#    ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile set ${profile_number}
#    ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list | grep '\*'
    PORTAGE_CONFIGROOT=${newroot_mountpoint} eselect profile set ${profile_number}
    PORTAGE_CONFIGROOT=${newroot_mountpoint} eselect profile list | grep '\*'
    d_message "INTERACTIVE: $(status_color $INTERACTIVE)$(TrueFalse $INTERACTIVE)${Boff}" 3
    if [[ $INTERACTIVE ]] ; then
        msg="${BYon}Would you like to select a different profile?\n"
        msg+="${BWon}    y: yes select new | s: no; continue with default | n: no; exit${Boff}"
        response="" ; new_prompt "${msg}"
    else
        response="s"  # keep default profile and continue
    fi
    case ${response:0:1} in
        [yY] )
            message "${BMon}Available profiles --${Boff}"
#            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list
            PORTAGE_CONFIGROOT=${newroot_mountpoint} eselect profile list
            profile_number_prompt "${BYon}Select profile: ${Boff}"
#            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile set ${profile_number}
#            ARCH="${TARGET_ARCH}" PORTAGE_CONFIGROOT="/usr/${TARGET}/" eselect profile list
            PORTAGE_CONFIGROOT=${newroot_mountpoint} eselect profile set ${profile_number}
            PORTAGE_CONFIGROOT=${newroot_mountpoint} eselect profile list
            ;;
        [nN] ) E_message "exiting as instructed"; return 0;;
        [sS] ) E_message "skipping; profile remains ${profile_number}" ;;
        * ) E_message "invalid response [ ${response} ]"; exit 1 ;;
    esac
    return 0
}

untar-stage3() {
    separator ${PN} "${FUNCNAME[0]})"
    message_n "extracting stage3 from tar.xz archive ..."
    tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner -C ${newroot_mountpoint}/
    result=$? ; right_status $result ; return $result
}

verify-stage3-hashes() {
    separator ${PN} "${FUNCNAME[0]})"
    selector='SHA512'
    SHA512_DIGEST=$(grep -A1 ${selector} $(basename ${href}).DIGESTS | \
                  grep -v "CONTENTS\|${selector}\|--" | awk '{print $1}')
    SHA512_HASH="$(openssl dgst -r -sha512 stage3-*.tar.xz | awk '{print $1}')"

    selector='BLAKE2B'
    BLAKE2B_DIGEST=$(grep -A1 ${selector} $(basename ${href}).DIGESTS | \
                  grep -v "CONTENTS\|${selector}\|--" | awk '{print $1}')
    BLAKE2B_HASH="$(openssl dgst -r -blake2b512 stage3-*.tar.xz | awk '{print $1}')"
    d_message "SHA512_DIGEST..: ${SHA512_DIGEST}" 3
    d_message "SHA512_HASH....: ${SHA512_HASH}" 3
    d_message "BLAKE2B_DIGEST.: ${BLAKE2B_DIGEST}" 3
    d_message "BLAKE2B_HASH...: ${BLAKE2B_HASH}" 3

    if [[ "${SHA512_DIGEST}" != "${SHA512_HASH}" ]] ; then
        E_message "openssl sha512 hash has does not match digest"
        return 1
    elif [[ "${BLAKE2B_DIGEST}" != "${BLAKE2B_HASH}" ]] ; then
        E_message "openssl blake2b512 hash has does not match digest"
        return 1
    else
        message_n "openssl sha512 and blake2b512 hashes both ${BGon}match${Boff} digest"
        right_status $TRUE
    fi
    return 0
}


wget-stage3() {
    FLAGGED=$FALSE
    separator ${PN} "${FUNCNAME[0]})"
    message "now getting stage3 in newroot_mountpoint: [${Mon}$(pwd)${Boff}] ..."
#    eval "$(grep ${STAGE3_SELECTOR} <<< $(curl -s https://www.gentoo.org/downloads/#${TARGET_ARCH}) | awk '{print $2}')"
    eval "$(curl -s https://www.gentoo.org/downloads/#${TARGET_ARCH} | awk '{print $2}' | grep ${STAGE3_SELECTOR})"
    message_n "running wget ${href} ..."
    wget ${href} ; result=$?
    right_status $result ; [ $result -eq 0 ] || FLAGGED=$TRUE
    message_n "running wget ${href}.DIGESTS ..."
    wget ${href}.DIGESTS ; result=$?
    right_status $result ; [ $result -eq 0 ] || FLAGGED=$TRUE
    return $?
}

run-sequence() {
    for ((i=0; i<${#command_sequence[@]}; i++)); do
        response=""
        msg="${BYon}are you ready to ${msg1_sequence[$i]}?${Boff}"
        new_prompt "${msg}"
        case ${response:0:1} in
            [yY] ) eval "${command_sequence[$i]}" || die "failed to ${msg1_sequence[$i]}" ;;
            [sS] ) message "skipping this step as instructed" ;;
            [nN] ) die "negative response [${response}] from user; quitting" ;;
            * ) die "invalid response in run-sequene"
        esac
    done
    return 0
}

die() {
    msg="${1}"
    E_message "${msg}"
    exit 1
}

#-----[ main script ]------------------------------------------------------------------------------------
checkroot
separator $(hostname) ${PN}
[ $# -ne 0 ] && E_message "no arguments allowed" && exit 1

old_dir="$(pwd)"
message_n "moving from ${old_dir} to newroot_mountpoint: [${newroot_mountpoint}] ..."
cd ${newroot_mountpoint} ; right_status $?

display_configuration || die "failed to display configuration"

run-sequence || "failed to run sequence"

message_n "moving from $(pwd) back to ${old_dir} ..."
cd ${old_dir} ; right_status $?

exit 0
