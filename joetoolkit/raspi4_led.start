#!/bin/bash
# Initialize, blink, and then light my LED on GPIO pin
# requires dev-libs/pigpio::gentoo
arg=""; ip_address=""; class_c=""; resolveconf_file=""; twait=""  VPN_FLAG=""  #initialize null

VPN_LED=3          # raspi gpio pin 3 (VPN LED)(red)
SVCs_LED=2         # raspi gpio pin 2 (Services LED)(green)
twait=10           # s wait between operations
blinkwait=0.05     # s wait during fluttler blink
blinklongwait=0.5  # s wait during blink between flutters

ip_address=$(ifconfig wlan0 | grep inet | sed 's/^[[:space:]]*//' | cut -d' ' -f2)

class_c=$(echo $ip_address | cut -d'.' -f1,2,3)

#-----[ functions ]-----------------------------------
initialize_pigs() {
  pigs m ${VPN_LED} w          # set mode output
  pigs m ${SVCs_LED} w         # set mode output
}

blink_off() {
  pigs w ${VPN_LED} 0
  pigs w ${SVCs_LED} 0
}


blink_light() {
  # blink and then light my LED (on pin designated by arg 1 $1 )
  LED=$1
  for ((i=0;i<5;i++))       # blink on-off 5 times, quickly
  do
    pigs w ${LED} 1
    sleep ${blinkwait}
    pigs w ${LED} 0
    sleep ${blinkwait}
  done
  sleep ${blinklongwait}    # pause
  pigs w ${LED} 1           # now keep LED on
}

#-----[ main ]-----------------------------------
initialize_pigs
blink_off
case ${class_c} in
  "192.168.62"|"192.168.3"|"192.168.7") arg="l";;
  *) arg="r";;
esac

case ${arg} in
  "l") resolveconf_file="/root/bin/resolv.conf.local";;
  "r") resolveconf_file="/root/bin/resolv.conf.remote";;
  *)   resolveconf_file="/root/bin/resolv.conf.good";;
esac

echo "ip address: ${ip_address}"
echo "class c...: ${class_c}"

## preserve the right resolv.conf, check service status
echo -n "will now copy [ ${resolveconf_file} ] to /etc/resolv.conf... "
chattr -i /etc/resolv.conf && \
  cp ${resolveconf_file} /etc/resolv.conf && \
  chattr +i /etc/resolv.conf
[[ $? ]] && echo "[ set resolv.conf ok ]" || echo "[ failure setting resolv.conf !! ]"

## check service; [[ true only if all services are "started" ]], and
##  if success, then blink/light LED
echo -n "Now delay and then check services..."
sleep ${twait} && [[ ! $(rc-status | grep '\[' | grep -v started) ]]
[[ $? ]] && blink_light ${SVCs_LED} && echo "[ Services all ok ]" || echo "[ Services not all ok !! ]"

