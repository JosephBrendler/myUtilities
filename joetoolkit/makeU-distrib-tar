#! /bin/bash
source /usr/local/sbin/script_header_brendlefly

#-----[ local variable declarations ]----------------------------------------
BUILD="0.0.1"
VERBOSE=$TRUE
verbosity=3
## options default to true
CLEAN=$TRUE
KERNEL=$TRUE
MODULES=$TRUE
TAR=$TRUE

old_dir=$PWD
# must be in a linux sources directory to use this script
#[[ "$(basename $old_dir | cut -c1-6)" != "linux-" ]] && \
#    E_message "${BRon}must be in a version-numbered linux sources directory to use this script${Boff}" && exit
#myversion=${old_dir:$(expr index "$old_dir" "-")}
#myversion_number=${myversion:0:$(($(expr index "$myversion" "-")-1))}

myversion=$(file /usr/src/linux | cut -d'-' -f2-)
myversion_number=$(file /usr/src/linux | cut -d'-' -f2)
message "myversion_number = ${myversion_number}"

# create the staging directory if it does not exist
source_dir="/usr/src/linux-${myversion}"
domU_dir="/root/build/domU"
staging_dir="${domU_dir}/tmp/distrib"
[[ ! -d "$staging_dir" ]] && mkdir -pv "$staging_dir"
kernel_staging_dir="$staging_dir/boot"
[[ ! -d $kernel_staging_dir ]] && mkdir -pv "$kernel_staging_dir"
#lib_dir="$staging_dir/lib64"
lib_dir="$staging_dir/lib"
[[ ! -d "$lib_dir" ]] && mkdir -pv "$lib_dir"
#lib_dir_link="$staging_dir/lib"
#[[ ! -L "$lib_dir_link" ]] && ln -sv $lib_dir $lib_dir_link

#-----[ local functions ]-------------------------------------------------------
useage()
{
  local msg="useage: makeU-distrib-tar [-c|k|m|t]\n"
       msg+="  Options toggle OFF: clean, kernel, modules, tar\n"
       msg+="  These default to TRUE, so on the cmdline, they mean FALSE, and\n"
       msg+="   the corresponding part of the process will be skipped"
  E_message "$msg"
  exit 1
}

process_cmdline()
{
### Allow one argument, which may be an option combination, and must start with "-"
#    allowed option = c (clean), k (build kernel), m (build modules)
[[ $# -gt 1 ]] && E_message "Too many arguments" && useage
local options="$1"
local opt_i=""
d_message "Processing cmdline argument [${options}]" 2
[[ $# -eq 1 && "${options:0:1}" != "-" ]] && E_message "cmdline argument must start with \"-\"" && useage
local i=1
while [[ $i -lt ${#options} ]]   ## if there are no args, this should be skipped
do
  opt_i=${options:$i:1}
  d_message "Option $i is [${opt_i}]" 2
  case ${opt_i} in
    "c" ) CLEAN=$FALSE;;
    "k" ) KERNEL=$FALSE;;
    "m" ) MODULES=$FALSE;;
    "t" ) TAR=$FALSE;;
    * ) E_message "Invalid option [$opt_i]"; useage;;
  esac
  let "i+=1"
done
}

display_config()
{
d_message "${LBon}.........myversion=[${BWon}$myversion${LBon}]${Boff}" 1
d_message "${LBon}..myversion_number=[${BWon}$myversion_number${LBon}]${Boff}" 1
d_message "${LBon}........source_dir=[${BWon}$source_dir${LBon}]${Boff}" 1
d_message "${LBon}.......staging_dir=[${BWon}$staging_dir${LBon}]${Boff}" 1
d_message "${LBon}kernel_staging_dir=[${BWon}$kernel_staging_dir${LBon}]${Boff}" 1
d_message "${LBon}...........lib_dir=[${BWon}$lib_dir${LBon}]${Boff}" 1
d_message "${LBon}.............CLEAN=[$(status_color $CLEAN)$(TrueFalse $CLEAN)${LBon}]${Boff}" 1
d_message "${LBon}............KERNEL=[$(status_color $KERNEL)$(TrueFalse $KERNEL)${LBon}]${Boff}" 1
d_message "${LBon}...........MODULES=[$(status_color $MODULES)$(TrueFalse $MODULES)${LBon}]${Boff}" 1
d_message "${LBon}...............TAR=[$(status_color $TAR)$(TrueFalse $TAR)${LBon}]${Boff}" 1
}

clean()
{
  message "${BGon}Entering source_dir${Boff}"
  cd ${source_dir}
  d_message "pwd: $(pwd)" 2

  message "${LBon}Backing up .config at /var/tmp/.config before cleaning...${Boff}"
  if [[ -f ${domU_dir}/.config ]]
  then
    cp -v ${domU_dir}/.config /var/tmp/.config
  elif [[ -f /var/tmp/.config ]]
  then
    message ".config does not exist, substituting pre-existing /var/tmp/.config"
  else
    message ".config does not exist, substituting running config (/proc/config.gz)"
    zcat /proc/config.gz > /var/tmp/.config
  fi
  ## remove regular files from *_staging_dir and everything from lib_dir
  message "${LBon}Cleaning the staging directory...${Boff}"
  for x in $staging_dir $kernel_staging_dir
  do
    [[ -d $x ]] && find $x -maxdepth 1 -type f -iname '*' -delete
  done
  [[ -d $lib_dir ]] && find $lib_dir -mindepth 1 -iname '*' -delete
  # clean the make and staging dirs
  message "${LBon}Cleaning the kernel sources directory...${Boff}"
  make mrproper
  message "${LBon}Cleaning the domU directory...${Boff}"
  make O=${domU_dir} mrproper
  message "${LBon}Copying .config to the domU directory...${Boff}"
  cp -v /var/tmp/.config $domU_dir/
  message "${LBon}Running \"make prepare\" in the domU directory...${Boff}"
  make O=${domU_dir} prepare

  cd $old_dir
}

build_kernel()
{
  message "${BGon}Entering source_dir${Boff}"
  cd ${source_dir}
  d_message "pwd: $(pwd)" 2

  # build the kernel
  # avoid "Error: kernelrelease not valid - run 'make prepare' to update it"
  message "${LBon}Building the kernel...${Boff}"
  make O=${domU_dir}

  # stage kernel
  message "${LBon}Staging the kernel...${Boff}"
  make O=${domU_dir} install INSTALL_PATH="$kernel_staging_dir"

  cd $old_dir
}

build_modules()
{
  message "${BGon}Entering source_dir${Boff}"
  cd ${source_dir}
  d_message "pwd: $(pwd)" 2

  # make and stage modules
  message "${LBon}Building and staging the modules...${Boff}"
  # NOTE: for x86_64, baselayout 2 [no longer] expects lib to be a symlink to lib64
  #    modules now go straight in lib
  make O=${domU_dir} modules_install INSTALL_MOD_PATH="$staging_dir"

  # fix the build symlink
  message "${LBon}Fixing the ${lib_dir}/modules/${myversion}/build symlink...${Boff}"
  link_command="ln -snf /usr/src/linux-${myversion} ${lib_dir}/modules/${myversion}/build"
  eval $link_command

  cd $old_dir
}

make_tar()
{
  message "${BGon}Entering staging_dir${Boff}"
  cd $staging_dir
  d_message "pwd: $(pwd)" 2

  # create staged tar archive
  message "${LBon}Creating the tar archive...${Boff}"

  tar_command="tar \
    --exclude lib/modules/${myversion}/source/ \
    --exclude lib/firmware \
    -cvjf gentoo_pv_kernel_image-${myversion_number}.tar.bz2 \
    boot lib"
  eval $tar_command && \
  message "${BYon}Complete.  Your tarball is located in the ${LBon}${staging_dir}${BYon} directory${Boff}" || \
  E_message "${BRon}Something went wrong -- refer to output above${Boff}"

  cd $old_dir
}

#-----[ main script ]---------------------
checkroot
process_cmdline $@
separator makeU-distrib-tar-$BUILD
echo
display_config
sh_countdown 7

[[ $CLEAN ]] && clean || d_message "Option to clean was de-selected. Continuing..." 1

[[ $KERNEL ]] && build_kernel || d_message "Option to build and stage the kernel was de-selected. Continuing..." 1

[[ $MODULES ]] && build_modules || d_message "Option to build and stage the modules was de-selected. Continuing..." 1

[[ $TAR ]] && make_tar || d_message "Option to make the distributable tarball was de-selected. Continuing..." 1

message "Done.\n"
