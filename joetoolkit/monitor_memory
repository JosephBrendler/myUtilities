#!/bin/bash
#              total        used        free      shared  buff/cache   available
#Mem:           7895         219        6859          14         816        7421
source /usr/local/sbin/script_header_brendlefly
OUTPUT_TO_FILE=$FALSE
VERBOSE=$FALSE
verbosity=0
INTERVAL=30

#---[ function blocks ]----------------------
useage() {  E_message "useage: monitor_memory [-o|--output <output-filename>]"; exit; }

process_arguments() {
  d_message "${BMon}Inside process_arguments with [$@]${boff}"
  # process arguments and set associated flags
  [[ $# -gt 4 ]] && useage
  ERR=$FALSE
  while [[ $# -gt 0 ]]
  do
    d_message "p.a. Arg=[$1]"
    case $1 in
      "-o" | "--output" ) OUTPUT_TO_FILE=$TRUE; outfile="$2"; shift;;
      "-v" | "--verbose" ) VERBOSE=$TRUE; let "verbosity++";;
       *                   ) ERR=$TRUE; useage;;
    esac
    shift
  done
  [[ $ERR ]] && return 1 || return 0
}


#---[ main script ]----------------------
process_arguments $@
d_message "VERBOSE: $(status_color $VERBOSE)$(TrueFalse $VERBOSE)${Boff}" 1
d_message "verbosity: $verbosity" 1
d_message "OUTPUT_TO_FILE: $(status_color $OUTPUT_TO_FILE)$(TrueFalse $OUTPUT_TO_FILE)${Boff}" 1
d_message "outfile: $outfile"

[[ ! $OUTPUT_TO_FILE ]] && CLR && CUP 1 1 && HCU && separator "monitor_memory"
i=0
case $OUTPUT_TO_FILE in
  $FALSE )
    CUP $(($i+3)) 1; echo "#";
    CUP $(($i+3)) 5; echo "time";
    CUP $(($i+3)) 15; echo -n "total";
    CUP $(($i+3)) 27; echo -n "used";
    CUP $(($i+3)) 39; echo -n "free";
    CUP $(($i+3)) 51; echo -n "shared";
    CUP $(($i+3)) 63; echo -n "buff/cache";
    CUP $(($i+3)) 75; echo -n "available";;
  $TRUE )
    echo '"#","time","total","used","free","shared","buff/cache","available"' > $outfile;;
  * ) useage;;
esac
let "i++"
start_time=$(date +%s)

while [ 1 ]
do
  line=$(free -m | grep "Mem:")
  total_mem=${line:15:4}
  used_mem=${line:27:4}
  free_mem=${line:39:4}
  shared_mem=${line:51:4}
  buff_cache_mem=${line:63:4}
  available_mem=${line:75:4}
  cur_time=$(date +%s); delta=$(($cur_time - $start_time))
  d_message "in loop, i: $i, delta: $delta" 2
  d_message "  total: $total_mem" 2
  d_message "  used: $used_mem" 2
  d_message "  free: $free_mem" 2
  d_message "  shared: $shared_mem" 2
  d_message "  buff/cache: $buff_cache_mem" 2
  d_message "  available: $available_mem" 2
  case $OUTPUT_TO_FILE in
    $FALSE )
      CUP $(($i+3)) 1; echo "$i";
      CUP $(($i+3)) 5; echo "${delta}";
      CUP $(($i+3)) 15; echo -n "$total_mem";
      CUP $(($i+3)) 27; echo -n "$used_mem";
      CUP $(($i+3)) 39; echo -n "$free_mem";
      CUP $(($i+3)) 51; echo -n "$shared_mem";
      CUP $(($i+3)) 63; echo -n "$buff_cache_mem";
      CUP $(($i+3)) 75; echo -n "$available_mem";;
    $TRUE )
      echo $i,${delta},$total_mem,$used_mem,$free_mem,$shared_mem,$buff_cache_mem,$available_mem >> $outfile;;
    * ) useage;;
  esac
  sleep $INTERVAL
  let "i++"
done
[[ ! $OUTPUT_TO_FILE ]] && SCU
