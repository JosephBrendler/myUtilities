#!/bin/bash
#
# helpful for qemu-system-aarch64 command syntax/options
#   https://manpages.debian.org/jessie/qemu-system-arm/qemu-system-aarch64.1.en.html

SHARE="/usr/share/qemu"

source /usr/local/sbin/script_header_brendlefly

BUILD=0.0.0a
VERBOSE=$TRUE
verbosity=3

CONFIG=""
launch_cmd=""

#-----[ default local variables ]----------------------------------------------
IMAGE_DIR=/home/joe/My_bcm2711-rpi-4-b_project/image
KERNEL=kernel8-raspiOS.img
INITRD=initramfs-rpi4b-6.11.1-202410050915
DTB=bcm2711-rpi-4-b.dtb
CPU=cortex-a72
MACHINE=raspi4b
MEM=2G
SMP=4
TARGET=raspi5640x_gpt.img
KEYDEV=keydev.img
ROOT=/dev/mmcblk0p2
KEYBOARD=""
KEYBOARD_ID="046d:c534"
NETWORK="usb-net,netdev=net0 -netdev user,id=net0"
launch_wait=5

CMDLINE="console=tty1 console=ttyAMA0,115200 rw earlyprintk \
  root=${ROOT} rootfstype=ext4 elevator=deadline fsck.repair=yes \
  rootdelay=1 net.ifnames=0"

varlist="DEFAULT_CMD SHARE CONFIG IMAGE_DIR KERNEL DTB TARGET INITRD KEYDEV ROOT MACHINE CPU MEM SMP KEYBOARD NETWORK BREAK lv.CMDLINE BREAK lv.launch_cmd BREAK bool.VERBOSE verbosity launch_wait"

# if a local or /etc/ qemu-tools.conf exists, use it to override the above
[[ -f "/usr/local/sbin/qemu-tools.conf" ]] && CONFIG="/usr/local/sbin/qemu-tools.conf"
[[ -f "./qemu-tools.conf" ]] && CONFIG="./qemu-tools.conf"
[[ -f "/etc/qemu-tools/qemu-tools.conf" ]] && CONFIG="/etc/qemu-tools/qemu-tools.conf"
source ${CONFIG}

#-----[ functions ]----------------------------------------------
display_config()
{
#separator "Configuration" $(hostname)
message "${BYon}Current Configuration --${Boff}"
longest=$(get_longest ${varlist})
display_vars ${longest} ${varlist}
}

configure_keyboard()
{
  # get keyboard bus and device nuber from lsusb; convert to numeric with $(( ))
  HOSTBUS=$(( $(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f2) ))
  HOSTADDR=$(( $(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f4 | sed 's|:$||' ) ))
  KEYBOARD="usb-host,hostbus=${HOSTBUS},hostaddr=${HOSTADDR}"
}

build_command()
{
# ignore -M in config, use virt
launch_cmd="qemu-system-aarch64"
[ -n "${name}" ] && launch_cmd+=" -name ${name}"
launch_cmd+=" -machine type=virt,iommu=smmuv3"
launch_cmd+=" -accel tcg"
[ -n "${CPU}" ] && launch_cmd+=" -cpu ${CPU}"
[ -n "${SMP}" ] && launch_cmd+=" -smp ${SMP}"
[ -n "${MEM}" ] && launch_cmd+=" -m ${MEM}"
launch_cmd+=" -rtc base=utc"
# drive(share) drive(vars) drive(qcow2) drive(iso)
launch_cmd+=" -drive if=pflash,format=raw,file=${SHARE}/edk2-aarch64-code.fd,readonly=on"
launch_cmd+=" -drive if=pflash,format=raw,file=edk2-arm-vars.fd"
[ -n "${TARGET}" ] && launch_cmd+=" -drive file=${TARGET},if=virtio,format=qcow2"
# temporary - for install
launch_cmd+=" -drive file=install-arm64-minimal-20250126T230320Z.iso,format=raw,readonly=on"


launch_cmd+="  -boot menu=on"
launch_cmd+="  -device ati-vga"
launch_cmd+="  -nic user,id=NAT,model=virtio-net-pci,mac=02:00:00:00:00:01"
launch_cmd+="  -device qemu-xhci"
launch_cmd+="  -device usb-kbd"
launch_cmd+="  -device usb-mouse"

### not using this stuff
#[ -n "${KERNEL}" ] && launch_cmd+=" -kernel ${KERNEL}"
#[ -n "${INITRD}" ] && launch_cmd+=" -initrd ${INITRD}"
#[ -n "${CMDLINE}" ] && launch_cmd+=" -append \"${CMDLINE}\""
#[ -n "${DTB}" ] && launch_cmd+=" -dtb ${DTB}"

#[ -n "${NETWORK}" ] && launch_cmd+=" -device ${NETWORK}"
##[ -n "${KEYBOARD}" ] && launch_cmd+=" -device ${KEYBOARD}"
#if [ -n "${KEYBOARD_ID}" ] ; then
  # keyboard bus and device nuber change every time the usb device is inserted
  # so use the persistent nnnn:nnnn device id to look up bus and device
#  configure_keyboard
#  launch_cmd+=" -device ${KEYBOARD}"
#fi
#if [ -n "${KEYDEV}" ] ; then
#  launch_cmd+=" -device usb-storage,drive=keydev,removable=true"
#  launch_cmd+=" -drive file=${IMAGE_DIR%/}/${KEYDEV},if=none,format=raw,id=keydev"
#fi
launch_cmd+=" &"
}

#-----[ main script ]--------------------------------------------
separator "qemu-command-$BUILD"
checkroot
build_command
display_config

sh_countdown ${launch_wait}

old_dir=$(pwd)
cd ${IMAGE_DIR}
message "now working in $(pwd)"
separator "launch" "$(hostname)"

eval "${launch_cmd}"
echo
cd ${old_dir}
message "now working in $(pwd)"

echo "QEMU has finished. Press Enter to continue."
read throwaway
