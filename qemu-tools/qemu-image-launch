#!/bin/bash
#
# helpful for qemu-system-aarch64 command syntax/options
#   https://manpages.debian.org/jessie/qemu-system-arm/qemu-system-aarch64.1.en.html

PN=$(basename $0)

source /usr/local/sbin/script_header_brendlefly

VERBOSE=$TRUE
verbosity=3

CONFIG=""
launch_cmd=""

#-----[ default local variables ]----------------------------------------------
ARCH=arm64
IMAGE_DIR=/home/joe/My_bcm2711-rpi-4-b_project/image
KERNEL=kernel8-raspiOS.img
INITRD=initramfs-rpi4b-6.11.1-202410050915
DTB=bcm2711-rpi-4-b.dtb
CPU=cortex-a72
MACHINE=raspi4b
MEM=2G
SMP=4
TARGET=raspi5640x_gpt.img
KEYDEV=keydev.img
ROOT=/dev/mmcblk0p2
KEYBOARD=""
KEYBOARD_ID="046d:c534"
NETWORK="usb-net,netdev=net0 -netdev user,id=net0"
launch_wait=5
PRETEND=$TRUE

CMDLINE="console=tty1 console=ttyAMA0,115200 rw earlyprintk \
  root=${ROOT} rootfstype=ext4 elevator=deadline fsck.repair=yes \
  rootdelay=1 net.ifnames=0"

varlist="ARCH MACHINE CPU MEM SMP CONFIG IMAGE_DIR KERNEL DTB TARGET INITRD KEYDEV ROOT KEYBOARD_ID KEYBOARD NETWORK BREAK lv.CMDLINE BREAK lv.launch_cmd BREAK bool.VERBOSE verbosity launch_wait bool.PRETEND"

#-----[ functions ]----------------------------------------------

read_config() {
d_message "running read_config ..." 3
# if a local or /etc/ qemu-tools.conf exists, use it to override the above
[[ -f "/usr/local/sbin/qemu-tools.conf" ]] && CONFIG="/usr/local/sbin/qemu-tools.conf"
[[ -f "./qemu-tools.conf" ]] && CONFIG="./qemu-tools.conf"
[[ -f "/etc/qemu-tools/qemu-tools.conf" ]] && CONFIG="/etc/qemu-tools/qemu-tools.conf"
message_n "sourcing config [ ${CONFIG} ] ..."
source ${CONFIG}; right_status $?

message_n "sourcing BUILD [ $(dirname ${CONFIG})/BUILD ] ..."
source $(dirname ${CONFIG})/BUILD ; right_status $?
}

usage() {
echo
E_message "${BRon}Usage:${Gon} ${PN} [-v|q|p|x...]${Boff}"
echo -e "  ${BYon}No arguments allowed. Specify configuration -${Boff}"
echo -e "  ${BYon}in confg file /etc/${PN}.conf${Boff}"
echo
echo -e "  ${BYon}options:${Boff}"
echo -e "    -v - increase verbosity (override config)"
echo -e "    -q - decrease verbosity (override config)"
echo -e "    ( e.g. -verbosityvq = increase verbosity by 2 )"
echo -e "    -p - pretend (do NOT launch vm)(default)"
echo -e "    -x - execute   (do launch vm)"
echo
# sanity check explanations
  [ $# -gt 1 ] && E_message "too many arguments [$#]"
exit
}


display_config()
{
#separator "Configuration" $(hostname)
message "${BYon}Current Configuration --${Boff}"
longest=$(get_longest ${varlist})
display_vars ${longest} ${varlist}
}

configure_keyboard()
{
  d_message "running configure_keyboard ..." 3
  # get keyboard bus and device nuber from lsusb; convert base 10 num with $(( 10#xxx ))
  HOSTBUS=$(( 10#$(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f2) ))
  HOSTADDR=$(( 10#$(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f4 | sed 's|:$||' ) ))
  KEYBOARD="-device \"usb-host,hostbus=${HOSTBUS},hostaddr=${HOSTADDR}\""
}

build_launch_command()
{
  d_message "running build_launch_command ..." 3
  case $ARCH in
    "arm"   ) launch_cmd="qemu-system-arm" ;;
    "arm64" ) launch_cmd="qemu-system-aarch64" ;;
    "x86_64" ) E_message "$ARCH launch not implmented yet" ; exit ;;
    *        ) E_message "Invalid ARCH: [ $ARCH ]" ; exit ;;
  esac
  [ -n "${MACHINE}" ] && launch_cmd+=" -M ${MACHINE}"
  [ -n "${CPU}" ] && launch_cmd+=" -cpu ${CPU}"
  [ -n "${MEM}" ] && launch_cmd+=" -m ${MEM}"
  [ -n "${SMP}" ] && launch_cmd+=" -smp ${SMP}"
  [ -n "${CMDLINE}" ] && launch_cmd+=" -append \"${CMDLINE}\""
  [ -n "${DTB}" ] && launch_cmd+=" -dtb ${DTB}"

  [ ${EFI} ] && launch_cmd+=" -bios /usr/share/qemu/edk2-aarch64-code.fd"

  [ -z "${TARGET}" ] && E_message "no target image specified" && exit

  case $MACHINE in
    "raspi"* ) launch_cmd+=" -drive if=sd,file=${TARGET},format=raw" ;;
    "versatilepb" )
        launch_cmd+=" -drive \"if=none,file=raspi132q1.img,index=0,media=disk,format=raw,id=disk0\""
        launch_cmd+=" -device \"virtio-blk-pci,drive=disk0,disable-modern=on,disable-legacy=off\""
        ;;
    *"virt"*      )  # probably 'type=virt,iommu=smmuv3'
        launch_cmd+=" -accel tcg"
        launch_cmd+=" -rtc base=utc"
        launch_cmd+=" -drive file="${TARGET}",if=virtio,format=qcow2"
        launch_cmd+=" -drive file="install-arm64-minimal-20250126T230320Z.iso",if=virtio,format=raw,readonly=on"
        launch_cmd+=" -boot menu=on"
        ## note:  need new ${TARGET2} or ${LIVECDZ} or ${ISO_FILE} variable in config
        ;;

    *             ) E_message "invalid machine type [ $MACHINE ]" ; exit ;;
  esac

  [ -n "${KERNEL}" ] && launch_cmd+=" -kernel ${KERNEL}"
  [ -n "${INITRD}" ] && launch_cmd+=" -initrd ${INITRD}"
  launch_cmd+=" -serial stdio -usb"
##  launch_cmd+=" -serial stdio"
  [ -n "${NETWORK}" ] && launch_cmd+=" ${NETWORK}"
  if [ -n "${KEYBOARD_ID}" ] ; then
    # keyboard bus and device nuber change every time the usb device is inserted
    # so use the persistent nnnn:nnnn device id to look up bus and device
    configure_keyboard
    launch_cmd+=" ${KEYBOARD}"
  fi
  if [ -n "${KEYDEV}" ] ; then
    launch_cmd+=" -device usb-storage,drive=keydev,removable=true"
    launch_cmd+=" -drive file=${IMAGE_DIR%/}/${KEYDEV},if=none,format=raw,id=keydev"
  fi
  launch_cmd+=" -audio none"
  launch_cmd+=" &"
}

process_commandline() {
  arg=$1
  d_message "processing cmdline with arg [ ${arg} ]" 2
  # process argument one character at a time
  while [ ${#arg} -gt 0 ]; do
    opt=${arg:0:1}
    d_message "examining arg opt [ $opt ]" 2
    case $opt in
      "-"  )
        d_message "ignoring dash [${opt}]" 2
        ;;
      [qQ] )
        if [ $verbosity -gt 0 ] ; then
          let verbosity--
          d_message "decreased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at min [ $verbosity ]" 1
        fi
        ;;
      [vV] )
        if [ $verbosity -lt 6 ] ; then
          let verbosity++
          d_message "increased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at max [ $verbosity ]" 1
        fi
        ;;
      [pP] )
        d_message "setting PRETEND TRUE" 1
        PRETEND=$TRUE
        ;;
      [xX] )
        d_message "setting EXECUTE (PRETEND FALSE)" 1
        PRETEND=$FALSE
        ;;
      *    )
        E_message "invalid option [${opt}] in argument"
        usage $1
        ;;
    esac
    # drop this character and move on
    arg=${arg:1}
  done
}

launch_vm() {
  old_dir=$(pwd)
  cd ${IMAGE_DIR}
  message "now working in $(pwd)"
  separator "launch" $(hostname)
  sh_countdown ${launch_wait}
  eval "${launch_cmd}" || message "(only pretending)"
  echo
  cd ${old_dir}
  message "now working in $(pwd)"
}

#-----[ main script ]--------------------------------------------
[ $# -gt 1 ] && usage $@
separator "$(basename $0) - ${Mon}initializing${Boff}" $(hostname)
checkroot
read_config
process_commandline $@  # to override config
separator "$(basename $0)-$BUILD" $(hostname)
build_launch_command
display_config
echo
[ $PRETEND ] && message "To launch, run ${Gon}$0 x${Boff}\n" || launch_vm

# this kinda worked ... for M raspi4b, cpu cortex-a72, m 2G, smp 4
#qemu-system-aarch64 \
#  -M ${MACHINE} \
#  -cpu ${CPU} \
#  -m ${MEM} \
#  -dtb ${IMAGE_DIR%/}/${DTB} \
#  -kernel ${IMAGE_DIR%/}/${KERNEL} \
#  -drive file=${IMAGE_DIR%/}/${TARGET},if=sd,format=raw \
#  -smp ${SMP} \
#  -serial stdio -usb \
#  -append "${CMDLINE}" \
#  &

#  -sd ${IMAGE_DIR%/}/${TARGET} \
#  -initrd "${INITRD}" \
#  -device usb-mouse -device usb-kbd \
#  -drive if=pflash,format=raw,file="${KEYDEV}" \

# old cmdline -------------------
#CMDLINE_OPTS="rw earlyprintk loglevel=8 console=ttyAMA0,115200 \
#    dwc_otg.lpm_enable=0 root=${ROOT} rootdelay=1"
