#!/bin/bash
#
# helpful for qemu-system-aarch64 command syntax/options
#   https://manpages.debian.org/jessie/qemu-system-arm/qemu-system-aarch64.1.en.html

PN=$(basename $0)

source /usr/local/sbin/script_header_brendlefly

VERBOSE=$TRUE
verbosity=3

CONFIG=""
launch_cmd=""

#-----[ default local variables ]----------------------------------------------
IMAGE_DIR=/home/joe/My_bcm2708-rpi-b_project/image
KERNEL=kernel.img
INITRD=''
DTB=bcm2708-rpi-b.dtb
CPU=arm1176
MACHINE=virt
MEM=512M
SMP=1
TARGET=raspi132q1.img
KEYDEV=''
ROOT=/dev/mmcblk0p2
KEYBOARD=""
KEYBOARD_ID="046d:c534"
NETWORK="usb-net,netdev=net0 -netdev user,id=net0"
launch_wait=5
PRETEND=$TRUE

CMDLINE="console=tty1 console=ttyAMA0,115200 rw earlyprintk \
  root=${ROOT} rootfstype=ext4 elevator=deadline fsck.repair=yes \
  rootdelay=1 net.ifnames=0"

varlist="DEFAULT_CMD CONFIG IMAGE_DIR KERNEL DTB TARGET INITRD KEYDEV ROOT MACHINE CPU MEM SMP KEYBOARD_ID KEYBOARD NETWORK BREAK lv.CMDLINE BREAK lv.launch_cmd BREAK bool.VERBOSE verbosity launch_wait bool.PRETEND"

#-----[ functions ]----------------------------------------------

read_config() {
d_message "running read_config ..." 3
# if a local or /etc/ qemu-tools.conf exists, use it to override the above
[[ -f "/usr/local/sbin/qemu-tools.conf" ]] && CONFIG="/usr/local/sbin/qemu-tools.conf"
[[ -f "./qemu-tools.conf" ]] && CONFIG="./qemu-tools.conf"
[[ -f "/etc/qemu-tools/qemu-tools.conf" ]] && CONFIG="/etc/qemu-tools/qemu-tools.conf"
message_n "sourcing config [ ${CONFIG} ] ..."
source ${CONFIG}; right_status $?

message_n "sourcing BUILD [ $(dirname ${CONFIG})/BUILD ] ..."
source $(dirname ${CONFIG})/BUILD ; right_status $?
}

usage() {
echo
E_message "${BRon}Usage:${Gon} ${PN} [-v|q|p|x...]${Boff}"
echo -e "  ${BYon}No arguments allowed. Specify configuration -${Boff}"
echo -e "  ${BYon}in confg file /etc/${PN}.conf${Boff}"
echo
echo -e "  ${BYon}options:${Boff}"
echo -e "    -v - increase verbosity (override config)"
echo -e "    -q - decrease verbosity (override config)"
echo -e "    ( e.g. -verbosityvq = increase verbosity by 2 )"
echo -e "    -p - pretend (do NOT launch vm)(default)"
echo -e "    -x - execute   (do launch vm)"
echo
# sanity check explanations
  [ $# -gt 1 ] && E_message "too many arguments [$#]"
exit
}


display_config()
{
#separator "Configuration" $(hostname)
message "${BYon}Current Configuration --${Boff}"
longest=$(get_longest ${varlist})
display_vars ${longest} ${varlist}
}

configure_keyboard()
{
  d_message "running configure_keyboard ..." 3
  # get keyboard bus and device nuber from lsusb; convert base 10 num with $(( 10#xxx ))
  HOSTBUS=$(( 10#$(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f2) ))
  HOSTADDR=$(( 10#$(lsusb | grep ${KEYBOARD_ID} | cut -d' ' -f4 | sed 's|:$||' ) ))
  KEYBOARD="usb-host,hostbus=${HOSTBUS},hostaddr=${HOSTADDR}"
}

build_command()
{
d_message "running build_command ..." 3
launch_cmd="qemu-system-arm"
[ -n "${MACHINE}" ] && launch_cmd+=" -M ${MACHINE}"
[ -n "${CMDLINE}" ] && launch_cmd+=" -append \"${CMDLINE}\""
[ -n "${DTB}" ] && launch_cmd+=" -dtb ${DTB}"
[ -n "${TARGET}" ] && launch_cmd+=" -drive if=sd,file=${TARGET},format=raw"
[ -n "${KERNEL}" ] && launch_cmd+=" -kernel ${KERNEL}"
[ -n "${INITRD}" ] && launch_cmd+=" -initrd ${INITRD}"
[ -n "${MEM}" ] && launch_cmd+=" -m ${MEM}"
[ -n "${SMP}" ] && launch_cmd+=" -smp ${SMP}"
launch_cmd+=" -serial stdio"
[ -n "${NETWORK}" ] && launch_cmd+=" -device ${NETWORK}"
if [ -n "${KEYBOARD_ID}" ] ; then
  # keyboard bus and device nuber change every time the usb device is inserted
  # so use the persistent nnnn:nnnn device id to look up bus and device
  configure_keyboard
  launch_cmd+=" -device ${KEYBOARD}"
fi
if [ -n "${KEYDEV}" ] ; then
  launch_cmd+=" -device usb-storage,drive=keydev,removable=true"
  launch_cmd+=" -drive file=${IMAGE_DIR%/}/${KEYDEV},if=none,format=raw,id=keydev"
fi
launch_cmd+=" &"
}

process_commandline() {
  arg=$1
  d_message "processing cmdline with arg [ ${arg} ]" 2
  # process argument one character at a time
  while [ ${#arg} -gt 0 ]; do
    opt=${arg:0:1}
    d_message "examining arg opt [ $opt ]" 2
    case $opt in
      "-"  )
        d_message "ignoring dash [${opt}]" 2
        ;;
      [qQ] )
        if [ $verbosity -gt 0 ] ; then
          let verbosity--
          d_message "decreased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at min [ $verbosity ]" 1
        fi
        ;;
      [vV] )
        if [ $verbosity -lt 6 ] ; then
          let verbosity++
          d_message "increased verbosity to [ $verbosity ]" 1
        else
            d_message "verbosity already at max [ $verbosity ]" 1
        fi
        ;;
      [pP] )
        d_message "setting PRETEND TRUE" 1
        PRETEND=$TRUE
        ;;
      [xX] )
        d_message "setting EXECUTE (PRETEND FALSE)" 1
        PRETEND=$FALSE
        ;;
      *    )
        E_message "invalid option [${opt}] in argument"
        usage $1
        ;;
    esac
    # drop this character and move on
    arg=${arg:1}
  done
}

launch_vm() {
  old_dir=$(pwd)
  cd ${IMAGE_DIR}
  message "now working in $(pwd)"
  separator "launch" $(hostname)
  sh_countdown ${launch_wait}
  eval "${launch_cmd}" || message "(only pretending)"
  echo
  cd ${old_dir}
  message "now working in $(pwd)"
}

#-----[ main script ]--------------------------------------------
[ $# -gt 1 ] && usage $@
separator "qemu-command - ${Mon}initializing${Boff}" $(hostname)
checkroot
read_config
process_commandline $@  # to override config
separator "qemu-command-$BUILD" $(hostname)
build_command
display_config
[ ! $PRETEND ] && launch_vm
