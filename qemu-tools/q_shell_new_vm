#!/bin/sh
#
# Template for running a QEMU AArch64 VM on Linux/macOS
#

# On macOS, change SHARE according to your CPU type:
#
# Apple silicon: /opt/homebrew/share/qemu
# Intel CPU: /usr/local/share/qemu
SHARE="/usr/share/qemu"

qemu-system-aarch64 \
    -name "arm64q2" \
    -machine type=virt,iommu=smmuv3 \
    -accel tcg \
    -cpu cortex-a72 \
    -smp 4 \
    -m 2048 \
    -rtc base=utc \
    -drive if=pflash,format=raw,file="${SHARE}/edk2-aarch64-code.fd",readonly=on \
    -drive if=pflash,format=raw,file=edk2-arm-vars.fd \
    -drive file="joetoo_test.qcow2",if=virtio,format=qcow2 \
    -drive file="install-arm64-minimal-20250126T230320Z.iso",format=raw,readonly=on \
    -boot menu=on \
    -device ati-vga \
    -nic user,id=NAT,model=virtio-net-pci,mac=02:00:00:00:00:01 \
    -device qemu-xhci \
    -device usb-kbd \
    -device usb-mouse \
    -device usb-host,hostbus=1,hostaddr=4 \
&
echo "QEMU has finished. Press Enter to continue."
read throwaway

#    -display sdl \
#    -vga std \

#-dtb /home/joe/My_bcm2711-rpi-4-b_project/image/bcm2711-rpi-4-b.dtb \

#-kernel /home/joe/My_bcm2711-rpi-4-b_project/image/kernel8.img-6.12.9 \
#-append "console=tty1 console=ttyAMA0,115200 rw earlyprintk \
#     elevator=deadline fsck.repair=yes rootdelay=1 net.ifnames=0 \
#     verbosity=2 loglevel=8 coherent_pool=1M 8250.nr_uarts=0 \
#     vc_mem.mem_base=0x3f000000 vc_mem.mem_size=0x3f600000 dwc_otg.lpm_enable=0" \

#    -device usb-tablet \
#    -vga std \

#    -device cirrus-vga \

#    -display gtk \

