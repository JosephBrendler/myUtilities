#!/bin/bash
# cb-assemble-make-conf.conf
# sourced by cb-assemble-make-conf so the make.conf construction can
#     be completed in a single automated, unsupervised pass
#     (set INTERACTIVE=$FALSE and OVER_WRITE=$TRUE to make it automatic like that)
#
# you can also do a batch-run like this:
#     make a whole batch of new make.conf files
#    for x in $( echo $(joetoo-sbc-list ) $(echo "generic-aarch64 generic-armv7a generic-armv6j generic-amd64")); do
#        sudo ./cb-assemble-make-conf $x;
#    done
#
# and you can also deploy all those make.conf files to your mkenv-files structure like this:
#    source_dir=/home/joe/myUtilities/dev-sbc/crossbuild-tools/make-conf-files/
#    dest_tree=/home/joe/myUtilities/dev-sbc/crossbuild-tools/mkenv-files/
#    for x in $(find ${source_dir%/}/ -maxdepth 1 -type f -printf '%f\n'); do
#        IFS='.' read -ra myarray <<< $x ;
#        board=${myarray[4]};
#        dest_file="make.conf.${myarray[3]}";
#        cp -v "${source_dir%/}/${x}" "${dest_tree%/}/${board}/etc/portage/${dest_file}";
#    done
#
# and you can make the crossbuild version effective by copying it to make.conf like this
#    dest_tree=/home/joe/myUtilities/dev-sbc/crossbuild-tools/mkenv-files/
#    for x in $(joetoo-sbc-list) generic-aarch64 generic-amd64 generic-armv6j generic-armv7a; do
#        cp -v "${dest_tree%/}/${x}/etc/portage/make.conf.crossbuild" "${dest_tree%/}/${x}/etc/portage/make.conf";
#    done
#

# INTERACTIVE (specify $TRUE or $FALSE)
#    if $TRUE, OUT_FILE will overwrite any pre-existing same-named file
#    if $FALSE, then user will be asked to confirm before that happens
INTERACTIVE=$TRUE
#INTERACTIVE=$FALSE

# SYS_TYPE (specify either "headless" or "desktop" - only the first character is used)
#    this is used to
#    (1) select the basic set of USE flags to be included
#    (2) construct the output filename (see below)
SYS_TYPE="desktop"
#SYS_TYPE="headless"

# ENV_TYPE (specify "crossbuild" or "chroot" - only the first two characters are used)
#    this is used as needed or not for crossbuild or chroot env, to
#    (1) assign ROOT, CHOST, CBUILD, and ARCH
#    (2) maybe add "${ARCH} -acl -pam" to USE flags)
#    (3) construct the output filename (see below)
ENV_TYPE="chroot"
#ENV_TYPE="crossbuild"

# OUT_FILE (specify the path of the file to which the draft make.conf should be copied)
#    the ${SYS_TYPE}, ${ENV_TYPE}, and ${BOARD} name will be appended to this
#    ( e.g. make.conf.headless.crossbuild.bcm2708-rpi-b )
OUT_FILE="/home/joe/myUtilities/dev-sbc/crossbuild-tools/make-conf-files/make.conf"
#OUT_FILE="/home/joe/myUtilities/dev-sbc/crossbuild-tools/make-conf-files/make.conf.chroot"
#OUT_FILE="/home/joe/myUtilities/dev-sbc/crossbuild-tools/make-conf-files/make.conf.crossbuild"

# OVER_WRITE (specify $TRUE or $FALSE)
#    if $TRUE, OUT_FILE will overwrite any pre-existing same-named file
#    if $FALSE, then user will be asked to confirm before that happens
OVER_WRITE=$FALSE
#OVER_WRITE=$TRUE
