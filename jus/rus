#!/bin/bash
# rus - rebuild update sequence - to rebuild system as required when a key package major update occurs
source /usr/local/sbin/script_header_brendlefly

PORTDIR="/usr/portage"
PKGDIR="${PORTDIR}/packages"

key_packages1=("")
key_packages2=("")
key_packages2+=("sys-kernel/linux-headers")
key_packages1+=("sys-libs/glibc")
key_packages1+=("sys-devel/binutils")
key_packages2+=("sys-devel/gcc-config")
key_packages1+=("sys-devel/libtool")
key_packages1+=("sys-devel/gcc")

answer=""

#----------[ functions ]-------------------------------------
get_number()        # set external variable $answer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [0-9]: " && read answer;
while ! expr "${answer:0:1}" : [0-9] >/dev/null;  # answer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [0-9]: " && read answer; done; }

#----------[ main script ]-----------------------------------
message "removing PKGDIR" && rm -rf ${PKGDIR}
message "rebuilding toolchain" && emerge -av ${key_packages1[@]} ${key_packages2[@]}
gcc-config -l
get_number "Select gcc profile from list above"
message "setting gcc-config $answer" && gcc-config ${answer}
message "sourcing /etc/profile" && source /etc/profile
message "rebuilding toolchain packages" && emerge -avb ${key_packages1[@]}  # -b = --buildpkg
message "rebuilding system packages" && emerge -avbke system   # -k = --usepkg (i.e. use binary pkg if available)
message "rebuilding world packages" && emerge -avbke world
message "rebuild complete -- resume normal update sequence (jus)"
