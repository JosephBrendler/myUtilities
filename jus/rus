#!/bin/bash
# rus - rebuild update sequence - to rebuild system as required when a key package major update occurs
source /usr/local/sbin/script_header_brendlefly
#  0.0.7 - adds pick_binutils() function, -s option
#  0.0.8 - stop/start cloudsync packages/rsyncd before/after
#  0.0.10 - follow gentoo replacement of sys-devel/libtool with dev-build/libtool
BUILD=0.0.10
VERBOSE=$TRUE
verbosity=3

# To Do - assumes cronie; generalize for other cron systems

# To Do -- re-do rebuild w/updated toolchain sequence according to new (2020) best practices
# see https://forums.gentoo.org/viewtopic-t-1118276-start-0.html
# see https://wiki.gentoo.org/wiki/Upgrading_GCC#Quick_guide_to_GCC_upgrades
# see https://wiki.gentoo.org/wiki/Project:Toolchain
#
# updates ([headers], glibc, binutils, libtool)
# ( below from wiki gcc-upgrade)
# rebuild gcc
# source /etc/profile
# gcc-config
# rebuild libtool, binutils
# binutils-config
# source /etc/profile
# rebuild glibc
# locale-gen
# source /etc/profile
# mount /boot
# emerge @world (rebuild whole tree)
# source /etc/profile
# etc-update
# perl-cleaner --all
# emerge --sync
# emerge -auDN @world (update only)
# revdep-rebuild
# emerge --depclean --deep
# other emerge clean-up/maintenance as needed (eclean emaint et al).
# (end wiki suggestions)
# reboot
# rebuild kernel
# rebuild boot loader w/ rebuilt kernel (grub filo etc)

# PORTDIR, PKGDIR, DISTDIR must be evaluated in this order if e.g. PKGDIR=${PORTDIR}/packages
eval $( grep ^PORTDIR /etc/portage/make.conf )
eval $( grep ^PKGDIR /etc/portage/make.conf )

status_file="/root/bin/rus-status"

key_packages1=(
'sys-libs/glibc'
'sys-devel/binutils'
'dev-build/libtool'
'sys-devel/gcc'
)

key_packages2=(
'sys-kernel/linux-headers'
'sys-devel/gcc-config'
)

# Defaults
RESUME=$FALSE
DISTCC=$FALSE
J1_MAKEOPTS=$FALSE

# default setting - my be over-ridden by command line option (n vs d)
rus_features=" -distcc -getbinpkg"

# Notes on command sequence:
#   -b = --buildpkg (i.e. build a new binary package)
#   -k = --usepkg (i.e. use binary package if available)
#   -e = --emptytree (i.e. reinstall entire dependency tree)
#   FEATURES="-getbinpkg" deselects -g (i.e. use local binaries only, if -k is used)
command_sequence=(
'pkgsync stop'
'rm -rfv ${PKGDIR}'
'FEATURES="${FEATURES} ${rus_features}" emerge -av1 ${key_packages1[@]} ${key_packages2[@]} --keep-going'
'pick_gcc'
'pick_binutils'
'FEATURES="${FEATURES} ${rus_features}" emerge -avb1 ${key_packages1[@]} --keep-going'
'FEATURES="${FEATURES} ${rus_features}" emerge -avbke1 system --keep-going'
'FEATURES="${FEATURES} ${rus_features}" emerge -avbke1 world --keep-going'
'pkgsync start'
)

# declarative future tense (one more entry than command list, so status can come back "Already Done")
msg1_sequence=(
'Stop syncing packages with other nodes'
'Remove PKGDIR'
'Rebuild toolchain'
'Select gcc'
'Select binutils'
'Rebuild toolchain with new gcc, binutils'
'Rebuild system set with new toolchain'
'Rebuild world set with new toolchain'
'Re-start syncing packages with other nodes'
'Already Done'
)

# active present tense (one more entry than command list, so status can come back "Already Done")
msg2_sequence=(
'Stoping package syncing with other nodes'
'Removing PKGDIR'
'Rebuilding toolchain'
'Selecting gcc'
'Selecting binutils'
'Rebuilding toolchain with new gcc, binutils'
'Rebuilding system set with new toolchain'
'Rebuilding world set with new toolchain'
'Re-starting package syncing with other nodes'
'Already Done'
)

answer=""   # response to prompt
status=0    # global status variable

#----------[ functions ]-------------------------------------
useage()
{
  echo -e $BGon"Useage: rus [-[s|r|j]|[0-$((${#command_sequence[@]}-1))]]"$Boff
  echo -e $BYon"Options:"$Boff
  echo -e $BWon"  -h  -- help: print this message and exit"$Boff
  echo -e $BWon"  -s  -- read status; report next step"$Boff
  echo -e $BWon"  -r  -- read status; resume at next step"$Boff
  echo -e $BWon'  -j  -- set MAKEOPTS="j1" (useful if resource constrained)'$Boff
  echo -e $BWon'  -d  -- set FEATURES="distcc"  (useful if resource constrained)'$Boff
  echo -e $BWon'  -n  -- set FEATURES="-distcc" (default; preferred)'$Boff
  echo -e $BWon'  -q  -- decrease verbosity'$Boff
  echo -e $BWon'  -v  -- increase verbosity'$Boff
  echo -e $BWon"  0-$((${#command_sequence[@]}-1)) -- \"resume\" at step number N"$Boff
  echo -e $BYon"Examples:"$Boff
  echo -e $LBon'  "rus -rj3" == "rus jr3" - MAKEOPTS; "3" overrides "r"; next step=3'$Boff
  echo -e $LBon'  "rus -r3" != "rus 3r" - the latter action overrides'$Boff
  echo -e $LBon'  "rus r" resumes at step saved in status file'$Boff
  echo -e $LBon'  "rus -4" starts at step 4'$Boff
  echo -e $LBon'   any "-" is optional & ignored for now'$Boff
  echo -e $LBon'   "s" anywhere in the option set overrides other options'$Boff
  echo
  for (( i=0; i<$(( ${#msg1_sequence[@]} - 1 )); i++ ))
  do
    echo -e "  ${BWon}${i}: ${BBon}${msg1_sequence[${i}]}"
  done
}

set_j1_makeopts() {
  for (( i=0; i<${#command_sequence[@]}; i++ ))
  do
    command_sequence[i]=$(echo ${command_sequence[i]} | sed 's/FEATURES=/MAKEOPTS="-j1 -l1" FEATURES=/')
  done
}

set_distcc() {
  case $1 in
    $FALSE ) rus_features=" -distcc -getbinpkg" ;;
    $TRUE  ) rus_features=" distcc -getbinpkg" ;;
    *     ) E_message "Internal error - invalid parameter sent to set_distcc [$1]"; exit 1 ;;
  esac
}

get_number()        # set external variable $answer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [0-9]: " && read answer;
#while ! expr "${answer:0:1}" : [0-9] >/dev/null;  # answer not a regex match
while ! expr "${answer:0:1}" : \[0-9\] >/dev/null;  # answer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [0-9]: " && read answer; done; }

get_answer()        # set external variable $answer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [yngYNG]: " && read answer;
while ! expr "${answer:0:1}" : \[yngYNG\] >/dev/null;  # answer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [yngYNG]: " && read answer; done; }

pick_gcc()          # pick the appropriate gcc
{ gcc-config -l; get_number "Select gcc profile from list above";
message "setting gcc-config $answer" && gcc-config ${answer};
message "sourcing /etc/profile" && source /etc/profile; }

pick_binutils()          # pick the appropriate gcc
{ binutils-config -l; get_number "Select binutils profile from list above";
message "setting binutils-config $answer" && binutils-config ${answer};
message "sourcing /etc/profile" && source /etc/profile; }

pkgsync()            # stop/start syncing packages
{
action="$1"
echo; message "action: ${action}"
cslinelist=($(grep -n cloudsync /etc/crontab | cut -d':' -f1))
if [[ "${action}" == "stop" ]]
then
  message "commenting out cloudsync cron job in crontab";
  for ((i=0; i<${#cslinelist[@]}; i++))
  do
    message "maybe comment line: ${cslinelist[i]}"
    sed -i "${cslinelist[i]} s|^.|#&|" /etc/crontab;
  done;
  message "stopping rsyncd"
  /etc/init.d/rsyncd stop
  message "restarting cronie"
  /etc/init.d/cronie restart
elif [[ "${action}" == "start" ]]
then
  message "un-commenting cloudsync cron job in crontab"
  # if it is not already commented, then comment it
  for ((i=0; i<${#cslinelist[@]}; i++))
  do
    message "maybe uncomment line: ${cslinelist[i]}"
    sed -i "${cslinelist[i]} s|^#||" /etc/crontab
  done
  message "restarting rsyncd"
  /etc/init.d/rsyncd restart
  message "restarting cronie"
  /etc/init.d/cronie restart
else
  E_message "Invalid action passed to pkgsync; exiting"
  exit
fi
message "done pkgsync ${action}"
}

process_argument() {
  d_message "about to process argument(s): [ $* ]" 1
  d_message "1: [ $1 ], 2: [ $2 ]" 2
  # for now, only one (possibly compound) argument allowed
  [[ $# -gt 1 ]] && ( useage ; exit ) || echo "arg: [${1}]"
  local args="$1"
  local mystatus=0
  while [[ ! -z $args ]]
  do
    # examine, process the first character
    char=${args:0:1}
    d_message "char = [${char}]" 2
    case ${char} in
      "-"  ) d_message "ignoring dash..." 3 ;; # ignore for now
      "s"  ) read mystatus < ${status_file} && \
             message "Next step: ${mystatus} -- ${msg1_sequence[${mystatus}]}" && \
             exit ;;
      "r"  ) read mystatus < ${status_file} && RESUME=$TRUE && d_message "mystatus = [${mystatus}]" 2;;
      "j"  ) set_j1_makeopts && J1_MAKEOPTS=$TRUE && d_message "Setting J1_MAKEOPTS ${BGon}'on'${Boff}..." 2 ;;
      "d"  ) DISTCC=$TRUE && d_message "Setting distcc ${BGon}'on'${Boff}..." 2  && set_distcc ${DISTCC} ;;
      "n"  ) DISTCC=$FALSE && d_message "Setting distcc ${BRon}'off'${Boff}..." 2  && set_distcc ${DISTCC} ;;
      "q"  )
          [ ${verbosity} -gt 0 ] && let verbosity--
          [ ${verbosity} -eq 0 ] && VERBOSE=$FALSE
          d_message "decreased verbosity to [${BYon}${verbosity}${Boff}]" 2
          ;;
      "v"  )
          [ ${verbosity} -lt 9 ] && let verbosity++
          [ ${verbosity} -gt 0 ] && VERBOSE=$TRUE
          d_message "increased verbosity to [${BYon}${verbosity}${Boff}]" 2
          ;;
      [0-9]) mystatus=${char} && RESUME=$TRUE && d_message "forced mystatus = [${mystatus}]" 2 ;;
      *)     useage; exit ;;
    esac
    args=${args:1}
  done
  status=${mystatus}
  # passes through with status=0 if no arguments on command line
}

display_config()
{
message "${BWon}Using configuration data below: ${Boff}"
echo -e ${LBon}"   VERBOSE................: "$(status_color ${VERBOSE})$(TrueFalse ${VERBOSE})${Boff}
echo -e ${LBon}"   STATUS_FILE............: "${Boff}${status_file}
echo -e ${LBon}"   PKGDIR.................: "${Boff}${PKGDIR}
echo -e ${LBon}"   rus_features...........: "${rus_features}
echo -e ${LBon}"   DISTCC.................: "$(status_color ${DISTCC})$(TrueFalse ${DISTCC})${Boff}
echo -e ${LBon}"   RESUME.................: "$(status_color ${RESUME})$(TrueFalse ${RESUME})${Boff}
echo -e ${LBon}"   J1_MAKEOPTS............: "$(status_color ${J1_MAKEOPTS})$(TrueFalse ${J1_MAKEOPTS})${Boff}
echo -e ${LBon}"   verbosity..............: "${Boff}${verbosity}
echo -e ${BYon}"   Status.................: Next step: ${status} -- ${msg1_sequence[${status}]}"
}

#----------[ main script ]-----------------------------------
# display script kick-off separator
separator "joetoo Rebuild Update Sequence -- rus-${BUILD}"
# must be root
message "Checking root UID... "&& checkroot

### ToDO - add full command line processor (this assumes only one argument, containing multiple one-letter options)
process_argument $*

# display config variables from jus.conf and option flags from command line
display_config

while [[ status -lt ${#command_sequence[@]} ]]
do
  [[ ! $answer == [gG] ]] && answer="" && \
    separator "${msg1_sequence[status]}" "rus-${BUILD} Now starting"
    get_answer "Are you ready to execute step ${status} -- ${BYon}${msg1_sequence[status]}${Boff}?"
  if [[ $answer == [YyGg] ]]
  then
    message "${LBon}Now executing step ${status} -- ${BYon}${msg2_sequence[status]}${LBon}...${Boff}"
    eval ${command_sequence[status]}; result="$?"; right_status "${result}"
    if [[ ${result} ]]
    then
      message "Step ${status} -- ${BYon}${msg1_sequence[status]}${Boff} -- complete"
    else
      E_message "Step ${status} -- ${BYon}${msg1_sequence[status]}${Boff} -- ${BRon}failed${Boff}"
      E_message "Quitting..."
    fi
  else
    E_message "User chose ${BRon}NOT${Boff} to execute step ${status} -- ${BYon}${msg1_sequence[status]}${Boff}."
    E_message "Quitting..."
    exit
  fi
  # increment number of next step and store in status_file
  let status++;
  message "Saving [${status}] to ${status_file}"
  echo $status > ${status_file}
done

echo
message "rus complete.  recommend verification with something line --"
message 'eix-update && FEATURES="${FEATURES} ${rus_features}" emerge -avbke1 --keep-going $(eix -Ic | grep -v "07/0[1-9]/2023" | cut -d" " -f2 | grep /)'

